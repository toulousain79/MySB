# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
funcs_iptables=1
##################### FIRST LINE #####################################

# http://easyfwgen.morizot.net/gen/

gfnFlushingIptables() {
	# Reset Default Policies
	iptables -P INPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -P OUTPUT ACCEPT
	iptables -t nat -P PREROUTING ACCEPT
	iptables -t nat -P POSTROUTING ACCEPT
	iptables -t nat -P OUTPUT ACCEPT
	iptables -t mangle -P PREROUTING ACCEPT
	iptables -t mangle -P OUTPUT ACCEPT

	# Flush all rules
	iptables -F
	iptables -t nat -F
	iptables -t mangle -F

	# Erase all non-default chains
	iptables -X
	iptables -t nat -X
	iptables -t mangle -X
}

gfnLoadingKernelModules () {
	# You should uncomment the line below and run it the first time just to
	# ensure all kernel module dependencies are OK.  There is no need to run
	# every time, however.
	/sbin/depmod -a &> /dev/null

	# Unless you have kernel module auto-loading disabled, you should not
	# need to manually load each of these modules.  Other than ip_tables,
	# ip_conntrack, and some of the optional modules, I've left these
	# commented by default.  Uncomment if you have any problems or if
	# you have disabled module autoload.  Note that some modules must
	# be loaded by another kernel module.

	# core netfilter module
	/sbin/modprobe ip_tables &> /dev/null

	# the stateful connection tracking module
	/sbin/modprobe ip_conntrack &> /dev/null

	# filter table module
	# /sbin/modprobe iptable_filter &> /dev/null

	# mangle table module
	# /sbin/modprobe iptable_mangle &> /dev/null

	# nat table module
	# /sbin/modprobe iptable_nat &> /dev/null

	# LOG target module
	# /sbin/modprobe ipt_LOG &> /dev/null

	# This is used to limit the number of packets per sec/min/hr
	# /sbin/modprobe ipt_limit &> /dev/null

	# masquerade target module
	# /sbin/modprobe ipt_MASQUERADE &> /dev/null

	# filter using owner as part of the match
	# /sbin/modprobe ipt_owner &> /dev/null

	# REJECT target drops the packet and returns an ICMP response.
	# The response is configurable.  By default, connection refused.
	# /sbin/modprobe ipt_REJECT &> /dev/null

	# This target allows packets to be marked in the mangle table
	# /sbin/modprobe ipt_mark &> /dev/null

	# This target affects the TCP MSS
	# /sbin/modprobe ipt_tcpmss &> /dev/null

	# This match allows multiple ports instead of a single port or range
	# /sbin/modprobe multiport &> /dev/null

	# This match checks against the TCP flags
	# /sbin/modprobe ipt_state &> /dev/null

	# This match catches packets with invalid flags
	# /sbin/modprobe ipt_unclean &> /dev/null

	# The ftp nat module is required for non-PASV ftp support
	/sbin/modprobe ip_nat_ftp &> /dev/null

	# the module for full ftp connection tracking
	/sbin/modprobe ip_conntrack_ftp &> /dev/null

	# the module for full irc connection tracking
	# /sbin/modprobe ip_conntrack_irc &> /dev/null
}

gfnKernelParamConfig() {
	# See http://ipsysctl-tutorial.frozentux.net/chunkyhtml/index.html
	# for a detailed tutorial on sysctl and the various settings
	# available.

	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		# Required to enable IPv4 forwarding.
		# Redhat users can try setting FORWARD_IPV4 in /etc/sysconfig/network to true
		# Alternatively, it can be set in /etc/sysctl.conf
		/sbin/sysctl -w net.ipv4.ip_forward="1" &> /dev/null
	fi

	# This enables dynamic address hacking.
	# This may help if you have a dynamic IP address \(e.g. slip, ppp, dhcp\).
	#/sbin/sysctl -w net.ipv4.ip_dynaddr="1" &> /dev/null

	# This enables SYN flood protection.
	# The SYN cookies activation allows your system to accept an unlimited
	# number of TCP connections while still trying to give reasonable
	# service during a denial of service attack.
	/sbin/sysctl -w net.ipv4.tcp_syncookies="1" &> /dev/null

	# This enables source validation by reversed path according to RFC1812.
	# In other words, did the response packet originate from the same interface
	# through which the source packet was sent?  It's recommended for single-homed
	# systems and routers on stub networks.  Since those are the configurations
	# this firewall is designed to support, I turn it on by default.
	# Turn it off if you use multiple NICs connected to the same network.
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter="1" &> /dev/null

	# This option allows a subnet to be firewalled with a single IP address.
	# It's used to build a DMZ.  Since that's not a focus of this firewall
	# script, it's not enabled by default, but is included for reference.
	# See: http://www.sjdjweis.com/linux/proxyarp/
	#/sbin/sysctl -w net.ipv4.conf.all.proxy_arp="1" &> /dev/null

	# The following kernel settings were suggested by Alex Weeks. Thanks!
	# This kernel parameter instructs the kernel to ignore all ICMP
	# echo requests sent to the broadcast address.  This prevents
	# a number of smurfs and similar DoS nasty attacks.
	/sbin/sysctl -w net.ipv4.icmp_echo_ignore_broadcasts="1" &> /dev/null

	# This option can be used to accept or refuse source routed
	# packets.  It is usually on by default, but is generally
	# considered a security risk.  This option turns it off.
	/sbin/sysctl -w net.ipv4.conf.all.accept_source_route="0" &> /dev/null

	# This option can disable ICMP redirects.  ICMP redirects
	# are generally considered a security risk and shouldn't be
	# needed by most systems using this generator.
	#/sbin/sysctl -w net.ipv4.conf.all.accept_redirects="0" &> /dev/null

	# However, we'll ensure the secure_redirects option is on instead.
	# This option accepts only from gateways in the default gateways list.
	/sbin/sysctl -w net.ipv4.conf.all.secure_redirects="1" &> /dev/null

	# This option logs packets from impossible addresses.
	/sbin/sysctl -w net.ipv4.conf.all.log_martians="1" &> /dev/null

	# Restarting the procps service
	service procps restart &> /dev/null
}

#### Create user chains to reduce the number of rules each packet must traverse.
gfnCreatingUserChain() {
	# Create a chain to filter INVALID packets
	iptables -N bad_packets
	# Create another chain to filter bad TCP packets
	iptables -N bad_tcp_packets
	# Create separate chains for icmp, TCP (incoming and outgoing), and incoming UDP packets.
	iptables -N icmp_packets
	# Used for UDP packets inbound from the Internet
	iptables -N udp_inbound
	# Used to block outbound UDP services from internal network (Default to allow all)
	iptables -N udp_outbound
	# Used to allow inbound services if desired (Default fail except for established sessions)
	iptables -N tcp_inbound
	# Used to block outbound services from internal network (Default to allow all)
	iptables -N tcp_outbound
}

#### Populate BAD Chains
gfnPopulatingBadChain() {
	## bad_packets chain
	# Drop packets received on the external interface claiming a source of the local network
	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		for ip in $gsVpnLocalIps; do
			iptables -A bad_packets -p ALL -i $gsPrimaryInet -s $ip -j LOG --log-prefix "[MySB] Illegal source: "
			iptables -A bad_packets -p ALL -i $gsPrimaryInet -s $ip -j DROP
		done
	fi

	# Drop INVALID packets immediately
	iptables -A bad_packets -p ALL -m state --state INVALID -j LOG --log-prefix "[MySB] Invalid packet: "
	iptables -A bad_packets -p ALL -m state --state INVALID -j DROP
	# Then check the TCP packets for additional problems
	iptables -A bad_packets -p TCP -j bad_tcp_packets
	# All good, so return
	iptables -A bad_packets -p ALL -j RETURN

	## bad_tcp_packets chain
	# All TCP packets will traverse this chain.
	# Every new connection attempt should begin with a syn packet.  If it doesn't, it is likely a port scan.
	# This drops packets in state NEW that are not flagged as syn packets.
	#
	# Return to the calling chain if the bad packets originate from the local interface.
	# This maintains the approach throughout this firewall of a largely trusted internal network.
	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		iptables -A bad_tcp_packets -p TCP -i tun+ -j RETURN
		iptables -A bad_tcp_packets -p TCP -i br0 -j RETURN
	fi

	# However, I originally did apply this filter to the forward chain for packets originating from the internal network.
	# While I have not conclusively determined its effect, it appears to have the interesting side effect of blocking some of the ad systems.
	# Apparently some ad systems have the browser initiate a NEW connection that is not flagged as a syn packet to retrieve the ad image.
	# If you wish to experiment further comment the rule above. If you try it, you may also wish to uncomment the rule below.
	# It will keep those packets from being logged. There are a lot of them.
	# iptables -A bad_tcp_packets -p TCP -i tun+ ! --syn -m state --state NEW -j DROP
	# iptables -A bad_tcp_packets -p TCP -i br0 ! --syn -m state --state NEW -j DROP
	iptables -A bad_tcp_packets -p TCP ! --syn -m state --state NEW -j LOG --log-prefix "[MySB] New not syn: "
	iptables -A bad_tcp_packets -p TCP ! --syn -m state --state NEW -j DROP
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL NONE -j LOG --log-prefix "[MySB] Stealth scan: "
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL NONE -j DROP
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL ALL -j LOG --log-prefix "[MySB] Stealth scan: "
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL ALL -j DROP
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL FIN,URG,PSH -j LOG --log-prefix "[MySB] Stealth scan: "
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL FIN,URG,PSH -j DROP
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL SYN,RST,ACK,FIN,URG -j LOG --log-prefix "[MySB] Stealth scan: "
	iptables -A bad_tcp_packets -p TCP --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
	iptables -A bad_tcp_packets -p TCP --tcp-flags SYN,RST SYN,RST -j LOG --log-prefix "[MySB] Stealth scan: "
	iptables -A bad_tcp_packets -p TCP --tcp-flags SYN,RST SYN,RST -j DROP
	iptables -A bad_tcp_packets -p TCP --tcp-flags SYN,FIN SYN,FIN -j LOG --log-prefix "[MySB] Stealth scan: "
	iptables -A bad_tcp_packets -p TCP --tcp-flags SYN,FIN SYN,FIN -j DROP
	## All good, so return
	iptables -A bad_tcp_packets -p TCP -j RETURN
}

#### Populate ICMP chain
gfnPopulatingIcmpChain() {
	local sOvhIPv4 sOnlineIPv4 sDigicubeIPv4 nNumLine

	## icmp_packets chain
	# This chain is for inbound (from the Internet) icmp packets only.
	# Type 8 (Echo Request) is not accepted by default.
	# Enable it if you want remote hosts to be able to reach you.
	# 11 (Time Exceeded) is the only one accepted
	# that would not already be covered by the established
	# connection rule.  Applied to INPUT on the external interface.
	#
	# See: http://www.ee.siue.edu/~rwalden/networking/icmp.html
	# for more info on ICMP types.
	#
	# Note that the stateful settings allow replies to ICMP packets.
	# These rules allow new packets of the specified types.
	#
	# ICMP packets should fit in a Layer 2 frame, thus they should
	# never be fragmented.  Fragmented ICMP packets are a typical sign
	# of a denial of service attack.
	case "$1" in
		"create")
			iptables -A icmp_packets --fragment -p ICMP -j LOG --log-prefix "[MySB] ICMP Fragment: "
			iptables -A icmp_packets --fragment -p ICMP -j DROP
		;;
	esac

	#### Allow provider monitoring by ICMP
	case "$1" in
		"create")
			if [ ! -z "$gsServerProvider" ] && [ "$gsServerProvider" != "NONE" ]; then
				case "$gsServerProvider" in
					"OVH")
						sOvhIPv4="`cmdMySQL 'MySB_db' "SELECT ipv4 FROM providers_monitoring WHERE provider = 'OVH' AND ipv4 !='';"`"
						for IPv4 in $sOvhIPv4; do
							iptables -A icmp_packets -p ICMP -s $IPv4 --icmp-type 8 -j LOG --log-prefix "[MySB] Ping detected: " -m comment --comment "$gsServerProvider monitoring"
							iptables -A icmp_packets -p ICMP -s $IPv4 --icmp-type 8 -j ACCEPT -m comment --comment "$gsServerProvider monitoring"
						done
					;;
					"ONLINE")
						sOnlineIPv4="`cmdMySQL 'MySB_db' "SELECT ipv4 FROM providers_monitoring WHERE provider = 'ONLINE' AND ipv4 !='';"`"
						for IPv4 in $sOnlineIPv4; do
							iptables -A icmp_packets -p ICMP -s $IPv4 --icmp-type 8 -j LOG --log-prefix "[MySB] Ping detected: " -m comment --comment "$gsServerProvider monitoring"
							iptables -A icmp_packets -p ICMP -s $IPv4 --icmp-type 8 -j ACCEPT -m comment --comment "$gsServerProvider monitoring"
						done
					;;
					"DIGICUBE")
						sDigicubeIPv4="`cmdMySQL 'MySB_db' "SELECT ipv4 FROM providers_monitoring WHERE provider = 'DIGICUBE' AND ipv4 !='';"`"
						for IPv4 in $sDigicubeIPv4; do
							iptables -A icmp_packets -p ICMP -s $IPv4 --icmp-type 8 -j LOG --log-prefix "[MySB] Ping detected: " -m comment --comment "$gsServerProvider monitoring"
							iptables -A icmp_packets -p ICMP -s $IPv4 --icmp-type 8 -j ACCEPT -m comment --comment "$gsServerProvider monitoring"
						done
					;;
				esac
			fi
		;;
	esac

	#### Allow ICMP for all users
	case "$1" in
		"create")
			for ip in $AllUsersIPs; do
				iptables -A icmp_packets -p ICMP -s $ip --icmp-type 8 -j LOG --log-prefix "[MySB] Ping detected: " -m comment --comment "Allow ICMP for users"
				iptables -A icmp_packets -p ICMP -s $ip --icmp-type 8 -j ACCEPT -m comment --comment "Allow ICMP for users"
			done
		;;
		"refresh")
			nNumLine=$(cat $MySB_InstallDir/temp/current-iptables-rules | grep 'Allow ICMP for users' -n -m 1 | cut -d ':' -f 1)
			sed -i '/Allow ICMP for users/d' $MySB_InstallDir/temp/current-iptables-rules
			for ip in $AllUsersIPs; do
				# ICMP
				sed -i ""$nNumLine"i\-A icmp_packets -s $ip -p icmp -m icmp --icmp-type 8 -m comment --comment \"Allow ICMP for users\" -j LOG --log-prefix \"[MySB] Ping detected:\"" $MySB_InstallDir/temp/current-iptables-rules
				(( nNumLine++ ))
				sed -i ""$nNumLine"i\-A icmp_packets -s $ip -p icmp -m icmp --icmp-type 8 -m comment --comment \"Allow ICMP for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				(( nNumLine++ ))
			done
		;;
	esac

	#### Allow ICMP over VPN tunneling
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
				iptables -A icmp_packets -p ICMP -s 0/0 -i tun+ --icmp-type 8 -j LOG --log-prefix "[MySB] Ping detected: " -m comment --comment "Allow ICMP over OpenVPN"
				iptables -A icmp_packets -p ICMP -s 0/0 -i tun+ --icmp-type 8 -j ACCEPT -m comment --comment "Allow ICMP over OpenVPN"
				iptables -A icmp_packets -p ICMP -s 0/0 -i br0 --icmp-type 8 -j LOG --log-prefix "[MySB] Ping detected: " -m comment --comment "Allow ICMP over OpenVPN"
				iptables -A icmp_packets -p ICMP -s 0/0 -i br0 --icmp-type 8 -j ACCEPT -m comment --comment "Allow ICMP over OpenVPN"
			fi
		;;
	esac

	#### By default, however, drop pings without logging. Blaster and other worms have infected systems blasting pings.
	case "$1" in
		"create")
			# Comment the line below if you want pings logged, but it will likely fill your logs.
			iptables -A icmp_packets -p ICMP -s 0/0 --icmp-type 8 -j LOG --log-prefix "[MySB] Ping blocked: "
			iptables -A icmp_packets -p ICMP -s 0/0 --icmp-type 8 -j DROP
			# Time Exceeded
			iptables -A icmp_packets -p ICMP -s 0/0 --icmp-type 11 -j LOG --log-prefix "[MySB] Time Exceeded: "
			iptables -A icmp_packets -p ICMP -s 0/0 --icmp-type 11 -j ACCEPT
			# Not matched, so return so it will be logged
			iptables -A icmp_packets -p ICMP -j RETURN
		;;
	esac
}

#### Populate UDP inbound chain
gfnPopulatingUdpInboundChain() {
	local nNumLine sOvhIpRtm

	# udp_inbound chain
	# This chain describes the inbound UDP packets it will accept.
	# It's applied to INPUT on the external or Internet interface.
	# Note that the stateful settings allow replies.
	# These rules are for new requests.
	# It drops netbios packets (windows) immediately without logging.

	# Drop netbios calls.
	# Please note that these rules do not really change the way the firewall treats netbios connections.
	# Connections from the localhost and internal interface (if one exists) are accepted by default.
	# Responses from the Internet to requests initiated by or through the firewall are also accepted by default.
	# To get here, the packets would have to be part of a new request received by the Internet interface.
	# You would have to manually add rules to accept these.
	# I added these rules because some network connections, such as those via cable modems, tend to be filled with noise from unprotected Windows machines.
	# These rules drop those packets quickly and without logging them.
	# This prevents them from traversing the whole chain and keeps the log from getting cluttered with chatter from Windows systems.
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 137 -j ACCEPT -m comment --comment "Samba over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 138 -j ACCEPT -m comment --comment "Samba over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 137 -j ACCEPT -m comment --comment "Samba over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 138 -j ACCEPT -m comment --comment "Samba over OpenVPN"
			fi
			iptables -A udp_inbound -p UDP -s 0/0 -i $gsPrimaryInet --destination-port 137 -j DROP
		;;
	esac

	# Network Time Protocol (NTP) Server
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 123 -j ACCEPT -m comment --comment "NTP over OpenVPN"
				iptables -A icmp_packets -p UDP -s 0/0 -i tun+ --destination-port 123 -j LOG --log-prefix "[MySB] NTP request: " -m comment --comment "NTP over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 123 -j ACCEPT -m comment --comment "NTP over OpenVPN"
				iptables -A icmp_packets -p UDP -s 0/0 -i br0 --destination-port 123 -j LOG --log-prefix "[MySB] NTP request: " -m comment --comment "NTP over OpenVPN"
			fi
			for IPv4 in $AllUsersIPs; do
				iptables -A icmp_packets -p UDP -s $IPv4 --destination-port 123 -j LOG --log-prefix "[MySB] NTP request: " -m comment --comment "NTP for users"
				iptables -A udp_inbound -p UDP -s $IPv4 --destination-port 123 -j ACCEPT -m comment --comment "NTP for users"
			done
		;;
		"refresh")
			nNumLine=$(cat $MySB_InstallDir/temp/current-iptables-rules | grep 'NTP for users' -n -m 1 | cut -d ':' -f 1)
			sed -i '/NTP for users/d' $MySB_InstallDir/temp/current-iptables-rules
			for ip in $AllUsersIPs; do
				sed -i ""$nNumLine"i\-A udp_inbound -s $ip -p udp -m udp --dport 123 -m comment --comment \"NTP for users\" -j LOG --log-prefix \"[MySB] NTP request:\"" $MySB_InstallDir/temp/current-iptables-rules
				(( nNumLine++ ))
				sed -i ""$nNumLine"i\-A udp_inbound -s $ip -p udp -m udp --dport 123 -m comment --comment \"NTP for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				(( nNumLine++ ))
			done
		;;
	esac

	# Provider monitoring
	case "$1" in
		"create")
			if [ ! -z "$gsServerProvider" ] && [ "$gsServerProvider" != "NONE" ]; then
				case "$gsServerProvider" in
					"OVH")
						sOvhIpRtm="`echo $gsSrvIpAddress | sed "s/$(echo $gsSrvIpAddress | cut -d '.' -f 4)/251/g;"`"
						if [ ! -z "$sOvhIpRtm" ]; then
							iptables -A udp_inbound -p UDP -s $sOvhIpRtm --destination-port 6100:6200 -j ACCEPT -m comment --comment "$gsServerProvider monitoring"
						fi
					;;
				esac
			fi
		;;
	esac

	# DNS Server
	# Configure the server to use port 53 as the source port for requests.
	# Note, if you run a caching-only name server that only accepts queries from the private network or localhost, you can comment out this line.
	#iptables -A udp_inbound -p UDP -s 0/0 --destination-port 53 -j ACCEPT

	# If you don't query-source the server to port 53 and you have problems, uncomment this rule.
	# It specifically allows responses to queries initiated to another server from a high UDP port.
	# The stateful connection rules should handle this situation, though.
	#iptables -A udp_inbound -p UDP -s 0/0 --source-port 53 -j ACCEPT

	# Network File System (NFS) Server
	# Please note that additional services must be configured in order to support an NFS Server through the firewall.
	# Read the help in the generator or this site:
	# http://www.lowth.com/LinWiz/nfs_help.html
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
				# NFS Server - portmapper
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 111 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 111 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				# NFS Server - statd
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 9400 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 9400 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				# NFS Server - NFS daemon
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 2049 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 2049 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				# NFS Server - lockd
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 9401 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 9401 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				# NFS Server - mountd
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 9402 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 9402 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				# NFS Server - quotad
				iptables -A udp_inbound -p UDP -s 0/0 -i tun+ --destination-port 9403 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
				iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port 9403 -j ACCEPT -m comment --comment "NFS UDP over OpenVPN"
			fi
		;;
	esac

	#### OpenVPN
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ] && [ "$gsOpenVPN_Proto" == "udp" ]; then
				iptables -A udp_inbound -p UDP -s 0/0 -i $gsPrimaryInet --destination-port $gsPort_OpenVPN_WithGW -j ACCEPT -m comment --comment "OpenVPN with GW for users"
				iptables -A udp_inbound -p UDP -s 0/0 -i $gsPrimaryInet --destination-port $gsPort_OpenVPN_WithoutGW -j ACCEPT -m comment --comment "OpenVPN without GW for users"
				iptables -A udp_inbound -p UDP -s 0/0 -i $gsPrimaryInet --destination-port $gsPort_OpenVPN_TAP_WithoutGW -j ACCEPT -m comment --comment "OpenVPN bridged without GW for users"
			fi
		;;
		"refresh")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ] && [ "$gsOpenVPN_Proto" == "udp" ]; then
				nNumLine=$(cat $MySB_InstallDir/temp/current-iptables-rules | grep 'OpenVPN with GW for users' -n -m 1 | cut -d ':' -f 1)
				sed -i '/OpenVPN with GW for users/d' $MySB_InstallDir/temp/current-iptables-rules
				sed -i '/OpenVPN without GW for users/d' $MySB_InstallDir/temp/current-iptables-rules
				sed -i '/OpenVPN bridged without GW for users/d' $MySB_InstallDir/temp/current-iptables-rules
				sed -i ""$nNumLine"i\-A udp_inbound -s 0/0 -p udp -m udp --dport $gsPort_OpenVPN_TAP_WithoutGW -m comment --comment \"OpenVPN bridged without GW for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				sed -i ""$nNumLine"i\-A udp_inbound -s 0/0 -p udp -m udp --dport $gsPort_OpenVPN_WithoutGW -m comment --comment \"OpenVPN without GW for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				sed -i ""$nNumLine"i\-A udp_inbound -s 0/0 -p udp -m udp --dport $gsPort_OpenVPN_WithGW -m comment --comment \"OpenVPN with GW for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
			fi
		;;
	esac

	#### PlexMedia Server
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ] && [ "$gbIsInstalled_PlexMedia" == "YES" ]; then
				for PlexUdpPort in $gsPorts_UDP_PlexMedia; do
					iptables -A udp_inbound -p UDP -s 0/0 -i br0 --destination-port $PlexUdpPort -j ACCEPT -m comment --comment "Plex Media Server UDP over OpenVPN"
				done
			fi
		;;
	esac

	# Not matched, so return for logging
	case "$1" in
		"create")
			iptables -A udp_inbound -p UDP -j LOG --log-prefix "[MySB] UDP IN: "
			iptables -A udp_inbound -p UDP -j RETURN
		;;
	esac
}

#### Populate UDP outbound chain
gfnPopulatingUdpOutboundChain() {
	## udp_outbound chain
	# This chain is used with a private network to prevent forwarding for UDP requests on specific protocols.
	# Applied to the FORWARD rule from the internal network.
	# Ends with an ACCEPT

	# No match, so ACCEPT
	iptables -A udp_outbound -p UDP -s 0/0 -j LOG --log-prefix "[MySB] UDP OUT: "
	iptables -A udp_outbound -p UDP -s 0/0 -j ACCEPT
}

#### Populate TCP inbound chain
gfnPopulatingTcpInboundChain() {
	local sValues rTorrentPortStart rTorrentPortEnd

	## tcp_inbound chain
	# This chain is used to allow inbound connections to the system/gateway.
	# Use with care.  It defaults to none.
	# It's applied on INPUT from the external or Internet interface.

	# DNS Server - Allow TCP connections (zone transfers and large requests)
	# This is disabled by default.  DNS Zone transfers occur via TCP.
	# If you need to allow transfers over the net you need to uncomment this line.
	# If you allow queries from the 'net, you also need to be aware that although
	# DNS queries use UDP by default, a truncated UDP query can legally be submitted via TCP instead.
	# You probably will never need it, but should be aware of the fact.
	# case "$1" in
		# "create")
			# iptables -A tcp_inbound -p TCP -s 0/0 --destination-port 53 -j ACCEPT
		# ;;
	# esac

	case "$1" in
		"create")
			# HTTP
			#iptables -A tcp_inbound -p TCP -s 0/0 --destination-port $gsPort_HTTP -j ACCEPT -m comment --comment "HTTP"

			# HTTPS (Secure Web Server)
			iptables -A tcp_inbound -p TCP -s 0/0 --destination-port $gsPort_HTTPS -j ACCEPT -m comment --comment "NginX HTTPs"

			for ip in $AllUsersIPs; do
				# SSHd
				iptables -A tcp_inbound -p TCP -s $ip --destination-port $gsPort_SSH -j ACCEPT -m comment --comment "SSH and SFTP for users"

				# FTP Server (Control)
				iptables -A tcp_inbound -p TCP -s $ip --destination-port $gsPort_FTP -j ACCEPT -m comment --comment "FTP for users"

				# FTP Client (Data Port for non-PASV transfers)
				iptables -A tcp_inbound -p TCP -s $ip --source-port $gsPort_FTP_Data -j ACCEPT -m comment --comment "FTP Data for users"

				# Passive FTP
				iptables -A tcp_inbound -p TCP -s $ip --destination-port $gsPort_FTP_Passive -j ACCEPT -m comment --comment "FTP Passive for users"
			done
		;;
		"refresh")
			sed -i '/SSH and SFTP for users/d' $MySB_InstallDir/temp/current-iptables-rules
			sed -i '/FTP for users/d' $MySB_InstallDir/temp/current-iptables-rules
			sed -i '/FTP Data for users/d' $MySB_InstallDir/temp/current-iptables-rules
			sed -i '/FTP Passive for users/d' $MySB_InstallDir/temp/current-iptables-rules
			nNumLine=$(cat $MySB_InstallDir/temp/current-iptables-rules | grep 'comment --comment "NginX HTTPs" -j ACCEPT' -n -m 1 | cut -d ':' -f 1)
			for ip in $AllUsersIPs; do
				# SSHd
				(( nNumLine++ ))
				sed -i ""$nNumLine"i\-A tcp_inbound -s $ip -p tcp -m tcp --dport $gsPort_SSH -m comment --comment \"SSH and SFTP for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				# FTP Server (Control)
				(( nNumLine++ ))
				sed -i ""$nNumLine"i\-A tcp_inbound -s $ip -p tcp -m tcp --dport $gsPort_FTP -m comment --comment \"FTP for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				# FTP Client (Data Port for non-PASV transfers)
				(( nNumLine++ ))
				sed -i ""$nNumLine"i\-A tcp_inbound -s $ip -p tcp -m tcp --sport $gsPort_FTP_Data -m comment --comment \"FTP Data for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				# Passive FTP
				(( nNumLine++ ))
				sed -i ""$nNumLine"i\-A tcp_inbound -s $ip -p tcp -m tcp --dport $gsPort_FTP_Passive -m comment --comment \"FTP Passive for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
			done
		;;
	esac

	#### OpenVPN
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
				if [ "$gsOpenVPN_Proto" == "tcp" ]; then
					iptables -A tcp_inbound -p TCP -s 0/0 -i $gsPrimaryInet --destination-port $gsPort_OpenVPN_WithGW -j ACCEPT -m comment --comment "OpenVPN with GW for users"
					iptables -A tcp_inbound -p TCP -s 0/0 -i $gsPrimaryInet --destination-port $gsPort_OpenVPN_WithoutGW -j ACCEPT -m comment --comment "OpenVPN without GW for users"
					iptables -A tcp_inbound -p TCP -s 0/0 -i $gsPrimaryInet --destination-port $gsPort_OpenVPN_TAP_WithoutGW -j ACCEPT -m comment --comment "OpenVPN bridged without GW for users"
				fi

				# SSHd
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port $gsPort_SSH -j ACCEPT -m comment --comment "SSH and SFTP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port $gsPort_SSH -j ACCEPT -m comment --comment "SSH and SFTP over OpenVPN"

				# FTP Server (Control)
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port $gsPort_FTP -j ACCEPT -m comment --comment "FTP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port $gsPort_FTP -j ACCEPT -m comment --comment "FTP over OpenVPN"

				# FTP Client (Data Port for non-PASV transfers)
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --source-port $gsPort_FTP_Data -j ACCEPT -m comment --comment "FTP Data over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --source-port $gsPort_FTP_Data -j ACCEPT -m comment --comment "FTP Data over OpenVPN"

				# Passive FTP
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port $gsPort_FTP_Passive -j ACCEPT -m comment --comment "FTP Passive over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port $gsPort_FTP_Passive -j ACCEPT -m comment --comment "FTP Passive over OpenVPN"
			fi
		;;
		"refresh")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ] && [ "$gsOpenVPN_Proto" == "tcp" ]; then
				nNumLine=$(cat $MySB_InstallDir/temp/current-iptables-rules | grep 'OpenVPN with GW for users' -n -m 1 | cut -d ':' -f 1)
				sed -i '/OpenVPN with GW for users/d' $MySB_InstallDir/temp/current-iptables-rules
				sed -i '/OpenVPN without GW for users/d' $MySB_InstallDir/temp/current-iptables-rules
				sed -i '/OpenVPN bridged without GW for users/d' $MySB_InstallDir/temp/current-iptables-rules
				sed -i ""$nNumLine"i\-A tcp_inbound -s 0/0 -p tcp -m tcp --dport $gsPort_OpenVPN_TAP_WithoutGW -m comment --comment \"OpenVPN bridged without GW for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				sed -i ""$nNumLine"i\-A tcp_inbound -s 0/0 -p tcp -m tcp --dport $gsPort_OpenVPN_WithoutGW -m comment --comment \"OpenVPN without GW for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				sed -i ""$nNumLine"i\-A tcp_inbound -s 0/0 -p tcp -m tcp --dport $gsPort_OpenVPN_WithGW -m comment --comment \"OpenVPN with GW for users\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
			fi
		;;
	esac

	#### Webmin
	case "$1" in
		"create")
			if [ "$gbIsInstalled_Webmin" == "YES" ]; then
				for ip in $gsMainUserIPs; do
					iptables -A tcp_inbound -p TCP -s $ip --destination-port $gsPorts_Webmin -j ACCEPT -m comment --comment "Webmin for main user"
				done
				if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
					iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port $gsPorts_Webmin -j ACCEPT -m comment --comment "Webmin over OpenVPN"
					iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port $gsPorts_Webmin -j ACCEPT -m comment --comment "Webmin over OpenVPN"
				fi
			fi
		;;
		"refresh")
			if [ "$gbIsInstalled_Webmin" == "YES" ]; then
				nNumLine=$(cat $MySB_InstallDir/temp/current-iptables-rules | grep 'Webmin for main user' -n -m 1 | cut -d ':' -f 1)
				sed -i '/Webmin for main user/d' $MySB_InstallDir/temp/current-iptables-rules
				for ip in $gsMainUserIPs; do
					sed -i ""$nNumLine"i\-A tcp_inbound -s $ip -p tcp -m tcp --dport $gsPorts_Webmin -m comment --comment \"Webmin for main user\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
					(( nNumLine++ ))
				done
			fi
		;;
	esac

	#### PlexMedia Server
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ] && [ "$gbIsInstalled_PlexMedia" == "YES" ]; then
				iptables -A tcp_inbound -p TCP -s 0/0 -i $gsPrimaryInet --destination-port $gsPorts_PlexMedia -j ACCEPT -m comment --comment "Plex Media Server"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port $gsPorts_PlexMedia -j ACCEPT -m comment --comment "Plex Media Server"
				for PlexTcpPort in $gsPorts_TCP_PlexMedia; do
					iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port $PlexTcpPort -j ACCEPT -m comment --comment "Plex Media Server TCP"
				done
			fi
		;;
	esac

	#### rTorrent
	case "$1" in
		"create")
			for SeedboxUser in $gsUsersList; do
				sValues="`cmdMySQL 'MySB_db' "SELECT scgi_port,rtorrent_port FROM users WHERE users_ident='$SeedboxUser';" | sed 's/\t/|/g;'`"
				rTorrentPortStart="`echo $sValues | awk '{split($0,a,"|"); print a[1]}'`"
				rTorrentPortEnd="`echo $sValues | awk '{split($0,a,"|"); print a[2]}'`"
				iptables -A tcp_inbound -p TCP -s 0/0 --destination-port $rTorrentPortStart:$rTorrentPortEnd -j LOG --log-prefix "[MySB] rTorrent TCP IN: "
				iptables -A tcp_inbound -p TCP -s 0/0 --destination-port $rTorrentPortStart:$rTorrentPortEnd -j ACCEPT -m comment --comment "rTorrent for users"
			done
		;;
	esac

	#### Network File System (NFS) Server
	# Please note that additional services must be configured in order to support an NFS Server through the firewall.
	# Read the help in the generator or this site:
	# http://www.lowth.com/LinWiz/nfs_help.html
	case "$1" in
		"create")
			if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
				# NFS Server - portmapper
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port 111 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port 111 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				# NFS Server - statd
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port 9400 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port 9400 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				# NFS Server - NFS daemon
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port 2049 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port 2049 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				# NFS Server - lockd
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port 9401 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port 9401 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				# NFS Server - mountd
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port 9402 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port 9402 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				# NFS Server - quotad
				iptables -A tcp_inbound -p TCP -s 0/0 -i tun+ --destination-port 9403 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
				iptables -A tcp_inbound -p TCP -s 0/0 -i br0 --destination-port 9403 -j ACCEPT -m comment --comment "NFS TCP over OpenVPN"
			fi
		;;
	esac

	#### Let's Encrypt
	case "$1" in
		"letsencrypt")
			nNumLine=$(cat $MySB_InstallDir/temp/current-iptables-rules | grep '\[MySB\] TCP IN:' -n -m 1 | cut -d ':' -f 1)
			for ip in $LetsEncryptIPs; do
				sed -i ""$nNumLine"i\-A tcp_inbound -s $ip -i $gsPrimaryInet -p tcp -m tcp --dport 443 -m comment --comment \"Lets Encrypt HTTPs\" -j ACCEPT" $MySB_InstallDir/temp/current-iptables-rules
				(( nNumLine++ ))
			done
		;;
	esac

	#### Not matched, so return so it will be logged
	case "$1" in
		"create")
			iptables -A tcp_inbound -p TCP -j LOG --log-prefix "[MySB] TCP IN: "
			iptables -A tcp_inbound -p TCP -j RETURN
		;;
	esac
}

#### Populate TCP outbound chain
gfnPopulatingTcpOutboundChain() {
	## tcp_outbound chain
	# This chain is used with a private network to prevent forwarding for requests on specific protocols.
	# Applied to the FORWARD rule from the internal network.
	# Ends with an ACCEPT

	# No match, so ACCEPT
	iptables -A tcp_outbound -p TCP -s 0/0 -j LOG --log-prefix "[MySB] TCP OUT: "
	iptables -A tcp_outbound -p TCP -s 0/0 -j ACCEPT
}

#### Process INPUT Chain
gfnProcessInputChain() {
	# Allow all on localhost interface
	iptables -A INPUT -p ALL -i lo -j ACCEPT

	# Drop bad packets
	iptables -A INPUT -p ALL -j bad_packets

	# DOCSIS compliant cable modems
	# Some DOCSIS compliant cable modems send IGMP multicasts to find connected PCs.
	# The multicast packets have the destination address 224.0.0.1.  You can accept them.
	# If you choose to do so, uncomment the rule to ACCEPT them and comment the rule to DROP them.
	# The firewall will drop them here by default to avoid cluttering the log.
	# The firewall will drop all multicasts to the entire subnet (224.0.0.1) by default.
	# To only affect IGMP multicasts, change '-p ALL' to '-p 2'.
	# Of course, if they aren't accepted elsewhere, it will only ensure that multicasts on other protocols are logged.
	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		# The rule to accept the packets.
		iptables -A INPUT -p ALL -d 224.0.0.1 -j ACCEPT
	else
		# Drop them without logging.
		iptables -A INPUT -p ALL -d 224.0.0.1 -j DROP
	fi

	# Rules for the private network (accessing gateway system itself)
	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		iptables -A INPUT -p ALL -i tun0 -s 10.0.0.0/24 -j ACCEPT
		iptables -A INPUT -p ALL -i tun0 -d 10.0.0.255 -j ACCEPT
		iptables -A INPUT -p ALL -i tun1 -s 10.0.1.0/24 -j ACCEPT
		iptables -A INPUT -p ALL -i tun1 -d 10.0.1.255 -j ACCEPT
		iptables -A INPUT -p ALL -i br0 -s 10.0.2.0/24 -j ACCEPT
		iptables -A INPUT -p ALL -i br0 -d 10.0.2.255 -j ACCEPT
	fi

	## Inbound Internet Packet Rules
	# Accept Established Connections
	iptables -A INPUT -p ALL -i $gsPrimaryInet -m state --state ESTABLISHED,RELATED -j ACCEPT

	# Route the rest to the appropriate user chain
	iptables -A INPUT -p TCP -i $gsPrimaryInet -j tcp_inbound
	iptables -A INPUT -p UDP -i $gsPrimaryInet -j udp_inbound
	iptables -A INPUT -p ICMP -i $gsPrimaryInet -j icmp_packets

	# Drop without logging broadcasts that get this far.
	# Cuts down on log clutter.
	# Comment this line if testing new rules that impact broadcast protocols.
	iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP

	# Log packets that still don't match
	iptables -A INPUT -j LOG --log-prefix "[MySB] INPUT packet died: "
}

# Process FORWARD Chain
gfnProcessForwardChain() {
	## Used if forwarding for a private network
	# Drop bad packets
	iptables -A FORWARD -p ALL -j bad_packets

	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		# Accept TCP packets we want to forward from internal sources
		iptables -A FORWARD -p TCP -i tun0 -j tcp_outbound
		iptables -A FORWARD -p TCP -i br0 -j tcp_outbound

		# Accept UDP packets we want to forward from internal sources
		iptables -A FORWARD -p UDP -i tun0 -j udp_outbound
		iptables -A FORWARD -p UDP -i br0 -j udp_outbound

		# If not blocked, accept any other packets from the internal interface
		iptables -A FORWARD -p ALL -i tun0 -j ACCEPT
		iptables -A FORWARD -p ALL -i br0 -j ACCEPT

		iptables -A FORWARD -i tun0 -o $gsPrimaryInet -s 10.0.0.0/24 -m conntrack --ctstate NEW -j ACCEPT -m comment --comment "OpenVPN with redirect GW"
		iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT -m comment --comment "OpenVPN with redirect GW"
	fi

	# Deal with responses from the internet
	iptables -A FORWARD -i $gsPrimaryInet -m state --state ESTABLISHED,RELATED -j ACCEPT

	# Log packets that still don't match
	iptables -A FORWARD -j LOG --log-prefix "[MySB] FORWARD packet died: "
}

# Process OUTPUT Chain
gfnProcessOutputChain() {
	## Generally trust the firewall on output
	# However, invalid icmp packets need to be dropped to prevent a possible exploit.
	iptables -A OUTPUT -m state -p icmp --state INVALID -j DROP

	# Localhost
	iptables -A OUTPUT -p ALL -s 127.0.0.1 -j ACCEPT
	iptables -A OUTPUT -p ALL -o lo -j ACCEPT

	# To internal network
	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		iptables -A OUTPUT -p ALL -s 10.0.0.1 -j ACCEPT
		iptables -A OUTPUT -p ALL -o tun0 -j ACCEPT
		iptables -A OUTPUT -p ALL -s 10.0.1.1 -j ACCEPT
		iptables -A OUTPUT -p ALL -o tun1 -j ACCEPT
		iptables -A OUTPUT -p ALL -s 10.0.2.1 -j ACCEPT
		iptables -A OUTPUT -p ALL -o br0 -j ACCEPT
	fi

	# To internet
	iptables -A OUTPUT -p ALL -o $gsPrimaryInet -j ACCEPT

	# Log packets that still don't match
	iptables -A OUTPUT -j LOG --log-prefix "[MySB] OUTPUT packet died: "
}

#### Process POSTROUTING chain
gfnProcessPostroutingChain() {
	iptables -t nat -A POSTROUTING -o $gsPrimaryInet -j SNAT --to-source $gsSrvIpAddress

	if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
		iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o $gsPrimaryInet -j MASQUERADE -m comment --comment "OpenVPN with redirect GW"
	fi
}

##################### LAST LINE ######################################