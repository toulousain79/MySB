# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
funcs_Install=1
##################### FIRST LINE #####################################

#### Logrotate
LogRotate() {
	if [ ! -z "$1" ] && [ -f $MySB_InstallDir/templates/logrotate/etc.logrotate.d.$1.tmpl ]; then
		cp -vf $MySB_InstallDir/templates/logrotate/etc.logrotate.d.$1.tmpl /etc/logrotate.d/$1
		perl -pi -e "s/<MySB_InstallDir>/$MySB_InstallDirEscaped/g" /etc/logrotate.d/$1
		chmod 0644 /etc/logrotate.d/$1
		logrotate -f /etc/logrotate.d/$1
	fi
}

#### Check if a package is installed
CheckPackage() {
	Result="`dpkg --status $1 2> /dev/null | grep 'Status' | cut -d ':' -f 2 | sed -e 's/^ //g;'`"
	
	if [ "$Result" == "install ok installed" ]; then
		return 0
	else
		return 1
	fi
}

#### apt-get OR aptitude
PackagesManage() {
	Query=$1
	PackageList=$2

	if CheckCommand 0 aptitude; then
		AptCommand="aptitude -q"
	else
		AptCommand="apt-get"
	fi

	GlobalArgs="-y --assume-yes"
	RETURN=0
	AptUpdate=0
	tDiff=0

	if [ "$IsReady_MySB_DB" == "YES" ]; then
		AptUpdate="`Func_SQL_Command 'SELECT' 'MySB_db' 'apt_update' 'system' '1'`"
		AptDate="`Func_SQL_Command 'SELECT' 'MySB_db' 'apt_date' 'system' '1'`"
		AptDate=$(date -d "$AptDate" +"%Y-%m-%d %H")
		Now=$(date +%Y-%m-%d\ %H)
		t1=$(date --date="$AptDate" +'%-H')
		t2=$(date --date="$Now" +'%-H')
		let "tDiff=$t2-$t1"
	fi

	#### Check last update
	if [ "$Query" != "test" ]; then
		if CheckCommand 0 apt-mirror && [ -f $MySB_InstallDir/files/apt_mirrors/var/postmirror.sh ]; then
			apt-mirror $MySB_InstallDir/files/apt_mirrors/mirror.list
		fi
		if [ "$IsReady_MySB_DB" == "YES" ]; then
			#### Need of 'apt-get update' ? (must be greater than 2 hours OR forced)
			if [ "$AptUpdate" == "1" ] || [ "$tDiff" -gt "2" ] || [ "$Query" == "upgrade" ]; then
				echo "$AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update
				if [ $? -eq 0 ]; then
					Func_SQL_Command 'UPDATE' 'MySB_db' 'system' "apt_update = 0, apt_date = 'NOW'" 'id_system = 1'
				fi
			fi
		else
			echo "$AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update"
			export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update
		fi
	fi

	case "$Query" in
		"install")
			FinalList=""
			for Package in $PackageList; do
				if ! CheckPackage $Package; then
					FinalList="${FinalList} $Package"
				fi
			done
			FinalList="`echo $FinalList | sed -e 's/^ //g;'`"

			if [ ! -z "$FinalList" ]; then
				echo "$AptCommand $GlobalArgs install $FinalList"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -V install $FinalList
			fi
		;;
		'upgrade')
			if [ "`$AptCommand --help | grep safe-upgrade | awk '{ print $1 }'`" == "safe-upgrade" ]; then
				echo "$AptCommand $GlobalArgs -V -o Dpkg::Options::="--force-confold" safe-upgrade"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -V -o Dpkg::Options::="--force-confold" safe-upgrade
			else
				echo "$AptCommand $GlobalArgs -V -o Dpkg::Options::="--force-confold" upgrade"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -V -o Dpkg::Options::="--force-confold" upgrade
			fi
		;;
		'purge')
			FinalList=""
			for Package in $PackageList; do
				if CheckPackage $Package; then
					FinalList="${FinalList} $Package"
				fi
			done
			FinalList="`echo $FinalList | sed -e 's/^ //g;'`"

			if [ ! -z "$FinalList" ]; then
				echo "$AptCommand $GlobalArgs purge $FinalList"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs purge $FinalList
			fi
		;;
		'test')
			$AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update > $MySB_InstallDir/temp/netselect-apt
			case "$AptCommand" in
				"aptitude -q")
					Erreur="$Funcs_PackagesManage_Aptitude_0"
					Ignore="$Funcs_PackagesManage_Aptitude_1"
				;;
				"apt-get")
					Erreur="$Funcs_PackagesManage_AptGet_0"
					Ignore="$Funcs_PackagesManage_AptGet_1"
				;;
			esac

			if [ -f $MySB_InstallDir/temp/netselect-apt ]; then
				MirrorsError="`cat $MySB_InstallDir/temp/netselect-apt | grep "^$Erreur" | awk '{ print $2 }'`"
				for Mirror in $MirrorsError; do
					sed -i '/'$Mirror'/d' $MySB_InstallDir/files/fastest_mirrors
				done
				MirrorsError="`cat $MySB_InstallDir/temp/netselect-apt | grep "^$Ignore" | awk '{ print $2 }'`"
				for Mirror in $MirrorsError; do
					sed -i '/'$Mirror'/d' $MySB_InstallDir/files/fastest_mirrors
				done
			fi
		;;
	esac

	RETURN=$?

	if [ "$Query" != "test" ]; then
		if [ "$IsReady_MySB_DB" == "YES" ]; then
			#### Need of cleaning ? (must be greater than 2 hours OR forced)
			if [ "$AptUpdate" == "1" ] || [ "$tDiff" -gt "2" ]; then
				if [ $RETURN -eq 0 ]; then
					if [ "`$AptCommand --help | grep autoremove | awk '{ print $1 }'`" == "autoremove" ]; then
						echo "$AptCommand $GlobalArgs autoremove"
						$AptCommand $GlobalArgs autoremove
					elif [ "`$AptCommand --help | grep autoclean | awk '{ print $1 }'`" == "autoclean" ]; then
						echo "$AptCommand $GlobalArgs autoclean"
						$AptCommand $GlobalArgs autoclean
					fi

					echo "$AptCommand $GlobalArgs install"
					$AptCommand $GlobalArgs install
				fi
			fi
		fi
	fi

	return $RETURN
}

#### ruTorrent Global config
ruTorrentGlobalConfigs() {
	LISTING=$(ls -1r $RutorrentPluginsDir/)

	if [ -f $RutorrentDir/conf/config.php ]; then
		# Alter 'config.php' for general use
		perl -pi -e "s/$topDirectory = '\/';/$topDirectory = '\/home';/g" $RutorrentDir/conf/config.php
		sed -i "/\"php\"/s/'',/'\/usr\/bin\/php',/g" $RutorrentDir/conf/config.php
		sed -i "/\"curl\"/s/'',/'\/usr\/bin\/curl',/g" $RutorrentDir/conf/config.php
		sed -i "/\"gzip\"/s/'',/'\/bin\/gzip',/g" $RutorrentDir/conf/config.php
		sed -i "/\"id\"/s/'',/'\/usr\/bin\/id',/g" $RutorrentDir/conf/config.php
		sed -i "/\"stat\"/s/'',/'\/usr\/bin\/stat',/g" $RutorrentDir/conf/config.php
	fi

	for Plugin in $LISTING; do
		case "$Plugin" in
			'cpuload')
				if [ -f $RutorrentPluginsDir/cpuload/conf.php ]; then
					perl -pi -e "s/$processorsCount = null;/$processorsCount = $PROCESSOR;/g" $RutorrentPluginsDir/cpuload/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'create')
				if [ -f $RutorrentPluginsDir/create/conf.php ]; then
					perl -pi -e "s/$useExternal = false;/$useExternal = 'buildtorrent';/g" $RutorrentPluginsDir/create/conf.php
					sed -i "/pathToCreatetorrent/s/'';/'\/usr\/bin\/buildtorrent';/g" $RutorrentPluginsDir/create/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'diskspace')
				if [ -f $RutorrentPluginsDir/diskspace/conf.php ]; then
					perl -pi -e "s/$notifySpaceLimit = 512;/$notifySpaceLimit = 4096;/g" $RutorrentPluginsDir/diskspace/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'filemanager')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin FileManager'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/filemanager/conf.php ]; then
						sed -i "/'rar'/s/'';/'\/usr\/bin\/rar';/g" $RutorrentPluginsDir/filemanager/conf.php
						sed -i "/'zip'/s/'';/'\/usr\/bin\/zip';/g" $RutorrentPluginsDir/filemanager/conf.php
						sed -i "/'unzip'/s/'';/'\/usr\/bin\/unzip';/g" $RutorrentPluginsDir/filemanager/conf.php
						sed -i "/'tar'/s/'';/'\/bin\/tar';/g" $RutorrentPluginsDir/filemanager/conf.php
						if [ "`cat $RutorrentPluginsDir/filemanager/conf.php | grep "$pathToExternals\['bzip2'\]"`" == "" ]; then
							NumLign=$(sed -n "/'\/bin\/tar'/=" $RutorrentPluginsDir/filemanager/conf.php)
							(( NumLign++ ))
							sed -i "${NumLign}i\$pathToExternals['bzip2'] = '\/bin\/bzip2';" $RutorrentPluginsDir/filemanager/conf.php
						fi
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/filemanager"
				fi
				unset IsActive
			;;
			'fileshare')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin FileShare'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/fileshare/conf.php ]; then
						sed -i "/'duration'/s/1;/0;/g" $RutorrentPluginsDir/fileshare/conf.php
						perl -pi -e "s/http:\/\/robits.org\/rutorrent\/share.php/https:\/\/$HostNameFQDN:$Port_HTTPS\/fileshare.php/g" $RutorrentPluginsDir/fileshare/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/fileshare"
				fi
				unset IsActive
			;;
			'fileupload')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin FileUpload'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/fileupload/conf.php ]; then
						PluginFileUploadUsers
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/fileupload"
					DeleteDirectory 0 "$RutorrentDir/conf/users/*/fileupload"
				fi
				unset IsActive
			;;
			'geoip')
				if [ -f $RutorrentPluginsDir/geoip/conf.php ]; then
					perl -pi -e "s/$dnsResolver = '8.8.8.8';/$dnsResolver = null;/g" $RutorrentPluginsDir/geoip/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'linkcakebox')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Link Cakebox'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/linkcakebox/conf.php ]; then
						NumLign=$(sed -n "/\$url =/=" $RutorrentPluginsDir/linkcakebox/conf.php)
						sed -i '/$url =/d' $RutorrentPluginsDir/linkcakebox/conf.php
						sed -i "${NumLign}i\$url = 'https:\/\/$HostNameFQDN:$Port_HTTPS\/cb\/';" $RutorrentPluginsDir/linkcakebox/conf.php
						perl -pi -e "s/\/torrents\//\/rtorrent\//g" $RutorrentPluginsDir/linkcakebox/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/linkcakebox"
				fi
				unset IsActive
			;;
			'linkseedboxmanager')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Link Manager'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/linkseedboxmanager/conf.php ]; then
						perl -pi -e "s/http:\/\/seedbox-manager.ndd.tld/https:\/\/$HostNameFQDN:$Port_HTTPS\/sm\//g" $RutorrentPluginsDir/linkseedboxmanager/conf.php
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/linkseedboxmanager"
				fi
				unset IsActive
			;;
			'logoff')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Logoff'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/logoff/conf.php ]; then
						perl -pi -e "s/scars,user1,user2//g" $RutorrentPluginsDir/logoff/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/logoff"
				fi
				unset IsActive
			;;
			'mediainfo')
				if [ -f $RutorrentPluginsDir/mediainfo/conf.php ]; then
					sed -i "/'mediainfo'/s/'';/'\/usr\/bin\/mediainfo';/g" $RutorrentPluginsDir/mediainfo/conf.php
					perl -pi -e "s/scars,user1,user2//g" $RutorrentPluginsDir/mediainfo/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'mediastream')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin MediaStream'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/mediastream/conf.php ]; then
						perl -pi -e "s/http:\/\/mydomain.com\/stream\/view.php/https:\/\/$HostNameFQDN:$Port_HTTPS\/view.php/g" $RutorrentPluginsDir/mediastream/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/mediastream"
				fi
				unset IsActive
			;;
			'screenshots')
				if [ -f $RutorrentPluginsDir/screenshots/conf.php ]; then
					sed -i "/'ffmpeg'/s/'';/'\/usr\/bin\/ffmpeg';/g" $RutorrentPluginsDir/screenshots/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'stream')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Stream'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/stream/config.php ]; then
						NumLign=$(sed -n "/\$username =/=" $RutorrentPluginsDir/stream/config.php)
						if [ -z "$(sed -n "/\$username =/=" $RutorrentPluginsDir/stream/config.php)" ]; then
							NumLign=$(sed -n "/\$auth =/=" $RutorrentPluginsDir/stream/config.php)
							sed -i "${NumLign}i\$username = \$_SERVER['PHP_AUTH_USER'];" $RutorrentPluginsDir/stream/config.php
						fi
						NumLign=$(sed -n "/\$password =/=" $RutorrentPluginsDir/stream/config.php)
						if [ -z "$NumLign" ]; then
							NumLign=$(sed -n "/\$auth =/=" $RutorrentPluginsDir/stream/config.php)
							sed -i "${NumLign}i\$password = \$_SERVER['PHP_AUTH_PW'];" $RutorrentPluginsDir/stream/config.php
						fi
						if [ -z "` cat $RutorrentPluginsDir/stream/config.php | grep '$auth = "$username:$password";'`" ]; then
							NumLign=$(sed -n "/\$auth =/=" $RutorrentPluginsDir/stream/config.php)
							sed -i '/$auth =/d' $RutorrentPluginsDir/stream/config.php
							NumLign=$(( NumLign+2 ))
							sed -i "${NumLign}i\$auth = \"\$username:\$password\";" $RutorrentPluginsDir/stream/config.php
						fi
						perl -pi -e "s/define\('USE_NGINX', false\);/define\('USE_NGINX', true\);/g" $RutorrentPluginsDir/stream/config.php
						perl -pi -e "s/define\('SCHEME', 'http'\);/define\('SCHEME', 'https'\);/g" $RutorrentPluginsDir/stream/config.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/stream"
				fi
				unset IsActive
			;;
			'theme')
				if [ -f $RutorrentPluginsDir/stream/config.php ]; then
					perl -pi -e "s/$defaultTheme = \"\";/$defaultTheme = \"Oblivion\";/g" $RutorrentPluginsDir/theme/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'unpack')
				if [ -f $RutorrentPluginsDir/unpack/conf.php ]; then
					sed -i "/'unzip'/s/'';/'\/usr\/bin\/unzip';/g" $RutorrentPluginsDir/unpack/conf.php
					sed -i "/'unrar'/s/'';/'\/usr\/bin\/unrar';/g" $RutorrentPluginsDir/unpack/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
		esac
	done
}

#### Manage directories, files and rights
ManageDirectoriesAndFiles() {
	case "$1" in
		"global"|"user"|"no_user")
			FnMode="$1"
		;;
		*)
			FnMode="global"
		;;
	esac

	if [ -z $funcs_MySB_CreateUser ]; then
		source $MySB_InstallDir/inc/funcs_by_script/funcs_MySB_CreateUser
	fi

	#### Create missing directories
	if [ "$FnMode" == "global" ] || [ "$FnMode" == "no_user" ]; then
		# Root Directories
		if [ ! -d $MySB_InstallDir/db ]; then mkdir $MySB_InstallDir/db; fi
		if [ ! -d $MySB_InstallDir/files ]; then mkdir $MySB_InstallDir/files; fi
		if [ ! -d $MySB_InstallDir/logs/archives ]; then mkdir -p $MySB_InstallDir/logs/archives; fi
		if [ ! -d $MySB_InstallDir/sources ]; then mkdir $MySB_InstallDir/sources; fi
		if [ ! -d $MySB_InstallDir/ssl ]; then mkdir $MySB_InstallDir/ssl; fi
		if [ ! -d $MySB_InstallDir/temp ]; then mkdir $MySB_InstallDir/temp; fi
		if [ ! -d $MySB_InstallDir/web/openvpn ]; then mkdir -p $MySB_InstallDir/web/openvpn; fi
		# Log directories
		if [ ! -d $MySB_InstallDir/web/logs ]; then mkdir $MySB_InstallDir/web/logs; fi	
		if [ ! -d $MySB_InstallDir/web/logs/bin ]; then mkdir $MySB_InstallDir/web/logs/bin; fi
		if [ ! -d $MySB_InstallDir/web/logs/install ]; then mkdir $MySB_InstallDir/web/logs/install; fi
		if [ ! -d $MySB_InstallDir/web/logs/nginx ]; then mkdir $MySB_InstallDir/web/logs/nginx; fi	
		if [ ! -d $MySB_InstallDir/web/logs/scripts ]; then mkdir $MySB_InstallDir/web/logs/scripts; fi
		if [ ! -d $MySB_InstallDir/web/logs/security ]; then mkdir $MySB_InstallDir/web/logs/security; fi
		if [ ! -d $MySB_InstallDir/web/logs/upgrade ]; then mkdir $MySB_InstallDir/web/logs/upgrade; fi
		if [ ! -d $MySB_InstallDir/web/logs/system ]; then mkdir $MySB_InstallDir/web/logs/system; fi
		# Local mirrors
		if [ ! -d $MySB_InstallDir/files/apt_mirrors/mirrors ]; then mkdir -p $MySB_InstallDir/files/apt_mirrors/mirrors ; fi
		if [ ! -d $MySB_InstallDir/files/apt_mirrors/skel ]; then mkdir $MySB_InstallDir/files/apt_mirrors/skel ; fi
		if [ ! -d $MySB_InstallDir/files/apt_mirrors/var ]; then mkdir $MySB_InstallDir/files/apt_mirrors/var ; fi

		#### Convert with dos2unix
		dos2unix $MySB_InstallDir/* &> /dev/null
		dos2unix $MySB_InstallDir/bin/* &> /dev/null
		dos2unix $MySB_InstallDir/files/* &> /dev/null
		dos2unix $MySB_InstallDir/inc/* &> /dev/null
		dos2unix $MySB_InstallDir/install/* &> /dev/null
		dos2unix $MySB_InstallDir/scripts/* &> /dev/null
		dos2unix $MySB_InstallDir/templates/* &> /dev/null
		dos2unix $MySB_InstallDir/upgrade/* &> /dev/null	
		
		#### Change rights
		# $MySB_InstallDir/
		chmod -R 0700 $MySB_InstallDir
		chmod 0755 $MySB_InstallDir
		chown -R root:root $MySB_InstallDir
		# $MySB_InstallDir/db
		chmod 0770 $MySB_InstallDir/db
		chmod 0660 $MySB_InstallDir/db/* &> /dev/null
		chown -R root:www-data $MySB_InstallDir/db
		# $MySB_InstallDir/ssl
		chmod 0644 $MySB_InstallDir/ssl/*.cert &> /dev/null
		# $MySB_InstallDir/install
		chmod -R 0755 $MySB_InstallDir/install
		# $MySB_InstallDir/temp
		chown root:www-data $MySB_InstallDir/temp
		chmod 0760 $MySB_InstallDir/temp
		# $MySB_InstallDir/files/apt_mirrors
		chown apt-mirror:apt-mirror $MySB_InstallDir/files/apt_mirrors
		# $MySB_InstallDir/web
		chown -R root:www-data $MySB_InstallDir/web/*
		chmod 0755 $MySB_InstallDir/web
		chmod -R 0640 $MySB_InstallDir/web/*
		find $MySB_InstallDir/web/ -type d -not -path "*rutorrent*" -not -path "*openvpn*" -print0 | xargs -0 chmod 0750	
		
		# $MySB_InstallDir/web/openvpn
		if [ -d $MySB_InstallDir/web/openvpn ]; then chmod 0770 $MySB_InstallDir/web/openvpn; fi
		# /home/MySB_share
		chown root:MySB_users /home/MySB_share
		chmod 0770 /home/MySB_share

		# Config files
		if [ -f /etc/MySB/config ]; then
			chown root:root /etc/MySB/config
			chmod 0640 /etc/MySB/config
		fi
		if [ -f /etc/MySB/config_db ]; then
			chown root:root /etc/MySB/config_db
			chmod 0640 /etc/MySB/config_db
		fi
		if [ -f /etc/MySB/config.php ]; then
			chmod 0640 /etc/MySB/config.php
			chown root:www-data /etc/MySB/config.php
		fi

		# LoadAvg
		if [ ! -z "$LoadAvgDir" ]; then
			if [ -f $LoadAvgDir/configure ]; then chmod 0640 $LoadAvgDir/configure; fi
			if [ ! -d $LoadAvgDir/logs ] && [ -d $LoadAvgDir ]; then mkdir $LoadAvgDir/logs; fi
			if [ -d $LoadAvgDir/logs ]; then chmod 0777 $LoadAvgDir/logs; fi
		fi

		# ownCloud
		if [ ! -z "$ownCloudDir" ] && [ -d $ownCloudDir ]; then
			chmod 0750 $ownCloudDir/occ
			#chown -R root:www-data $ownCloudDir/
			chown -R www-data:www-data $ownCloudDir/apps/
			chown -R www-data:www-data $ownCloudDir/config/
			chown -R www-data:www-data $ownCloudDir/themes/
			if [ ! -d /home/owncloud ]; then mkdir -p /home/owncloud; fi
			if [ ! -f /home/owncloud/.ocdata ]; then touch /home/owncloud/.ocdata; fi
			if [ ! -f /home/owncloud/index.html ]; then touch /home/owncloud/index.html; fi
			if [ ! -d /home/owncloud/admin/files ]; then mkdir -p /home/owncloud/admin/files; fi
			if [ -f /home/owncloud/mount.json ]; then chmod 0640 /home/owncloud/mount.json; fi
			chown root:www-data /home/owncloud
		fi

		# ruTorrent Global Config
		if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentDir ]; then
			ruTorrentGlobalConfigs
		fi
	fi

	# Users
	if [ "$FnMode" != "no_user" ]; then
		if [ "$IsReady_MySB_DB" == "YES" ]; then
			ListingUsers
			if [ ! -z "$UsersList" ]; then
				for FnUser in $UsersList; do
					if [ ! -z "`getent passwd $FnUser`" ]; then
						# Home
						ManageUserHomeDir "$FnUser"

						# ruTorrent
						if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentPluginsDir ]; then
							ruTorrentUsersConfigs "$FnUser"
						fi

						# Seedbox-Manager
						ManagerUsersConfigs "$FnUser"

						# Cakebox-Light
						CakeboxUsersConfigs "$FnUser"
					fi
				done
			fi
		fi
	fi

	# ruTorrent
	if [ "$FnMode" == "global" ] || [ "$FnMode" == "no_user" ]; then
		if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentDir ]; then
			if [ -d $RutorrentDir ]; then chmod -R 0755 $RutorrentDir; fi
			if [ -d $RutorrentDir ]; then chown -R www-data:www-data $RutorrentDir; fi
			if [ -d $RutorrentDir/share ]; then
				chmod -R 0777 $RutorrentDir/share
				find $RutorrentDir/share/ -type f -print0 | xargs -0 chmod 0666
			fi
			if [ -d $RutorrentPluginsDir/fileupload/scripts/upload ]; then chmod 0775 $RutorrentPluginsDir/fileupload/scripts/upload; fi
		fi
	fi

	# Seedbox-Manager
	if [ "$FnMode" == "global" ] || [ "$FnMode" == "no_user" ]; then
		if [[ ! -z "$ManagerDir" ] && [ -d $ManagerDir ]; then
			if [ -d $ManagerDir ]; then chown -R www-data:www-data $ManagerDir; fi
			if [ -f $ManagerDir/reboot-rtorrent ]; then
				chown root:root $ManagerDir/reboot-rtorrent
				chmod 4755 $ManagerDir/reboot-rtorrent
			fi
		fi
	fi
}

##################### LAST LINE ######################################
