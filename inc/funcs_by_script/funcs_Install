# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
funcs_Install=1
##################### FIRST LINE #####################################

#### Logrotate
LogRotate() {
	if [ ! -z "$1" ] && [ -f $MySB_InstallDir/templates/logrotate/etc.logrotate.d.$1.tmpl ]; then
		cp -vf $MySB_InstallDir/templates/logrotate/etc.logrotate.d.$1.tmpl /etc/logrotate.d/$1
		perl -pi -e "s/<MySB_InstallDir>/$MySB_InstallDirEscaped/g" /etc/logrotate.d/$1
		chmod 0644 /etc/logrotate.d/$1
		if [ ! -z "$2" ] && [ $2 -eq 1 ]; then
			logrotate -f /etc/logrotate.d/$1
		fi
	fi
}

#### Check if a package is installed
CheckPackage() {
	if [ ! -z "`dpkg-query -f '${binary:Package}\n' -W | grep "^$1$"`" ]; then
		return 0
	else
		return 1
	fi
}

#### apt-get OR aptitude
PackagesManage() {
	Query="$1"
	PackageList="$2"
	Backports="$3"

	if CheckCommand 0 aptitude; then
		AptCommand="aptitude -q"
	else
		AptCommand="apt-get"
	fi

	if [ -z "$Backports" ]; then
		GlobalArgs="-y --assume-yes"
	else
		GlobalArgs="-y --assume-yes -t $DEBIAN_VERSION-$Backports"
	fi
	RETURN=0
	AptUpdate=0
	tDiff=0
	LocalMirror=0

	if [ "$IsReady_MySB_DB" == "YES" ]; then
		SystemValues="`Func_SQL_Command 'SELECT' 'MySB_db' 'apt_update,apt_date' 'system' "id_system = '1'"`"
		AptUpdate="`echo $SystemValues | awk '{split($0,a,"|"); print a[1]}'`"
		AptDate="`echo $SystemValues | awk '{split($0,a,"|"); print a[2]}'`"
		if [ "$AptDate" == "0000-00-00 00:00:00" ]; then
			Func_SQL_Command 'UPDATE' 'MySB_db' 'system' "apt_update = 'NOW'" "id_system = '1'"
			AptDate="`date +%Y-%m-%d\ %H:%M:%S`"
		fi
		AptDate=$(date -d "$AptDate" +"%Y-%m-%d %H")
		Now=$(date +%Y-%m-%d\ %H)
		t1=$(date --date="$AptDate" +'%-H')
		t2=$(date --date="$Now" +'%-H')
		let "tDiff=$t2-$t1"
	fi

	#### Check last update
	if [ "$Query" != "test" ]; then
		if [ "$IsReady_MySB_DB" == "YES" ]; then
			#### Need of 'apt-get update' ? (must be greater than 2 hours OR forced)
			if [ "$AptUpdate" == "1" ] || [ "$tDiff" -gt "2" ] || [ "$Query" == "upgrade" ]; then
				if CheckCommand 0 apt-mirror && [ -f $MySB_InstallDir/files/apt_mirrors/var/postmirror.sh ]; then
					case "$Query" in
						'install')
							for Package in $PackageList; do
								case "$Package" in
									'webmin'|'plexmediaserver'|'pgld'|'pglcmd'|'pglgui')
										LocalMirror=1
									;;
								esac
							done
						;;
						'upgrade')
							LocalMirror=1
						;;
					esac

					if [ $LocalMirror -eq 1 ]; then
						apt-mirror $MySB_InstallDir/files/apt_mirrors/mirror.list
					fi
				fi

				echo "$AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update
				if [ $? -eq 0 ]; then
					Func_SQL_Command 'UPDATE' 'MySB_db' 'system' "apt_update='0', apt_date='NOW'" "id_system='1'"
				fi
			fi
		else
			echo "$AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update"
			export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update
		fi
	fi

	case "$Query" in
		'install')
			FinalList=""
			for Package in $PackageList; do
				if ! CheckPackage $Package; then
					FinalList="${FinalList} $Package"
				fi
			done
			FinalList="`echo $FinalList | sed -e 's/^ //g;'`"

			if [ ! -z "$FinalList" ]; then
				echo "$AptCommand $GlobalArgs -V -o Dpkg::Options::=\"--force-confold\" install $FinalList"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -V -o Dpkg::Options::="--force-confold" install $FinalList
			fi
		;;
		'upgrade')
			if [ "`$AptCommand --help | grep safe-upgrade | awk '{ print $1 }'`" == "safe-upgrade" ]; then
				echo "$AptCommand $GlobalArgs -V -o Dpkg::Options::=\"--force-confold\" safe-upgrade"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -V -o Dpkg::Options::="--force-confold" safe-upgrade
			else
				echo "$AptCommand $GlobalArgs -V -o Dpkg::Options::=\"--force-confold\" upgrade"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs -V -o Dpkg::Options::="--force-confold" upgrade
			fi
		;;
		'purge')
			FinalList=""
			for Package in $PackageList; do
				if CheckPackage $Package; then
					FinalList="${FinalList} $Package"
				fi
			done
			FinalList="`echo $FinalList | sed -e 's/^ //g;'`"

			if [ ! -z "$FinalList" ]; then
				echo "$AptCommand $GlobalArgs purge $FinalList"
				export DEBIAN_FRONTEND=noninteractive ; $AptCommand $GlobalArgs purge $FinalList
			fi
		;;
		'test')
			$AptCommand $GlobalArgs -o Acquire::Check-Valid-Until=false update > $MySB_InstallDir/temp/netselect-apt
			case "$AptCommand" in
				"aptitude -q")
					Erreur="$Funcs_PackagesManage_Aptitude_0"
					Ignore="$Funcs_PackagesManage_Aptitude_1"
				;;
				"apt-get")
					Erreur="$Funcs_PackagesManage_AptGet_0"
					Ignore="$Funcs_PackagesManage_AptGet_1"
				;;
			esac

			if [ -f $MySB_InstallDir/temp/netselect-apt ]; then
				MirrorsError="`cat $MySB_InstallDir/temp/netselect-apt | grep "^$Erreur" | awk '{ print $2 }'`"
				for Mirror in $MirrorsError; do
					sed -i '/'$Mirror'/d' $MySB_InstallDir/files/fastest_mirrors
				done
				MirrorsError="`cat $MySB_InstallDir/temp/netselect-apt | grep "^$Ignore" | awk '{ print $2 }'`"
				for Mirror in $MirrorsError; do
					sed -i '/'$Mirror'/d' $MySB_InstallDir/files/fastest_mirrors
				done
			fi
		;;
	esac

	RETURN=$?

	if [ "$Query" != "test" ]; then
		if [ "$IsReady_MySB_DB" == "YES" ]; then
			#### Need of cleaning ? (must be greater than 2 hours OR forced)
			if [ "$AptUpdate" == "1" ] || [ "$tDiff" -gt "2" ]; then
				if [ $RETURN -eq 0 ]; then
					if [ "`$AptCommand --help | grep autoremove | awk '{ print $1 }'`" == "autoremove" ]; then
						echo "$AptCommand $GlobalArgs autoremove"
						$AptCommand $GlobalArgs autoremove
					elif [ "`$AptCommand --help | grep autoclean | awk '{ print $1 }'`" == "autoclean" ]; then
						echo "$AptCommand $GlobalArgs autoclean"
						$AptCommand $GlobalArgs autoclean
					fi

					echo "$AptCommand $GlobalArgs install"
					$AptCommand $GlobalArgs install
				fi
			fi
		fi
	fi

	return $RETURN
}

##################### LAST LINE ######################################
