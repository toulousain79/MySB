# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
funcs=1
##################### FIRST LINE #####################################

#### Include tools functions
if [ -z $funcs_sql ]; then
	source $MySB_InstallDir/inc/funcs_sql
fi
if [ -z $funcs_tools ]; then
	source $MySB_InstallDir/inc/funcs_tools
fi

#### Banner
BannerGenerator() {
	figlet MySB $MySB_CurrentVersion > $MySB_InstallDir/files/banner.tmp
	echo "echo -e \"${CGREEN}############################################################$CEND" > $MySB_InstallDir/files/banner_$MySB_CurrentVersion

	NBLIGN=`wc -l $MySB_InstallDir/files/banner.tmp | awk '{ print $1 }'`
	for (( lign=1; lign<=$NBLIGN; lign++ )); do
		MYLIGN=`head -n $lign $MySB_InstallDir/files/banner.tmp | tail -n 1`
		echo "${CGREEN}#$CEND	${CBLUE}$MYLIGN$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	done
	rm -f $MySB_InstallDir/files/banner.tmp

	echo "${CGREEN}#$CEND		${CYELLOW}https://github.com/toulousain79/$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	echo "${CGREEN}#$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	echo "${CGREEN}#$CEND	$Header_CurrentFile ${CRED}$0$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	echo "${CGREEN}############################################################$CEND\"" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	if [ -f $MySB_InstallDir/files/banner_$MySB_CurrentVersion ]; then
		sed -i "s/,/ /g;" $MySB_InstallDir/files/banner_$MySB_CurrentVersion &> /dev/null
		sed -i "s/\`/ /g;" $MySB_InstallDir/files/banner_$MySB_CurrentVersion &> /dev/null
		clear
		source $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	fi
	echo
}

#### User directories listing for new files
function UserNewFiles {
	for i in $(ls -1AFho $1 | grep ".*/$"); do
		dir=$1"$i"
		if [[ -d $dir ]]; then
			cd $dir
			ls -1AFho | grep "`date +%b\ %d`" | awk '{ print $8 }'
			UserNewFiles $dir
		fi
	done
}

#### Send Mail
SendMail() {
	FnSubject="$1"
	FnUser="$2"
	FnCase="$3"
	FnInfo="$4"
	FnAttach=""
	FnUserMail="`Func_SQL_Command 'SELECT' 'MySB_db' 'users_email' 'users' "users_ident = '$FnUser'"`"

	if [ ! -z "$FnInfo" ]; then log_daemon_msg "$Funcs_SendMail_GenerateHTML $FnUser"; fi
	if ! GetPid nginx; then
		service nginx restart &> /dev/null
	fi

	case "$FnCase" in
		'new_files')
			type="plain"
			FnAttach="$MySB_InstallDir/temp/$FnUser.txt"
			UserNewFiles "/home/$FnUser/rtorrent/complete/" > $FnAttach
			if [ ! -s $FnAttach ]; then FnAttach=""; fi
		;;
		*)
			curl --silent --retry 2 --user $MySB_User:$MySB_Password "http://127.0.0.1:$Port_HTTP/UserInfoMail.php?case=$FnCase&user=$FnUser" > $MySB_InstallDir/temp/$FnUser.html
			if [ -s $MySB_InstallDir/temp/$FnUser.html ]; then
				FnAttach="$MySB_InstallDir/temp/$FnUser.html"
				type="html"
			else
				type="plain"
			fi
		;;
	esac

	if [ ! -z "$FnInfo" ]; then
		StatusLSB

		log_daemon_msg "$Funcs_SendMail_SendingEmail $FnUser ($FnInfo)"
	fi

	if [ -z "$FnAttach" ]; then
		echo "" | mail -a "From: MySB <$MainUserEmail>" -a "MIME-Version: 1.0" -a "Content-Type: text/$type" -s "$FnSubject" $FnUserMail
	else
		cat $FnAttach | mail -a "From: MySB <$MainUserEmail>" -a "MIME-Version: 1.0" -a "Content-Type: text/$type" -s "$FnSubject" $FnUserMail
	fi
	sleep 2

	#### Flush mail queue
	if CheckCommand 0 postfix; then postfix flush; fi

	if [ ! -z "$FnInfo" ]; then StatusLSB; fi

	unset FnAttach FnInfo FnSubject FnUser
}

#### Start/Stop services
ManageServices() {
	GlobalCommand="$1"
	ServicesToManage="$2"
	ServicesToManage="`echo $ServicesToManage | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	if [ "$GlobalCommand" == "restart" ]; then
		GlobalCommand="start"
		FinalCommand="restart"
	else
		FinalCommand="reload"
	fi

	# Cleaning actual list of services
	if [ ! -z "$ServicesToManage" ]; then
		# Check if command exist
		for Service in $ServicesToManage; do
			if ! CheckCommand 0 $Service; then
				ServicesToManage="`echo $ServicesToManage | sed -e 's/$Service//g;'`"
			fi
		done
		ServicesToManage="`echo $ServicesToManage | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	fi

	if [ ! -z "$ServicesToManage" ]; then
		case "$LOGSTD" in
			"STDOUT")
				echo "---- "`date +"%T"` >> $MySB_InstallDir/logs/$ScriptName.log
			;;
		esac

		for Service in $ServicesToManage; do
			case "$GlobalCommand" in
				"stop")
					if GetPid $Service; then
						Continue=1

						case "$Service" in
							"pglcmd")
								Continue=0
								log_daemon_msg "Stopping PeerGuardian Linux" "pglcmd"
								pglcmd stop > /dev/null
								StatusLSB
							;;
							"php5-fpm"|"stunnel4"|"vsftpd"|"fail2ban"|"nfs-kernel-server")
								Continue=0
								log_daemon_msg "Stopping $Service"
								service $Service stop > /dev/null
								StatusLSB
							;;
							"nginx")
								Continue=0
								log_daemon_msg "Stopping $Service"
								service $Service stop > /dev/null
								if [ $? -gt 0 ]; then
									fuser -k 81/tcp &> /dev/null
									fuser -k $Port_HTTP/tcp &> /dev/null
									fuser -k $Port_HTTPS/tcp &> /dev/null
									StatusLSB 0
								fi
								if GetPid $Service || [ ! -z "`ps ax | grep 'nginx' | grep '/usr/sbin/nginx' | grep -v 'grep'`" ]; then
									StatusLSB 1
									log_daemon_msg "Killing $Service"
									killall $Service
									StatusLSB
								else
									StatusLSB 0
								fi
							;;
						esac

						if [ "$Continue" == "1" ]; then
							service $Service stop
						fi
					else
						log_daemon_msg "Service already stopped" "$Service"
						StatusLSB 0
					fi
				;;
				"start")
					if [ "$Service" == "pglcmd" ]; then
						if CheckCommand 0 pglcmd; then
							if [ -z $funcs_PeerGuardian ]; then
								source $MySB_InstallDir/inc/funcs_by_script/funcs_PeerGuardian
							fi

							if GetPid $Service; then
								log_daemon_msg "Restarting PeerGuardian Linux"
								pglcmd restart > /dev/null
								if [ $? -gt 0 ]; then
									StatusLSB 1

									log_daemon_msg "Force Restarting PeerGuardian Linux"
									pglcmd force-restart > /dev/null
								fi
							else
								log_daemon_msg "Starting PeerGuardian Linux"
								pglcmd start > /dev/null
							fi

							if [ $? -gt 0 ]; then # if pgl don't start maybe its due to a list update
								StatusLSB 1

								case "$LOGSTD" in
									"STDOUT")
										echo `date +"%T"`" --> The updated list of PGL may have failed." >> $MySB_InstallDir/logs/$ScriptName.log
										echo `date +"%T"`" --> Attempting to clean lists error." >> $MySB_InstallDir/logs/$ScriptName.log
									;;
								esac

								CheckLog="`cat /var/log/pgl/pglcmd.log | grep failed | grep list.iblocklist.com | awk '{ print $6 }'`"
								for List in $CheckLog; do
									case "$LOGSTD" in
										"STDOUT")
											echo `date +"%T"`" --> '$List' will be disabled." >> $MySB_InstallDir/logs/$ScriptName.log
										;;
									esac

									# Comment the list in '/etc/pgl/blocklists.list'
									List=`echo $List | sed s,/,\\\\\\\\\\/,g`
									sed -i "s/^$List/#$List/g" /etc/pgl/blocklists.list
								done
								log_daemon_msg "Force Restarting PeerGuardian Linux"
								pglcmd restart > /dev/null

								if [ $? -gt 0 ]; then # We have again a problem with PeerGuardian, test a force-restart
									StatusLSB 1

									log_daemon_msg "Force Restarting PeerGuardian Linux"
									pglcmd force-restart > /dev/null
									if [ $? -gt 0 ]; then # Again ??
										StatusLSB 1
										# We will use rTorrent Blocklist
										PeerGuardianFailed "rTorrent"
									else
										StatusLSB 0
										PeerGuardianFailed "PeerGuardian"
									fi
								else
									StatusLSB 0
									PeerGuardianFailed "PeerGuardian"
								fi
							else
								StatusLSB 0
								PeerGuardianFailed "PeerGuardian"
							fi
						else
							echo "The command 'pglcmd' is not yet available..."
						fi
					else
						Continue=1

						case "$Service" in
							"dnscrypt-proxy")
								if GetPid $Service; then
									FinalCommand="restart --nologs=yes --dnssec=yes"
								else
									FinalCommand="start --nologs=yes --dnssec=yes"
								fi
							;;
							"webmin")
								if GetPid $Service; then
									FinalCommand="restart"
								else
									FinalCommand="start"
								fi
							;;
							"fail2ban")
								Continue=0
								if ! GetPid $Service; then
									log_daemon_msg "Starting $Service"
									service $Service start > /dev/null
								else
									log_daemon_msg "Restarting $Service"
									service $Service restart > /dev/null
								fi
								StatusLSB
							;;
							"php5-fpm"|"stunnel4"|"postfix"|"cron"|"vsftpd"|"nfs-kernel-server"|"mysql")
								Continue=0
								if CheckCommand 0 $Service; then
									if ! GetPid $Service; then
										log_daemon_msg "Starting $Service"
										service $Service start > /dev/null
									else
										log_daemon_msg "Reloading $Service"
										service $Service $FinalCommand > /dev/null
										if [ $? -gt 0 ]; then
											StatusLSB 1
											log_daemon_msg "Restarting $Service"
											service $Service restart > /dev/null
										fi
									fi
									StatusLSB
								fi
							;;
							"nginx")
								Continue=0
								if CheckCommand 0 $Service; then
									if ! GetPid $Service; then
										log_daemon_msg "Starting $Service"
										service $Service start > /dev/null
									else
										log_daemon_msg "Reloading $Service"
										service $Service $FinalCommand > /dev/null
										if [ -z "`ps ax | grep 'nginx' | grep '/usr/sbin/nginx' | grep -v 'grep'`" ]; then
											StatusLSB 1
											log_daemon_msg "Restarting $Service"
											fuser -k 81/tcp &> /dev/null
											fuser -k $Port_HTTP/tcp &> /dev/null
											fuser -k $Port_HTTPS/tcp &> /dev/null
											service $Service restart > /dev/null
											if [ -z "`ps ax | grep 'nginx' | grep '/usr/sbin/nginx' | grep -v 'grep'`" ]; then
												StatusLSB 1
												log_daemon_msg "Killing $Service"
												service $Service stop > /dev/null
												killall $Service
												StatusLSB
												log_daemon_msg "Starting $Service"
												service $Service start > /dev/null
											fi
										fi
									fi
									StatusLSB
								fi
							;;
							"bind9")
								Continue=0
								if CheckCommand 0 $Service; then
									if ! GetPid $Service; then
										log_daemon_msg "Starting $Service"
										service $Service start > /dev/null
									else
										log_daemon_msg "Reloading $Service"
										service $Service $FinalCommand > /dev/null
										if [ -z "`ps ax | grep 'named -u bind' | grep -v 'grep'`" ]; then
											StatusLSB 1
											log_daemon_msg "Restarting $Service"
											service $Service restart > /dev/null
										fi
									fi
									StatusLSB
								fi
							;;
							*)
								if ! GetPid $Service; then
									FinalCommand="start"
								else
									FinalCommand="$FinalCommand"
								fi
							;;
						esac

						if [ "$Continue" == "1" ]; then
							service $Service $FinalCommand

							if [ $? -gt 0 ] && [ "$FinalCommand" == "reload" ]; then
								service $Service restart
							fi
						fi
					fi
				;;
			esac
		done

		case "$LOGSTD" in
			"STDOUT")
				echo "---- "`date +"%T"` >> $MySB_InstallDir/logs/$ScriptName.log
			;;
		esac
	fi
}

#### Any questions ?
QuestionGetString() {
	local ISPASSWORD="$1"
	local LABEL="$2"
	local RETURN="$3"
	local DEFAULT="$4"
	local NEWVAR1=a
	local NEWVAR2=b
	local YESYES=YESyes
	local NONO=NOno
	local YESNO="$YESYES$NONO"

	while [ ! "$NEWVAR1" = "$NEWVAR2" ] || [ -z "$NEWVAR1" ]; do
		if [ "$ISPASSWORD" == "YES" ]; then
			echo -e -n "${CBLUE}$LABEL$CEND ${CGREEN}"
			read NEWVAR1
			echo -e -n "$CEND"
		else
			if [ -z "$DEFAULT" ]; then
				echo -e -n "${CBLUE}$LABEL$CEND ${CGREEN}"
				read NEWVAR1
			else
				echo -e -n "${CBLUE}$LABEL$CEND ${CYELLOW}$DEFAULT$CEND ${CGREEN}"
				read NEWVAR1
				if [ -z "$NEWVAR1" ]; then
					NEWVAR1="$DEFAULT"
				fi
			fi
			echo -e -n "$CEND"
		fi
		if [ -z "$NEWVAR1" ]; then
			NEWVAR1=a
			continue
		fi

		if [ ! -z "$DEFAULT" ]; then
			if grep -q "$DEFAULT" <<< "$YESNO"; then
				if grep -q "$NEWVAR1" <<< "$YESNO"; then
					if grep -q "$NEWVAR1" <<< "$YESYES"; then
						NEWVAR1=YES
					else
						NEWVAR1=NO
					fi
				else
					NEWVAR1=a
				fi
			fi
		fi

		if [ "$NEWVAR1" == "$DEFAULT" ]; then
			NEWVAR2="$NEWVAR1"
		else
			if [ "$ISPASSWORD" == "YES" ]; then
				echo -e -n "${CRED}$Global_Again $CEND${CGREEN}"
				read NEWVAR2
				echo -e -n "$CEND"
			else
				echo -e -n "${CRED}$Global_Again $CEND${CGREEN}"
				read NEWVAR2
				echo -e -n "$CEND"
			fi
			if [ -z "$NEWVAR2" ]; then
				NEWVAR2=b
				continue
			fi
		fi

		if [ ! -z "$DEFAULT" ]; then
			if grep -q "$DEFAULT" <<< "$YESNO"; then
				if grep -q "$NEWVAR2" <<< "$YESNO"; then
					if grep -q "$NEWVAR2" <<< "$YESYES"; then
						NEWVAR2=YES
					else
						NEWVAR2=NO
					fi
				else
					NEWVAR2=a
				fi
			fi
		fi
	done
	eval $RETURN=\$NEWVAR1
}

#### Script Invocation
ScriptInvoke() {
	#### Use 'source' OR 'bash' OR 'screen' ?
	METHOD=$1

	#### Script to invoke
	MYSCRIPT=$2
	IFS=$'/'; i=0; for var in $MYSCRIPT; do (( i++ )); done; unset IFS
	SCRIPT="`echo $MYSCRIPT | cut -d '/' -f $i`"

	#### Arguments
	Arguments=""
	args=("$@")
	for ((i=2; i < $#; i++)) {
		Arguments="$Arguments ${args[$i]}"
	}
	Arguments="`echo $Arguments | sed -e 's/^ //g;' | sed -e 's/^ //g;'`"

	#### Start invovation
	case "$METHOD" in
		"source"|"bash")
			#### Prepare our script
			# vars & funcs
			echo "source $MySB_InstallDir/inc/vars" > $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			if [ -f $MySB_InstallDir/inc/funcs_by_script/funcs_${SCRIPT} ]; then
				echo "source $MySB_InstallDir/inc/funcs_by_script/funcs_${SCRIPT}" >> $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			fi
			# copy it
			cat $MYSCRIPT >> $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			# delete lign start with comments
			sed -i '/^#/d' $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			#delete includes before and after (on top and bottom of every script)
			sed -i '/includes_before/d' $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			sed -i '/includes_after/d' $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			# Language
			LoadLanguage "$SCRIPT"

			$METHOD $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked $Arguments
		;;
		"ScreenSTD"|"ScreenWAIT"|"InQueue")
			screen -dmS ${ScriptName}_${SCRIPT} /bin/bash $MYSCRIPT $Arguments;

			# Possibilities:
			# 	ScreenSTD:	Waiting silently
			# 	ScreenWAIT:	Waiting point to point
			# 	InQueue:	No waiting...
			case "$METHOD" in
				"ScreenSTD")
					WaitingSTD ${ScriptName}_${SCRIPT}
				;;
				"ScreenWAIT")
					WaitingScreen ${ScriptName}_${SCRIPT}
				;;
			esac
		;;
	esac
}

#### Manage directories, files and rights
ManageDirectoriesAndFiles() {
	case "$1" in
		"global"|"user"|"no_user")
			FnMode="$1"
		;;
		*)
			FnMode="global"
		;;
	esac

	if [ -z $funcs_MySB_CreateUser ]; then
		source $MySB_InstallDir/inc/funcs_by_script/funcs_MySB_CreateUser
	fi

	#### Create missing directories
	if [ "$FnMode" == "global" ] || [ "$FnMode" == "no_user" ]; then
		# TMPFS
		if [ ! -d /mnt/tmpFS ]; then mkdir /mnt/tmpFS; fi
		# Root Directories
		if [ ! -d $MySB_InstallDir/db ]; then mkdir $MySB_InstallDir/db; fi
		if [ ! -d $MySB_InstallDir/files ]; then mkdir $MySB_InstallDir/files; fi
		if [ ! -d $MySB_InstallDir/logs/archives ]; then mkdir -p $MySB_InstallDir/logs/archives; fi
		if [ ! -d $MySB_InstallDir/sources ]; then mkdir $MySB_InstallDir/sources; fi
		if [ ! -d $MySB_InstallDir/ssl ]; then mkdir $MySB_InstallDir/ssl; fi
		if [ ! -d $MySB_InstallDir/temp ]; then mkdir $MySB_InstallDir/temp; fi
		if [ ! -d $MySB_InstallDir/web/openvpn ]; then mkdir -p $MySB_InstallDir/web/openvpn; fi
		# Log directories
		if [ ! -d $MySB_InstallDir/web/logs ]; then mkdir $MySB_InstallDir/web/logs; fi
		if [ ! -d $MySB_InstallDir/web/logs/bin ]; then mkdir $MySB_InstallDir/web/logs/bin; fi
		if [ ! -d $MySB_InstallDir/web/logs/install ]; then mkdir $MySB_InstallDir/web/logs/install; fi
		if [ ! -d $MySB_InstallDir/web/logs/nginx ]; then mkdir $MySB_InstallDir/web/logs/nginx; fi
		if [ ! -d $MySB_InstallDir/web/logs/scripts ]; then mkdir $MySB_InstallDir/web/logs/scripts; fi
		if [ ! -d $MySB_InstallDir/web/logs/security ]; then mkdir $MySB_InstallDir/web/logs/security; fi
		if [ ! -d $MySB_InstallDir/web/logs/upgrade ]; then mkdir $MySB_InstallDir/web/logs/upgrade; fi
		if [ ! -d $MySB_InstallDir/web/logs/system ]; then mkdir $MySB_InstallDir/web/logs/system; fi
		# Local mirrors
		if [ ! -d $MySB_InstallDir/files/apt_mirrors/mirrors ]; then mkdir -p $MySB_InstallDir/files/apt_mirrors/mirrors ; fi
		if [ ! -d $MySB_InstallDir/files/apt_mirrors/skel ]; then mkdir $MySB_InstallDir/files/apt_mirrors/skel ; fi
		if [ ! -d $MySB_InstallDir/files/apt_mirrors/var ]; then mkdir $MySB_InstallDir/files/apt_mirrors/var ; fi

		#### Convert with dos2unix
		dos2unix $MySB_InstallDir/* &> /dev/null
		dos2unix $MySB_InstallDir/bin/* &> /dev/null
		dos2unix $MySB_InstallDir/files/* &> /dev/null
		dos2unix $MySB_InstallDir/inc/* &> /dev/null
		dos2unix $MySB_InstallDir/install/* &> /dev/null
		dos2unix $MySB_InstallDir/scripts/* &> /dev/null
		dos2unix $MySB_InstallDir/templates/* &> /dev/null
		dos2unix $MySB_InstallDir/upgrade/* &> /dev/null

		#### Change rights
		# $MySB_InstallDir/
		chmod -R 0700 $MySB_InstallDir
		chmod 0755 $MySB_InstallDir
		chown -R root:root $MySB_InstallDir
		# $MySB_InstallDir/db
		chmod 0770 $MySB_InstallDir/db
		chmod 0660 $MySB_InstallDir/db/* &> /dev/null
		chown -R root:www-data $MySB_InstallDir/db
		# $MySB_InstallDir/ssl
		chmod 0644 $MySB_InstallDir/ssl/*.cert &> /dev/null
		# $MySB_InstallDir/install
		chmod -R 0755 $MySB_InstallDir/install
		# $MySB_InstallDir/temp
		chown root:www-data $MySB_InstallDir/temp
		chmod 0760 $MySB_InstallDir/temp
		# $MySB_InstallDir/files/apt_mirrors
		if [ ! -z "`getent passwd apt-mirror`" ]; then
			chown apt-mirror:apt-mirror $MySB_InstallDir/files/apt_mirrors
		fi
		# $MySB_InstallDir/web
		chown -R root:www-data $MySB_InstallDir/web/*
		chmod -R 0640 $MySB_InstallDir/web/*
		find $MySB_InstallDir/web/* -type d -not -path "*rutorrent*" -not -path "*openvpn*" -print0 | xargs -0 chmod 0750
		chmod 0755 $MySB_InstallDir/web

		# $MySB_InstallDir/web/openvpn
		if [ -d $MySB_InstallDir/web/openvpn ]; then chmod 0770 $MySB_InstallDir/web/openvpn; fi
		# /home/MySB_share
		chown root:MySB_users /home/MySB_share
		chmod 0770 /home/MySB_share

		# Config files
		if [ -f /etc/MySB/config ]; then
			chown root:root /etc/MySB/config
			chmod 0640 /etc/MySB/config
		fi
		if [ -f /etc/MySB/config_db ]; then
			chown root:root /etc/MySB/config_db
			chmod 0640 /etc/MySB/config_db
		fi
		if [ -f /etc/MySB/config.php ]; then
			chmod 0640 /etc/MySB/config.php
			chown root:www-data /etc/MySB/config.php
		fi

		# Cakebox-Light
		if [ -d  $CakeboxDir/config/ ]; then
			chown root:www-data $CakeboxDir/config/*
			chmod 0660 $CakeboxDir/config/*
		fi

		# LoadAvg
		if [ ! -z "$LoadAvgDir" ]; then
			if [ -f $LoadAvgDir/configure ]; then chmod 0640 $LoadAvgDir/configure; fi
			if [ ! -d $LoadAvgDir/logs ] && [ -d $LoadAvgDir ]; then mkdir $LoadAvgDir/logs; fi
			if [ -d $LoadAvgDir/logs ]; then chmod 0777 $LoadAvgDir/logs; fi
		fi

		# ownCloud
		if [ ! -z "$ownCloudDir" ] && [ -d $ownCloudDir ]; then
			chmod 0750 $ownCloudDir/occ
			#chown -R root:www-data $ownCloudDir/
			chown -R www-data:www-data $ownCloudDir/apps/
			chown -R www-data:www-data $ownCloudDir/config/
			chown -R www-data:www-data $ownCloudDir/themes/
			if [ -d $ownCloudDir/assets ]; then
				chown www-data:www-data $ownCloudDir/assets
				chmod 0750 $ownCloudDir/assets
			fi
			if [ ! -d /home/owncloud ]; then mkdir -p /home/owncloud; fi
			if [ ! -f /home/owncloud/.ocdata ]; then touch /home/owncloud/.ocdata; fi
			if [ ! -f /home/owncloud/index.html ]; then touch /home/owncloud/index.html; fi
			if [ ! -d /home/owncloud/admin/files ]; then mkdir -p /home/owncloud/admin/files; fi
			if [ -f /home/owncloud/mount.json ]; then chmod 0640 /home/owncloud/mount.json; fi
			chown www-data:root /home/owncloud
			chown www-data:www-data /home/owncloud/*
		fi

		# ruTorrent Global Config
		if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentDir ]; then
			ruTorrentGlobalConfigs
		fi
	fi

	# Users
	if [ "$FnMode" != "no_user" ]; then
		if [ "$IsReady_MySB_DB" == "YES" ]; then
			ListingUsers
			if [ ! -z "$UsersList" ]; then
				for FnUser in $UsersList; do
					if [ ! -z "`getent passwd $FnUser`" ]; then
						# Home
						ManageUserHomeDir "$FnUser"

						# ruTorrent
						if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentPluginsDir ]; then
							ruTorrentUsersConfigs "$FnUser"
						fi

						# Seedbox-Manager
						ManagerUsersConfigs "$FnUser"

						# Cakebox-Light
						CakeboxUsersConfigs "$FnUser"
					fi
				done
			fi
		fi
	fi

	# ruTorrent
	if [ "$FnMode" == "global" ] || [ "$FnMode" == "no_user" ]; then
		if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentDir ]; then
			if [ -d $RutorrentDir ]; then chmod -R 0755 $RutorrentDir; fi
			if [ -d $RutorrentDir ]; then chown -R www-data:www-data $RutorrentDir; fi
			if [ -d $RutorrentDir/share ]; then
				chmod -R 0777 $RutorrentDir/share
				find $RutorrentDir/share/ -type f -print0 | xargs -0 chmod 0666
			fi
			if [ -d $RutorrentPluginsDir/fileupload/scripts/upload ]; then chmod 0775 $RutorrentPluginsDir/fileupload/scripts/upload; fi
		fi
	fi

	# Seedbox-Manager
	if [ "$FnMode" == "global" ] || [ "$FnMode" == "no_user" ]; then
		if [ ! -z "$ManagerDir" ] && [ -d $ManagerDir ]; then
			if [ -d $ManagerDir ]; then chown -R www-data:www-data $ManagerDir; fi
			if [ -f $ManagerDir/reboot-rtorrent ]; then
				chown root:root $ManagerDir/reboot-rtorrent
				chmod 4755 $ManagerDir/reboot-rtorrent
			fi
		fi
	fi
}

#### ruTorrent Global config
ruTorrentGlobalConfigs() {
	LISTING=$(ls -1r $RutorrentPluginsDir/)

	if [ -f $RutorrentDir/conf/config.php ]; then
		# Alter 'config.php' for general use
		perl -pi -e "s/$topDirectory = '\/';/$topDirectory = '\/home';/g" $RutorrentDir/conf/config.php
		sed -i "/\"php\"/s/'',/'\/usr\/bin\/php',/g" $RutorrentDir/conf/config.php
		sed -i "/\"curl\"/s/'',/'\/usr\/bin\/curl',/g" $RutorrentDir/conf/config.php
		sed -i "/\"gzip\"/s/'',/'\/bin\/gzip',/g" $RutorrentDir/conf/config.php
		sed -i "/\"id\"/s/'',/'\/usr\/bin\/id',/g" $RutorrentDir/conf/config.php
		sed -i "/\"stat\"/s/'',/'\/usr\/bin\/stat',/g" $RutorrentDir/conf/config.php
	fi

	for Plugin in $LISTING; do
		case "$Plugin" in
			'checksfv')
				if [ -f $RutorrentPluginsDir/checksfv/conf.php ]; then
					perl -pi -e "s/'';/'\/usr\/bin\/cksfv';/g" $RutorrentPluginsDir/checksfv/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'cpuload')
				if [ -f $RutorrentPluginsDir/cpuload/conf.php ]; then
					perl -pi -e "s/$processorsCount = null;/$processorsCount = $PROCESSOR;/g" $RutorrentPluginsDir/cpuload/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'create')
				if [ -f $RutorrentPluginsDir/create/conf.php ]; then
					perl -pi -e "s/$useExternal = false;/$useExternal = 'buildtorrent';/g" $RutorrentPluginsDir/create/conf.php
					sed -i "/pathToCreatetorrent/s/'';/'\/usr\/bin\/buildtorrent';/g" $RutorrentPluginsDir/create/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'diskspace')
				if [ -f $RutorrentPluginsDir/diskspace/conf.php ]; then
					perl -pi -e "s/$notifySpaceLimit = 512;/$notifySpaceLimit = 4096;/g" $RutorrentPluginsDir/diskspace/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'filemanager')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin FileManager'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/filemanager/conf.php ]; then
						sed -i "/'rar'/s/'';/'\/usr\/bin\/rar';/g" $RutorrentPluginsDir/filemanager/conf.php
						sed -i "/'zip'/s/'';/'\/usr\/bin\/zip';/g" $RutorrentPluginsDir/filemanager/conf.php
						sed -i "/'unzip'/s/'';/'\/usr\/bin\/unzip';/g" $RutorrentPluginsDir/filemanager/conf.php
						sed -i "/'tar'/s/'';/'\/bin\/tar';/g" $RutorrentPluginsDir/filemanager/conf.php
						if [ "`cat $RutorrentPluginsDir/filemanager/conf.php | grep "$pathToExternals\['bzip2'\]"`" == "" ]; then
							NumLign=$(sed -n "/'\/bin\/tar'/=" $RutorrentPluginsDir/filemanager/conf.php)
							(( NumLign++ ))
							sed -i "${NumLign}i\$pathToExternals['bzip2'] = '\/bin\/bzip2';" $RutorrentPluginsDir/filemanager/conf.php
						fi
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/filemanager"
				fi
				unset IsActive
			;;
			'fileshare')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin FileShare'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/fileshare/conf.php ]; then
						perl -pi -e "s/http:\/\/domain.tld\/noauthdir\/share.php/https:\/\/$HostNameFQDN:$Port_HTTPS\/fileshare.php/g" $RutorrentPluginsDir/fileshare/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/fileshare"
				fi
				unset IsActive
			;;
			'fileupload')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin FileUpload'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -d $RutorrentPluginsDir/fileupload/scripts/upload ]; then
						chmod 0775 $RutorrentPluginsDir/fileupload/scripts/upload;
					fi
					if [ ! -f $RutorrentPluginsDir/fileupload/conf.php ]; then
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/fileupload"
					DeleteDirectory 0 "$RutorrentDir/conf/users/*/fileupload"
				fi
				unset IsActive
			;;
			'geoip')
				if [ -f $RutorrentPluginsDir/geoip/conf.php ]; then
					perl -pi -e "s/$dnsResolver = '8.8.8.8';/$dnsResolver = null;/g" $RutorrentPluginsDir/geoip/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'linkcakebox')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Link Cakebox'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/linkcakebox/conf.php ]; then
						NumLign=$(sed -n "/\$url =/=" $RutorrentPluginsDir/linkcakebox/conf.php)
						sed -i '/$url =/d' $RutorrentPluginsDir/linkcakebox/conf.php
						sed -i "${NumLign}i\$url = 'https:\/\/$HostNameFQDN:$Port_HTTPS\/cb\/';" $RutorrentPluginsDir/linkcakebox/conf.php
						perl -pi -e "s/\/torrents\//\/rtorrent\//g" $RutorrentPluginsDir/linkcakebox/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/linkcakebox"
				fi
				unset IsActive
			;;
			'linkseedboxmanager')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Link Manager'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/linkseedboxmanager/conf.php ]; then
						perl -pi -e "s/http:\/\/seedbox-manager.ndd.tld/https:\/\/$HostNameFQDN:$Port_HTTPS\/sm\//g" $RutorrentPluginsDir/linkseedboxmanager/conf.php
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/linkseedboxmanager"
				fi
				unset IsActive
			;;
			'logoff')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Logoff'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/logoff/conf.php ]; then
						perl -pi -e "s/scars,user1,user2//g" $RutorrentPluginsDir/logoff/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/logoff"
				fi
				unset IsActive
			;;
			'mediainfo')
				if [ -f $RutorrentPluginsDir/mediainfo/conf.php ]; then
					sed -i "/'mediainfo'/s/'';/'\/usr\/bin\/mediainfo';/g" $RutorrentPluginsDir/mediainfo/conf.php
					perl -pi -e "s/scars,user1,user2//g" $RutorrentPluginsDir/mediainfo/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'mediastream')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin MediaStream'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/mediastream/conf.php ]; then
						perl -pi -e "s/http:\/\/mydomain.com\/stream\/view.php/https:\/\/$HostNameFQDN:$Port_HTTPS\/view.php/g" $RutorrentPluginsDir/mediastream/conf.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/mediastream"
				fi
				unset IsActive
			;;
			'screenshots')
				if [ -f $RutorrentPluginsDir/screenshots/conf.php ]; then
					sed -i "/'ffmpeg'/s/'';/'\/usr\/bin\/ffmpeg';/g" $RutorrentPluginsDir/screenshots/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'stream')
				IsActive="`Func_SQL_Command 'SELECT' 'MySB_db' 'active' 'repositories' \"name = 'ruTorrent Plugin Stream'\"`"
				if [ $IsActive -eq 1 ]; then
					if [ -f $RutorrentPluginsDir/stream/config.php ]; then
						NumLign=$(sed -n "/\$username =/=" $RutorrentPluginsDir/stream/config.php)
						if [ -z "$(sed -n "/\$username =/=" $RutorrentPluginsDir/stream/config.php)" ]; then
							NumLign=$(sed -n "/\$auth =/=" $RutorrentPluginsDir/stream/config.php)
							sed -i "${NumLign}i\$username = \$_SERVER['PHP_AUTH_USER'];" $RutorrentPluginsDir/stream/config.php
						fi
						NumLign=$(sed -n "/\$password =/=" $RutorrentPluginsDir/stream/config.php)
						if [ -z "$NumLign" ]; then
							NumLign=$(sed -n "/\$auth =/=" $RutorrentPluginsDir/stream/config.php)
							sed -i "${NumLign}i\$password = \$_SERVER['PHP_AUTH_PW'];" $RutorrentPluginsDir/stream/config.php
						fi
						if [ -z "` cat $RutorrentPluginsDir/stream/config.php | grep '$auth = "$username:$password";'`" ]; then
							NumLign=$(sed -n "/\$auth =/=" $RutorrentPluginsDir/stream/config.php)
							sed -i '/$auth =/d' $RutorrentPluginsDir/stream/config.php
							NumLign=$(( NumLign+2 ))
							sed -i "${NumLign}i\$auth = \"\$username:\$password\";" $RutorrentPluginsDir/stream/config.php
						fi
						perl -pi -e "s/define\('USE_NGINX', false\);/define\('USE_NGINX', true\);/g" $RutorrentPluginsDir/stream/config.php
						perl -pi -e "s/define\('SCHEME', 'http'\);/define\('SCHEME', 'https'\);/g" $RutorrentPluginsDir/stream/config.php
					else
						echo "Plugin $Plugin missing"
					fi
				else
					DeleteDirectory 0 "$RutorrentPluginsDir/stream"
				fi
				unset IsActive
			;;
			'theme')
				if [ -f $RutorrentPluginsDir/stream/config.php ]; then
					perl -pi -e "s/$defaultTheme = \"\";/$defaultTheme = \"Oblivion\";/g" $RutorrentPluginsDir/theme/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
			'unpack')
				if [ -f $RutorrentPluginsDir/unpack/conf.php ]; then
					sed -i "/'unzip'/s/'';/'\/usr\/bin\/unzip';/g" $RutorrentPluginsDir/unpack/conf.php
					sed -i "/'unrar'/s/'';/'\/usr\/bin\/unrar';/g" $RutorrentPluginsDir/unpack/conf.php
				else
					echo "Plugin $Plugin missing"
				fi
			;;
		esac
	done
}

##################### LAST LINE ######################################