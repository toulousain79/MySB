# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Include tools functions
source $MySB_InstallDir/inc/funcs_sql
source $MySB_InstallDir/inc/funcs_tools

#### Banner
BannerGenerator() {
	figlet MySB $MySB_CurrentVersion > $MySB_InstallDir/files/banner.tmp
	echo "echo -e \"${CGREEN}############################################################$CEND" > $MySB_InstallDir/files/banner_$MySB_CurrentVersion

	NBLIGN=`wc -l $MySB_InstallDir/files/banner.tmp | awk '{ print $1 }'`
	for (( lign=1; lign<=$NBLIGN; lign++ )); do
		MYLIGN=`head -n $lign $MySB_InstallDir/files/banner.tmp | tail -n 1`
		echo "${CGREEN}#$CEND	${CBLUE}$MYLIGN$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	done
	rm -f $MySB_InstallDir/files/banner.tmp

	echo "${CGREEN}#$CEND		${CYELLOW}https://github.com/toulousain79/$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	echo "${CGREEN}#$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	if [ "`screen -ls | grep MySB`" == "" ]; then
		echo "${CGREEN}#$CEND	$Header_CurrentFile ${CRED}$0$CEND" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	fi
	echo "${CGREEN}############################################################$CEND\"" >> $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	if [ -f $MySB_InstallDir/files/banner_$MySB_CurrentVersion ]; then
		sed -i "s/,/ /g;" $MySB_InstallDir/files/banner_dev &> /dev/null
		sed -i "s/\`/ /g;" $MySB_InstallDir/files/banner_dev &> /dev/null
		clear
		source $MySB_InstallDir/files/banner_$MySB_CurrentVersion
	fi
	echo
}

#### Send Mail
SendMail() {
	FnSubject="$1"
	FnUser="$2"
	FnCase="$3"
	FnInfo="$4"
	FnAttach=""
	FnUserMail="`Func_SQL_Command 'SELECT' 'MySB_db' 'users_email' 'users' "users_ident = '$FnUser'"`"
	if [ ! -z "$FnInfo" ]; then log_daemon_msg "$Funcs_SendMail_GenerateHTML $FnUser"; fi

	if ! GetPid nginx; then
		service nginx restart &> /dev/null
	fi

	curl --silent --retry 2 --user $MySB_User:$MySB_Password "http://127.0.0.1:$Port_HTTP/UserInfoMail.php?case=$FnCase&user=$FnUser" > $MySB_InstallDir/temp/$FnUser.html

	if [ ! -z "$FnInfo" ]; then StatusLSB; fi

	if [ ! -z "$FnInfo" ]; then log_daemon_msg "$Funcs_SendMail_SendingEmail $FnUser ($FnInfo)"; fi
	if [ -s $MySB_InstallDir/temp/$FnUser.html ]; then
		FnAttach="$MySB_InstallDir/temp/$FnUser.html"
		type="html"
	else
		type="plain"
	fi

	if [ -z "$FnAttach" ]; then
		echo "" | mail -a "From: MySB <$MainUserEmail>" -a "MIME-Version: 1.0" -a "Content-Type: text/$type" -s "$FnSubject" $FnUserMail
	else
		cat $FnAttach | mail -a "From: MySB <$MainUserEmail>" -a "MIME-Version: 1.0" -a "Content-Type: text/$type" -s "$FnSubject" $FnUserMail
	fi
	sleep 2

	#### Flush mail queue
	if CheckCommand 0 postfix; then postfix flush; fi

	if [ ! -z "$FnInfo" ]; then StatusLSB; fi

	unset FnAttach FnInfo FnSubject FnUser
}

#### Start/Stop services
ManageServices() {
	GlobalCommand="$1"
	ServicesToManage="$2"
	ServicesToManage="`echo $ServicesToManage | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	if [ "$GlobalCommand" == "restart" ]; then
		GlobalCommand="start"
		FinalCommand="restart"
	else
		FinalCommand="reload"
	fi

	# Cleaning actual list of services
	if [ ! -z "$ServicesToManage" ]; then
		# Check if command exist
		for Service in $ServicesToManage; do
			if ! CheckCommand 0 $Service; then
				ServicesToManage="`echo $ServicesToManage | sed -e 's/$Service//g;'`"
			fi
		done
		ServicesToManage="`echo $ServicesToManage | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	fi

	if [ ! -z "$ServicesToManage" ]; then
		case "$LOGSTD" in
			"STDOUT")
				echo "---- "`date +"%T"` >> $MySB_InstallDir/logs/$ScriptName.log
			;;
		esac

		for Service in $ServicesToManage; do
			case "$GlobalCommand" in
				"stop")
					if GetPid $Service; then
						Continue=1

						case "$Service" in
							"pglcmd")
								Continue=0
								log_daemon_msg "Stopping PeerGuardian Linux" "pglcmd"
								pglcmd stop > /dev/null
								StatusLSB
							;;
							"php5-fpm"|"nginx"|"stunnel4"|"vsftpd"|"fail2ban"|"nfs-kernel-server")
								Continue=0
								log_daemon_msg "Stopping $Service"
								service $Service stop > /dev/null
								StatusLSB
							;;
						esac

						if [ "$Continue" == "1" ]; then
							service $Service stop
						fi
					else
						log_daemon_msg "Service already stopped" "$Service"
						StatusLSB 0
					fi
				;;
				"start")
					if [ "$Service" == "pglcmd" ]; then
						if CheckCommand 0 pglcmd; then
							source $MySB_InstallDir/inc/funcs_by_script/funcs_PeerGuardian
						
							if GetPid $Service; then
								log_daemon_msg "Restarting PeerGuardian Linux"
								pglcmd restart > /dev/null
								if [ $? -gt 0 ]; then
									StatusLSB 1

									log_daemon_msg "Force Restarting PeerGuardian Linux"
									pglcmd force-restart > /dev/null
								fi
							else
								log_daemon_msg "Starting PeerGuardian Linux"
								pglcmd start > /dev/null
							fi

							if [ $? -gt 0 ]; then # if pgl don't start maybe its due to a list update
								StatusLSB 1

								case "$LOGSTD" in
									"STDOUT")
										echo `date +"%T"`" --> The updated list of PGL may have failed." >> $MySB_InstallDir/logs/$ScriptName.log
										echo `date +"%T"`" --> Attempting to clean lists error." >> $MySB_InstallDir/logs/$ScriptName.log
									;;
								esac

								CheckLog="`cat /var/log/pgl/pglcmd.log | grep failed | grep list.iblocklist.com | awk '{ print $6 }'`"
								for List in $CheckLog; do
									case "$LOGSTD" in
										"STDOUT")
											echo `date +"%T"`" --> '$List' will be disabled." >> $MySB_InstallDir/logs/$ScriptName.log
										;;
									esac

									# Comment the list in '/etc/pgl/blocklists.list'
									List=`echo $List | sed s,/,\\\\\\\\\\/,g`
									sed -i "s/^$List/#$List/g" /etc/pgl/blocklists.list
								done
								log_daemon_msg "Force Restarting PeerGuardian Linux"
								pglcmd restart > /dev/null

								if [ $? -gt 0 ]; then # We have again a problem with PeerGuardian, test a force-restart
									StatusLSB 1

									log_daemon_msg "Force Restarting PeerGuardian Linux"
									pglcmd force-restart > /dev/null
									if [ $? -gt 0 ]; then # Again ??
										StatusLSB 1
										# We will use rTorrent Blocklist
										PeerGuardianFailed "rTorrent"
									else
										StatusLSB 0
										PeerGuardianFailed "PeerGuardian"
									fi
								else
									StatusLSB 0
									PeerGuardianFailed "PeerGuardian"
								fi
							else
								StatusLSB 0
								PeerGuardianFailed "PeerGuardian"
							fi
						else
							echo "The command 'pglcmd' is not yet available..."
						fi
					else
						Continue=1

						case "$Service" in
							"dnscrypt-proxy"|"webmin")
								if GetPid $Service; then
									FinalCommand="restart"
								else
									FinalCommand="start"
								fi
							;;
							"fail2ban")
								Continue=0
								if ! GetPid $Service; then
									log_daemon_msg "Starting $Service"
									service $Service start > /dev/null
								else
									log_daemon_msg "Restarting $Service"
									service $Service restart > /dev/null
								fi
								StatusLSB
							;;
							"php5-fpm"|"stunnel4"|"postfix"|"cron"|"vsftpd"|"nfs-kernel-server")
								Continue=0
								if CheckCommand 0 $Service; then
									if ! GetPid $Service; then
										log_daemon_msg "Starting $Service"
										service $Service start > /dev/null
									else
										log_daemon_msg "Reloading $Service"
										service $Service $FinalCommand > /dev/null
										if [ $? -gt 0 ]; then
											StatusLSB 1
											log_daemon_msg "Restarting $Service"
											service $Service restart > /dev/null
										fi
									fi
									StatusLSB
								fi
							;;
							"nginx")
								Continue=0
								if CheckCommand 0 $Service; then
									if ! GetPid $Service; then
										log_daemon_msg "Starting $Service"
										service $Service start > /dev/null
									else
										log_daemon_msg "Reloading $Service"
										service $Service $FinalCommand > /dev/null
										if [ -z "`ps ax | grep 'nginx' | grep '/usr/sbin/nginx' | grep -v 'grep'`" ]; then
											StatusLSB 1
											log_daemon_msg "Killing $Service"
											killall $Service
											StatusLSB
											log_daemon_msg "Starting $Service"
											service $Service start > /dev/null
										fi
									fi
									StatusLSB
								fi
							;;
							"bind9")
								Continue=0
								if CheckCommand 0 $Service; then
									if ! GetPid $Service; then
										log_daemon_msg "Starting $Service"
										service $Service start > /dev/null
									else
										log_daemon_msg "Reloading $Service"
										service $Service $FinalCommand > /dev/null
										if [ -z "`ps ax | grep 'named -u bind' | grep -v 'grep'`" ]; then
											StatusLSB 1
											log_daemon_msg "Restarting $Service"
											service $Service restart > /dev/null
										fi
									fi
									StatusLSB
								fi
							;;
							*)
								if ! GetPid $Service; then
									FinalCommand="start"
								else
									FinalCommand="$FinalCommand"
								fi
							;;
						esac

						if [ "$Continue" == "1" ]; then
							service $Service $FinalCommand

							if [ $? -gt 0 ] && [ "$FinalCommand" == "reload" ]; then
								service $Service restart
							fi
						fi
					fi
				;;
			esac
		done

		case "$LOGSTD" in
			"STDOUT")
				echo "---- "`date +"%T"` >> $MySB_InstallDir/logs/$ScriptName.log
			;;
		esac
	fi
}

#### Any questions ?
QuestionGetString() {
	local ISPASSWORD=$1
	local LABEL=$2
	local RETURN=$3
	local DEFAULT=$4
	local NEWVAR1=a
	local NEWVAR2=b
	local YESYES=YESyes
	local NONO=NOno
	local YESNO=$YESYES$NONO

	while [ ! $NEWVAR1 = $NEWVAR2 ] || [ -z "$NEWVAR1" ]; do
		if [ "$ISPASSWORD" == "YES" ]; then	
			echo -e -n "${CBLUE}$LABEL$CEND ${CBLACK}"
			read NEWVAR1
			echo -e -n "$CEND"
		else
			if [ -z "$DEFAULT" ]; then
				echo -e -n "${CBLUE}$LABEL$CEND ${CGREEN}"
				read NEWVAR1
			else
				echo -e -n "${CBLUE}$LABEL$CEND ${CYELLOW}$DEFAULT$CEND ${CGREEN}"
				read NEWVAR1
				if [ -z "$NEWVAR1" ]; then
					NEWVAR1="$DEFAULT"
				fi
			fi
			echo -e -n "$CEND"
		fi
		if [ -z "$NEWVAR1" ]; then
			NEWVAR1=a
			continue
		fi

		if [ ! -z "$DEFAULT" ]; then
			if grep -q "$DEFAULT" <<< "$YESNO"; then
				if grep -q "$NEWVAR1" <<< "$YESNO"; then
					if grep -q "$NEWVAR1" <<< "$YESYES"; then
						NEWVAR1=YES
					else
						NEWVAR1=NO
					fi
				else
					NEWVAR1=a
				fi
			fi
		fi

		if [ "$NEWVAR1" == "$DEFAULT" ]; then
			NEWVAR2=$NEWVAR1
		else
			if [ "$ISPASSWORD" == "YES" ]; then
				echo -e -n "${CRED}$Global_Again $CEND${CBLACK}"
				read NEWVAR2
				echo -e -n "$CEND"
			else
				echo -e -n "${CRED}$Global_Again $CEND${CGREEN}"
				read NEWVAR2
				echo -e -n "$CEND"
			fi
			if [ -z "$NEWVAR2" ]; then
				NEWVAR2=b
				continue
			fi
		fi

		if [ ! -z "$DEFAULT" ]; then
			if grep -q "$DEFAULT" <<< "$YESNO"; then
				if grep -q "$NEWVAR2" <<< "$YESNO"; then
					if grep -q "$NEWVAR2" <<< "$YESYES"; then
						NEWVAR2=YES
					else
						NEWVAR2=NO
					fi
				else
					NEWVAR2=a
				fi
			fi
		fi
	done
	eval $RETURN=\$NEWVAR1
}

#### Monthly payment
MonthlyPayment() {
	if [ ! -z "$RentingGlobalCost" ] && [ ! -z "$RentingTVA" ] && [ ! -z "$RentingModel" ]; then
		log_daemon_msg "Calculate the monthly payment"
		export LANG=""
		CountingUsers
		FnX=`echo "$RentingGlobalCost/$TotalUsers" | bc -l`
		FnY=`echo "($FnX*$RentingTVA)/100" | bc -l`
		PriceByUser=`echo "$FnX+$FnY" | bc -l`
		PriceByUser=`printf '%.2f\n' $PriceByUser`
		UserToIgnore="$1"

		# add new renting info
		Func_SQL_Command 'UPDATE' 'MySB_db' 'renting' "model = '$RentingModel', tva = '$RentingTVA', global_cost = '$RentingGlobalCost', nb_users = '$TotalUsers', price_per_users = '$PriceByUser'" "id_renting = '1'"
		StatusLSB

		ListingUsers
		for SeedboxUser in $UsersList; do
			SeedUserMail="`Func_SQL_Command 'SELECT' 'MySB_db' 'users_email' 'users' "users_ident = '$SeedboxUser'"`"
			
			if [ "$UserToIgnore" != "$SeedboxUser" ]; then	
				SendMail "$Global_Subject_MonthlyPayment" "${SeedboxUser}" "new_user" "Changing Monthly"
			fi
		done
	fi
}

#### Get ruTorrent Trackers
GetRutorrentTrackers() {
	FnAllEngines=$(ls -1r $RutorrentPluginsDir/extsearch/engines/)

	for FnEngine in $FnAllEngines; do
		Tracker=`cat $RutorrentPluginsDir/extsearch/engines/$FnEngine | grep "\$url" | grep "\=" | grep "http" | head -1 | sed 's/public//g;' | awk '{ print $3 }' | cut -d "/" -f 3 | cut -d "'" -f 1`
		if [ ! -z "$Tracker" ]; then
			AddTracker $Tracker "rutorrent"
		fi
		unset Tracker
	done

	unset FnAllEngines
}

#### Get Users Trackers
GetUsersTrackers() {
	FnUsersTrackers="`Func_SQL_Command 'SELECT' 'MySB_db' 'tracker' 'trackers_list' \"origin = 'users'\"`"
	for FnTracker in $FnUsersTrackers; do
		if [ ! -z "$FnTracker" ]; then
			AddTracker $FnTracker "users"
		fi
	done
	unset FnUsersTrackers
}

#### Add new trackers
AddTracker() {
	Tracker=$1
	Origin=$2

	if [ ! -z "$Tracker" ]; then
		PART1="`echo ${Tracker} | cut -d "." -f 1`"
		PART2="`echo ${Tracker} | cut -d "." -f 2`"
		PART3="`echo ${Tracker} | cut -d "." -f 3`"

		if [ -z "$PART3" ]; then
			TrackerDomain="`echo $PART1`.`echo $PART2`"
		else
			TrackerDomain="`echo $PART2`.`echo $PART3`"
		fi
		unset PART1 PART2 PART3

		if [ ! -z "$TrackerDomain" ]; then
			DomainIPv4="$(nslookup $TrackerDomain | grep 'Address:' | awk '{ print $2 }' | tail -n +2)"
			if [ ! -z "$DomainIPv4" ] && [ "$DomainIPv4" != "" ] && [ "$DomainIPv4" != "0.0.0.0" ] && [ "$DomainIPv4" != "127.0.0.1" ]; then
				IfExist="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_trackers_list' 'trackers_list' "tracker_domain = '$TrackerDomain'"`"
				if [ -z $IfExist ]; then
					log_daemon_msg "Add tracker domain : $TrackerDomain"
					Func_SQL_Command 'INSERT' 'MySB_db' 'trackers_list' "tracker,tracker_domain,origin" "\"$TrackerDomain\",\"$TrackerDomain\",\"$Origin\""
					StatusLSB
				fi

				TrackerIPv4="$(nslookup tracker.$TrackerDomain | grep 'Address:' | awk '{ print $2 }' | tail -n +2)"
			else
				IfExist="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_trackers_list' 'trackers_list' "tracker_domain = '$TrackerDomain'"`"
				if [ ! -z $IfExist ]; then
					log_daemon_msg "Delete tracker domain : $TrackerDomain"
					Func_SQL_Command 'DELETE' 'MySB_db' 'trackers_list' "tracker_domain = '$TrackerDomain'"
					StatusLSB
				fi
			fi

			if [ ! -z "$TrackerIPv4" ] && [ "$TrackerIPv4" != "" ] && [ "$TrackerIPv4" != "0.0.0.0" ] && [ "$TrackerIPv4" != "127.0.0.1" ]; then
				TrackerIPv4="`echo $TrackerIPv4 | sed -e 's/^ //g;' | sed 's/\s+$//'`"
				TrackersListID="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_trackers_list' 'trackers_list' "tracker_domain = '$TrackerDomain'"`"

				if [ ! -z "$TrackersListID" ] && [ $TrackersListID -gt 0 ]; then
					log_daemon_msg "Update trackers IPv4 for 'tracker.$TrackerDomain' --> '$TrackerIPv4'"
					# Cleaning
					ListIPv4="`Func_SQL_Command 'SELECT' 'MySB_db' 'ipv4' 'trackers_list_ipv4' "id_trackers_list = '$TrackersListID'"`"
					for IPv4 in $ListIPv4; do
						SEARCH="`echo "$TrackerIPv4" | grep "$IPv4"`"
						if [ -z "$SEARCH" ]; then
							Func_SQL_Command 'DELETE' 'MySB_db' 'trackers_list_ipv4' "ipv4 = '$IPv4' AND id_trackers_list = '$TrackersListID'"
						fi
					done
					unset ListIPv4 IPv4

					# Add
					for IPv4 in $TrackerIPv4; do
						IfExist="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_trackers_list_ipv4' 'trackers_list_ipv4' "id_trackers_list = '$TrackersListID' AND ipv4 = '$IPv4'"`"
						if [ -z $IfExist ]; then
							Func_SQL_Command 'INSERT' 'MySB_db' 'trackers_list_ipv4' "id_trackers_list,ipv4" "\"$TrackersListID\",\"$IPv4\""
						fi
					done
					unset IPv4 TrackerIPv4
					Func_SQL_Command 'UPDATE' 'MySB_db' 'trackers_list' "tracker = 'tracker.$TrackerDomain'" "tracker_domain = '$TrackerDomain'"
					StatusLSB
				fi
			else
				if [ ! -z "$DomainIPv4" ] && [ "$DomainIPv4" != "0.0.0.0" ] && [ "$DomainIPv4" != "127.0.0.1" ]; then
					DomainIPv4="`echo $DomainIPv4 | sed -e 's/^ //g;' | sed 's/\s+$//'`"
					TrackersListID="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_trackers_list' 'trackers_list' "tracker_domain = '$TrackerDomain'"`"

					if [ ! -z "$TrackersListID" ] && [ $TrackersListID -gt 0 ]; then
						log_daemon_msg "Update trackers IPv4 for '$TrackerDomain' --> '$DomainIPv4'"
						# Cleaning
						ListIPv4="`Func_SQL_Command 'SELECT' 'MySB_db' 'ipv4' 'trackers_list_ipv4' \"id_trackers_list = '$TrackersListID'\"`"
						for IPv4 in $ListIPv4; do
							SEARCH="`echo "$DomainIPv4" | grep "$IPv4"`"
							if [ -z "$SEARCH" ]; then
								Func_SQL_Command 'DELETE' 'MySB_db' 'trackers_list_ipv4' "ipv4 = '$IPv4' AND id_trackers_list = '$TrackersListID'"
							fi
						done
						unset ListIPv4 IPv4
						# Add
						for IPv4 in $DomainIPv4; do
							IfExist="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_trackers_list_ipv4' 'trackers_list_ipv4' "id_trackers_list = '$TrackersListID' AND ipv4 = '$IPv4'"`"
							if [ -z $IfExist ]; then
								Func_SQL_Command 'INSERT' 'MySB_db' 'trackers_list_ipv4' "id_trackers_list,ipv4" "\"$TrackersListID\",\"$IPv4\""
							fi
						done
						unset IPv4 DomainIPv4
						Func_SQL_Command 'UPDATE' 'MySB_db' 'trackers_list' "tracker = '$TrackerDomain'" "tracker_domain = '$TrackerDomain'"
						StatusLSB
					fi
				fi
			fi

			unset TrackerDomain
		fi
	fi
}

#### Script Invocation
ScriptInvoke() {
	#### Use 'source' OR 'bash' OR 'screen' ?
	METHOD=$1

	#### Script to invoke
	MYSCRIPT=$2
	IFS=$'/'; i=0; for var in $MYSCRIPT; do (( i++ )); done; unset IFS
	SCRIPT="`echo $MYSCRIPT | cut -d '/' -f $i`"

	#### Arguments
	Arguments=""
	args=("$@")
	for ((i=2; i < $#; i++)) {
		Arguments="$Arguments ${args[$i]}"
	}
	Arguments="`echo $Arguments | sed -e 's/^ //g;' | sed -e 's/^ //g;'`"

	#### Start invovation
	case "$METHOD" in
		"source"|"bash")
			#### Prepare our script
			# vars & funcs
			echo "source $MySB_InstallDir/inc/vars" > $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			# copy it
			cat $MYSCRIPT >> $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			# delete lign start with comments
			sed -i '/^#/d' $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			#delete includes before and after (on top and bottom of every script)
			sed -i '/includes_before/d' $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			sed -i '/includes_after/d' $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked
			# Language
			LoadLanguage "$SCRIPT"

			$METHOD $MySB_InstallDir/temp/${ScriptName}_${SCRIPT}.invoked $Arguments
		;;
		"ScreenSTD"|"ScreenWAIT"|"InQueue")
			screen -dmS ${ScriptName}_${SCRIPT} /bin/bash $MYSCRIPT $Arguments;

			# Possibilities:
			# 	ScreenSTD:	Waiting silently
			# 	ScreenWAIT:	Waiting point to point
			# 	InQueue:	No waiting...
			case "$METHOD" in
				"ScreenSTD")
					WaitingSTD ${ScriptName}_${SCRIPT}
				;;
				"ScreenWAIT")
					WaitingScreen ${ScriptName}_${SCRIPT}
				;;
			esac
		;;
	esac
}

#### Manage directories, files and rights
ManageDirectoriesAndFiles() {
	source $MySB_InstallDir/inc/funcs_by_script/funcs_MySB_CreateUser

	#### Create missing directories
	# Root Directories
	if [ ! -d $MySB_InstallDir/db ]; then mkdir $MySB_InstallDir/db; fi
	if [ ! -d $MySB_InstallDir/files ]; then mkdir $MySB_InstallDir/files; fi
	if [ ! -d $MySB_InstallDir/logs/archives ]; then mkdir -p $MySB_InstallDir/logs/archives; fi
	if [ ! -d $MySB_InstallDir/sources ]; then mkdir $MySB_InstallDir/sources; fi
	if [ ! -d $MySB_InstallDir/ssl ]; then mkdir $MySB_InstallDir/ssl; fi
	if [ ! -d $MySB_InstallDir/temp ]; then mkdir $MySB_InstallDir/temp; fi
	if [ ! -d $MySB_InstallDir/web/openvpn ]; then mkdir -p $MySB_InstallDir/web/openvpn; fi
	# Log directories
	if [ ! -d $MySB_InstallDir/web/logs ]; then mkdir $MySB_InstallDir/web/logs; fi	
	if [ ! -d $MySB_InstallDir/web/logs/bin ]; then mkdir $MySB_InstallDir/web/logs/bin; fi
	if [ ! -d $MySB_InstallDir/web/logs/install ]; then mkdir $MySB_InstallDir/web/logs/install; fi
	if [ ! -d $MySB_InstallDir/web/logs/nginx ]; then mkdir $MySB_InstallDir/web/logs/nginx; fi	
	if [ ! -d $MySB_InstallDir/web/logs/scripts ]; then mkdir $MySB_InstallDir/web/logs/scripts; fi
	if [ ! -d $MySB_InstallDir/web/logs/security ]; then mkdir $MySB_InstallDir/web/logs/security; fi
	if [ ! -d $MySB_InstallDir/web/logs/upgrade ]; then mkdir $MySB_InstallDir/web/logs/upgrade; fi
	if [ ! -d $MySB_InstallDir/web/logs/system ]; then mkdir $MySB_InstallDir/web/logs/system; fi
	# Local mirrors
	if [ ! -d $MySB_InstallDir/files/apt_mirrors/mirrors ]; then mkdir -p $MySB_InstallDir/files/apt_mirrors/mirrors ; fi
	if [ ! -d $MySB_InstallDir/files/apt_mirrors/skel ]; then mkdir $MySB_InstallDir/files/apt_mirrors/skel ; fi
	if [ ! -d $MySB_InstallDir/files/apt_mirrors/var ]; then mkdir $MySB_InstallDir/files/apt_mirrors/var ; fi

	#### Convert with dos2unix
	dos2unix $MySB_InstallDir/* &> /dev/null
	dos2unix $MySB_InstallDir/bin/* &> /dev/null
	dos2unix $MySB_InstallDir/files/* &> /dev/null
	dos2unix $MySB_InstallDir/inc/* &> /dev/null
	dos2unix $MySB_InstallDir/install/* &> /dev/null
	dos2unix $MySB_InstallDir/scripts/* &> /dev/null
	dos2unix $MySB_InstallDir/templates/* &> /dev/null
	dos2unix $MySB_InstallDir/upgrade/* &> /dev/null	
	
	#### Change rights
	# $MySB_InstallDir/
	chmod -R 0700 $MySB_InstallDir
	chmod 0755 $MySB_InstallDir
	chown -R root:root $MySB_InstallDir
	# $MySB_InstallDir/db
	chmod 0770 $MySB_InstallDir/db
	chmod 0660 $MySB_InstallDir/db/* &> /dev/null
	chown -R root:www-data $MySB_InstallDir/db
	# $MySB_InstallDir/ssl
	chmod 0644 $MySB_InstallDir/ssl/*.cert &> /dev/null
	# $MySB_InstallDir/install
	chmod -R 0755 $MySB_InstallDir/install
	# $MySB_InstallDir/temp
	chown root:www-data $MySB_InstallDir/temp
	chmod 0760 $MySB_InstallDir/temp
	# $MySB_InstallDir/files/apt_mirrors
	chown apt-mirror:apt-mirror $MySB_InstallDir/files/apt_mirrors
	# $MySB_InstallDir/web
	chown -R root:www-data $MySB_InstallDir/web
	chown root:root $MySB_InstallDir/web
	chmod -R 0640 $MySB_InstallDir/web
	find $MySB_InstallDir/web -type d -iname "*" -print0 | xargs -I {} -0 chmod 0750 {}
	chmod 0755 $MySB_InstallDir/web
	# $MySB_InstallDir/web/openvpn
	if [ -d $MySB_InstallDir/web/openvpn ]; then chmod 0770 $MySB_InstallDir/web/openvpn; fi
	# /home/MySB_share
	chown root:MySB_users /home/MySB_share
	chmod 0770 /home/MySB_share

	# Config files
	if [ -f /etc/MySB/config ]; then
		chown root:root /etc/MySB/config
		chmod 0640 /etc/MySB/config
	fi
	if [ -f /etc/MySB/config_db ]; then
		chown root:root /etc/MySB/config_db
		chmod 0640 /etc/MySB/config_db
	fi
	if [ -f /etc/MySB/config.php ]; then
		chmod 0640 /etc/MySB/config.php
		chown root:www-data /etc/MySB/config.php
	fi

	# LoadAvg
	if [ ! -z "$LoadAvgDir" ]; then
		if [ -f $LoadAvgDir/configure ]; then chmod 0640 $LoadAvgDir/configure; fi
		if [ ! -d $LoadAvgDir/logs ] && [ -d $LoadAvgDir ]; then mkdir $LoadAvgDir/logs; fi
		if [ -d $LoadAvgDir/logs ]; then chmod 0777 $LoadAvgDir/logs; fi
	fi

	# ownCloud
	if [ ! -z "$ownCloudDir" ] && [ -d $ownCloudDir ]; then
		find $ownCloudDir/ -type f -print0 | xargs -0 chmod 0640
		find $ownCloudDir/ -type d -print0 | xargs -0 chmod 0750
		chmod 0750 $ownCloudDir/occ
		chown -R root:www-data $ownCloudDir/
		chown -R www-data:www-data $ownCloudDir/apps/
		chown -R www-data:www-data $ownCloudDir/config/
		chown -R www-data:www-data $ownCloudDir/themes/
		if [ ! -d /home/owncloud ]; then mkdir -p /home/owncloud; fi
		if [ ! -f /home/owncloud/.ocdata ]; then touch /home/owncloud/.ocdata; fi
		if [ ! -f /home/owncloud/index.html ]; then touch /home/owncloud/index.html; fi
		if [ ! -d /home/owncloud/admin/files ]; then mkdir -p /home/owncloud/admin/files; fi
		if [ -f /home/owncloud/mount.json ]; then chmod 0640 /home/owncloud/mount.json; fi
		chown -R www-data:www-data /home/owncloud
		chown www-data:root /home/owncloud
	fi

	# ruTorrent Global Config
	if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentDir ]; then
		ruTorrentGlobalConfigs
	fi

	# Users
	if [ "$IsReady_MySB_DB" == "YES" ]; then
		ListingUsers
		if [ ! -z "$UsersList" ]; then
			for FnUser in $UsersList; do
				if [ ! -z "`getent passwd $FnUser`" ]; then
					# Home
					ManageUserHomeDir "$FnUser"

					# ruTorrent
					if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentPluginsDir ]; then
						ruTorrentUsersConfigs "$FnUser"
					fi

					# Seedbox-Manager
					ManagerUsersConfigs "$FnUser"

					# Cakebox-Light
					CakeboxUsersConfigs "$FnUser"
				fi
			done
		fi
	fi

	# ruTorrent
	if [ ! -z "$RutorrentDir" ] && [ -d $RutorrentDir ]; then
		if [ -d $RutorrentDir ]; then chmod -R 0755 $RutorrentDir; fi
		if [ -d $RutorrentDir ]; then chown -R www-data:www-data $RutorrentDir; fi
		if [ -d $RutorrentDir/share ]; then
			find $RutorrentDir/share/ -type d -exec chmod 0777 {} \;
			find $RutorrentDir/share/ -type f -exec chmod 0666 {} \;
		fi
		if [ -d $RutorrentPluginsDir/fileupload/scripts/upload ]; then chmod 0775 $RutorrentPluginsDir/fileupload/scripts/upload; fi
	fi

	# Seedbox-Manager
	if [ ! -z "$ManagerDir" ] && [ -d $ManagerDir ]; then
		if [ -d $ManagerDir ]; then chown -R www-data:www-data $ManagerDir; fi
		if [ -f $ManagerDir/reboot-rtorrent ]; then
			chown root:root $ManagerDir/reboot-rtorrent
			chmod 4755 $ManagerDir/reboot-rtorrent
		fi
	fi
}

##################### LAST LINE ######################################