# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
funcs_tools=1
##################### FIRST LINE #####################################

#### Count down
CountDown() {
	for ((i = $1; i >= 0; i -= 1)); do
		echo -n " $i"
		sleep 1
	done
	echo
}

#### Create user listing
ListingUsers() {
	UsersList="`Func_SQL_Command 'SELECT' 'MySB_db' 'users_ident' 'users' '1'`"
}

#### Count Users
CountingUsers() {
	TotalUsers="`Func_SQL_Command 'SELECT' 'MySB_db' 'count(*)' 'users'`"
}

#### Check if service is started
GetPid() {
	PID=""

	case "$1" in
		"fail2ban")
			if [ -f /var/run/fail2ban/fail2ban.pid ]; then
				PID="`cat /var/run/fail2ban/fail2ban.pid`"
			fi
		;;
		"webmin")
			if [ -f /var/webmin/miniserv.pid ]; then
				PID="`cat /var/webmin/miniserv.pid`"
			fi
		;;
		"ssh")
			PID="`pidof sshd`"
		;;
		"pglcmd")
			PID="`pidof pgld`"
		;;
		"bind9")
			PID="`pidof named`"
		;;
		"mysql")
			PID="`pidof mysqld`"
		;;
		*)
			PID="`pidof $1`"
		;;
	esac

	if [ ! -z "$PID" ]; then
		return 0
	else
		return 1
	fi
}

#### Check status for screen
StatusSTD() {
	if [ $? -gt 0 ]; then
		echo -e "$Global_Failed"
		echo ""
		echo -e "$Global_Error_StatusSTD"
		EndingScript 1
	else
		echo -e "$Global_Done"
	fi
}

#### Check status for LSB
StatusLSB() {
	if [ $? -gt 0 ]; then
		if [ ! -z "$1" ]; then
			if [ $1 -gt 0 ]; then
				log_end_msg 1
			else
				log_end_msg 0
			fi
		else
			log_end_msg 1
		fi
	else
		log_end_msg 0
	fi
}

#### Waiting in install
WaitingScreen() {	
	if [ -f $MySB_InstallDir/logs/$1.err ]; then
		err=`du $MySB_InstallDir/logs/$1.err | cut -f1`
	fi

	while [ ! "`screen -ls | grep $1`" = "" ]; do
		if [ -f $MySB_InstallDir/logs/$1.err ]; then
			if [ ! "`du $MySB_InstallDir/logs/$1.err | cut -f1`" = "$err" ]; then
				err=`du $MySB_InstallDir/logs/$1.err | cut -f1`
				echo -e -n "${CRED}.$CEND"
			else
				echo -n "."
			fi
		else
			echo -n "."
		fi
		sleep 1
	done
}

#### Waiting standard
WaitingSTD() {
	while [ ! "`screen -ls | grep $1`" = "" ]; do	
		sleep 1
	done
}

#### Password generator
GenPassword() {
	local l=$1
	[ "$l" == "" ] && l=16
	tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}

#### Check if is a correct IP
ValidateIP() {
	Value=""
	
	if [ ! -z "$1" ]; then
		Value=`printf $1 | awk -F'.' 'NF==4 && $1>0 && $1!=127 && $1<256 && $2<256 && $3<256 && $4<256 && !/\.\./'`
	fi
	
	echo $Value
}

#### Check if mail syntax is good
ValidateMail() {
	#Regexp
	regex="^[a-z0-9!#\$%&'*+/=?^_\`{|}~-]+(\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*@([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]([a-z0-9-]*[a-z0-9])?\$"

	#Vars
	checkdig=0;
	checkreg=0;
	address=$1;
	maildomain=`echo $address | awk 'BEGIN { FS = "@" } ; { print $2 }'`;

	#Domain Check
	checkdns() {
		echo $maildomain | awk 'BEGIN { FS = "@" } ; { print $2 }' | xargs dig $maildomain +noauthority +noadditional +nostats | grep "ANSWER: 0" 1>/dev/null  || checkdig=1;
	}

	#Regexp
	checkreg() {
		if [[ $address =~ $regex ]]; then
			checkreg=1;
		fi
	}

	#Execute
	checkreg;
	checkdns;

	#Results
	if [ $checkreg == 1 ] && [ $checkdig == 1 ]; then
		echo 1
	else
		echo 0
	fi
}

#### Ending script
EndingScript() {
	if [ -f $(dirname $0)/../inc/includes_after ]; then source $(dirname $0)/../inc/includes_after; fi
	if [ ! -z $2 ]; then
		kill -9 $2
	else
		exit $1
	fi
}

#### Check if a command exist
CheckCommand() {
	type -P $2 > /dev/null
	Value=$?
	
	if [ $Value -gt 0 ]; then # Try WHEREIS, some tools does not have command but are present and can be started
		if [ "`whereis $2 | awk '{ print $2 }'`" == "" ]; then
			case "$1" in
				0)
					return 1
				;;
				1)
					echo "NO"
				;;
			esac
		else
			case "$1" in
				0)
					return 0
				;;
				1)
					echo "YES"
				;;
			esac
		fi
	else
		case "$1" in
			0)
				return $Value
			;;
			1)
				case "$Value" in
					0)
						echo "YES"
					;;
					*)
						echo "NO"
					;;
				esac
			;;
		esac
	fi
}

#### Switch DNS (standard / DNScrypt-proxy)
SwitchDNS() {
	MyCommand="$1"
	MySwitch="$2"

	case "$MyCommand" in
		dnscrypt)
			if CheckCommand 0 dnscrypt-proxy; then
				# resolv.conf
				sed -i '/nameserver/d' /etc/resolv.conf
				echo "nameserver 127.0.0.1" > /etc/resolv.conf
				# BIND with DNScrypt-proxy support (Bind will be restart by DNScrypt-proxy)
				cp $MySB_InstallDir/templates/bind/etc.bind.named.conf.options.tmpl /etc/bind/named.conf.options
				sed -i "s/<SrvIpAddress>/$SrvIpAddress/g;" /etc/bind/named.conf.options
				chmod 0644 /etc/bind/named.conf.options
				chown root:bind /etc/bind/named.conf.options
				Forwarders="`Func_SQL_Command 'SELECT' 'MySB_db' 'forwarder' 'dnscrypt_resolvers' \"forwarder != '' AND is_activated = '1'\"`"
				for Forwarder in $Forwarders; do
					BindForwarders="$BindForwarders $Forwarder port 52;"
				done
				BindForwarders="`echo $BindForwarders | sed -e 's/^ //g;' | sed 's/\s+$//'`"
				NumLign=$(sed -n "/#### MARKER - DoNotDelete ####/=" /etc/bind/named.conf.options)
				(( NumLign++ ))
				sed -i "${NumLign}i\        // DNScrypt-proxy - BoF" /etc/bind/named.conf.options
				(( NumLign++ ))
				sed -i "${NumLign}i\        forwarders { $BindForwarders };" /etc/bind/named.conf.options
				(( NumLign++ ))
				sed -i "${NumLign}i\        forward only;" /etc/bind/named.conf.options
				(( NumLign++ ))
				sed -i "${NumLign}i\        version \"MySB Secured DNS server\";" /etc/bind/named.conf.options
				(( NumLign++ ))
				sed -i "${NumLign}i\        // DNScrypt-proxy - EoF" /etc/bind/named.conf.options
				if [ "$MySwitch" != "no_start" ]; then
					service dnscrypt-proxy restart &> /dev/null
				fi
			fi
		;;
		bind)
			# resolv.conf
			sed -i '/nameserver/d' /etc/resolv.conf
			echo "nameserver 208.67.220.220" >> /etc/resolv.conf
			echo "nameserver 8.8.8.8" >> /etc/resolv.conf
			echo "nameserver 4.2.2.1" >> /etc/resolv.conf
			echo "nameserver 208.67.222.222" >> /etc/resolv.conf
			echo "nameserver 8.8.4.4" >> /etc/resolv.conf
			echo "nameserver 4.2.2.2" >> /etc/resolv.conf
			echo "nameserver 4.2.2.3" >> /etc/resolv.conf
			echo "nameserver 4.2.2.4" >> /etc/resolv.conf
			echo "nameserver 4.2.2.5" >> /etc/resolv.conf
			echo "nameserver 4.2.2.6" >> /etc/resolv.conf
			# BIND delete DNScrypt-proxy support
			if CheckCommand 0 bind9; then
				sed -i '/forwarders/d' /etc/bind/named.conf.options
				sed -i '/forward only;/d' /etc/bind/named.conf.options
				sed -i '/version/d' /etc/bind/named.conf.options
				sed -i '/DNScrypt-proxy/d' /etc/bind/named.conf.options
				service bind9 restart &> /dev/null
			fi
		;;
	esac
}

#### Delete directory
DeleteDirectory() {
	Verbose="$1"
	Directory="${2%/}"

	if [ "$Verbose" -eq 1 ]; then
		Opts="-vrf"
	else
		Opts="-rf"
	fi
	
	if [ -d $Directory ] && [ "$Directory" != "$MySB_InstallDir" ]; then
		rm $Opts $Directory
	fi
}

#### Cleaning MySB before compress
CleanBeforeUpgrade() {
	# Clean '.git' directory
	cd $MySB_InstallDir/
	git branch | grep -v "$MySB_CurrentVersion" | xargs git branch -D
	git repack -a -d --depth=250 --window=250

	# Clean 'sources' directory
	if [ -d $MySB_InstallDir/sources ]; then rm -vrf $MySB_InstallDir/sources/*; fi
	# Clean 'temp' directory
	if [ -d $MySB_InstallDir/temp ]; then rm -vrf $MySB_InstallDir/temp/*; fi
	# Clean 'db' directory
	if [ -d $MySB_InstallDir/db ]; then
		rm -vrf $MySB_InstallDir/db/*.old
		rm -vrf $MySB_InstallDir/db/*.dump.sql
	fi	
}

##################### LAST LINE ######################################
