# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### 0 - Includes
if [ -f /etc/MySB/config ] && [ -z "$MySB_InstallDir" ]; then
	source /etc/MySB/config
fi
if [ ! -z "$MySB_InstallDir" ] && [ -f $MySB_InstallDir/inc/funcs ] && [ -z $Funcs ]; then
	source $MySB_InstallDir/inc/funcs
fi
if [ -f /lib/lsb/init-functions ] && [ -z "`command -v start_daemon`" ]; then
	source /lib/lsb/init-functions
fi
if [ -f /root/.bash_aliases ]; then
	source /root/.bash_aliases
fi

#### 1 - Add in 'commands' table to prevent simultaneous calls
if [ ! -z "$ScriptName" ]; then
	case "$ScriptName" in
		MySB_UpgradeSystem)
			if [ "$IsInstalled_DNScrypt" == "YES" ] && [ -f $MySB_InstallDir/templates/init/etc.init.dnscrypt-proxy.tmpl ]; then
				install -g root -o root -m 0755 $MySB_InstallDir/templates/init/etc.init.dnscrypt-proxy.tmpl /etc/init.d/dnscrypt-proxy
			fi
		;;
		MySB_SecurityRules)
			Check="`AddSecurityInQueue 'check' 'MySB_SecurityRules'`"
			# If arguments in database are different than currents
			if [ "$Check" != "`echo $@ $$`" ]; then
				# We will wait
				while [ ! -z "$Check" ]; do
					sleep 5
					Check="`AddSecurityInQueue 'check' 'MySB_SecurityRules'`"
				done

				AddSecurityInQueue 'add' 'MySB_SecurityRules' "$@ $$"
			fi
		;;
	esac
fi

#### 2 - Colors
CSI="\033["
CEND="${CSI}0m"
CBLACK="${CSI}0;30m"
CRED="${CSI}1;31m"
CGREEN="${CSI}1;32m"
CYELLOW="${CSI}1;33m"
CBLUE="${CSI}1;34m"

#### 3 - Databases
MySB_DB=$MySB_InstallDir"/db/MySB.sq3"
Wolf_DB=$MySB_InstallDir"/db/Wolf.sq3"
Sync_DB=$MySB_InstallDir"/db/Sync.sq3"
IsReady_MySB_DB="NO"
if CheckCommand 0 mysql || CheckCommand 0 sqlite3; then
	if [ "`ls -a /var/lib/mysql/MySB_db/ 2> /dev/null | sed -e "/\.$/d" | wc -l`" -gt 1 ] || [ -s $MySB_DB ]; then
		if CheckCommand 0 mysql; then
			if ! GetPid mysql; then
				service mysql start > /dev/null
			fi
			if GetPid mysql; then
				IsReady_MySB_DB="YES"
			fi
		fi
	fi
fi

#### 4 - System
if [ "$0" != "-bash" ]; then
	ScriptName=$(basename $0)
	DirName=$(dirname $0)
fi
MySB_InstallDirEscaped="`echo $MySB_InstallDir | sed s,/,\\\\\\\\\\/,g`"
PROCESSOR="`cat /proc/cpuinfo | grep processor | wc -l`"
MEMORY="`free -m | grep Mem | awk '{ print $2 }'`"
DEBIAN_Ver="`lsb_release -rs | cut -d '.' -f 1`"
DEBIAN_VERSION="`lsb_release -cs`"
IFPVEKERNEL="`uname -r | grep pve`"
FILESYSTEMTYPE="`df -T "/home/" | awk '{print $2}' | tail -n1`"
ARCH="`dpkg --print-architecture`"
WGET="/usr/local/bin/wget"
type -P $WGET > /dev/null
if [ $? -gt 0 ]; then
	WGET="/usr/bin/wget"
fi

#### 5 - All Variables
if [ ! -z "$MySB_InstallDir" ] && [ "$IsReady_MySB_DB" == "YES" ]; then
	########## USED FOR DATABASE UPGRADE - BoF ##########
	case "$ScriptName" in
		From_*)
			if [ "`cat $MySB_InstallDir/version`" == "v3.5" ] && [ -f $MySB_InstallDir/upgrade/MySQL.bsh ] && [ ! -f /tmp/MySQL.bsh.log ]; then
				source $MySB_InstallDir/upgrade/MySQL.bsh > /tmp/MySQL.bsh.log
			fi
		;;
	esac
	########## USED FOR DATABASE UPGRADE - EoF ##########

	### ----- System info
	## Table System
	SystemValues="`Func_SQL_Command 'SELECT' 'MySB_db' 'mysb_version,hostname,ipv4,primary_inet,timezone,mysb_user,mysb_password,server_provider,ip_restriction,dnscrypt,rt_model,rt_tva,rt_global_cost,rt_cost_tva' 'system' "id_system = '1'"`"
	MySB_CurrentVersion="`echo $SystemValues | awk '{split($0,a,"|"); print a[1]}'`"
	HostNameFQDN="`echo $SystemValues | awk '{split($0,a,"|"); print a[2]}'`"
	SrvIpAddress="`echo $SystemValues | awk '{split($0,a,"|"); print a[3]}'`"
	PrimaryInet="`echo $SystemValues | awk '{split($0,a,"|"); print a[4]}'`"
	TimeZone="`echo $SystemValues | awk '{split($0,a,"|"); print a[5]}'`"
	MySB_User="`echo $SystemValues | awk '{split($0,a,"|"); print a[6]}'`"
	MySB_Password="`echo $SystemValues | awk '{split($0,a,"|"); print a[7]}'`"
	ServerProvider="`echo $SystemValues | awk '{split($0,a,"|"); print a[8]}'`"
	IpRestriction="`echo $SystemValues | awk '{split($0,a,"|"); print a[9]}' | sed 's/0/NO/g;' | sed 's/1/YES/g;'`"
	DNScrypt_Switch="`echo $SystemValues | awk '{split($0,a,"|"); print a[10]}'`"
	### ----- Renting infos
	RentingModel="`echo $SystemValues | awk '{split($0,a,"|"); print a[11]}'`"
	RentingTVA="`echo $SystemValues | awk '{split($0,a,"|"); print a[12]}'`"
	RentingGlobalCost="`echo $SystemValues | awk '{split($0,a,"|"); print a[13]}'`"
	RentingCostTva="`echo $SystemValues | awk '{split($0,a,"|"); print a[14]}'`"
	### ----- Renting infos
	unset SystemValues

	## Table Services
	# VSFTPd
	SystemValues_VSFTPd="`Func_SQL_Command 'SELECT' 'MySB_db' 'port_tcp1,port_tcp2,port_tcp3' 'services' "serv_name = 'VSFTPd'"`"
	Port_FTP="`echo $SystemValues_VSFTPd | awk '{split($0,a,"|"); print a[1]}'`"
	Port_FTP_Data="`echo $SystemValues_VSFTPd | awk '{split($0,a,"|"); print a[2]}'`"
	Port_FTP_Passive="`echo $SystemValues_VSFTPd | awk '{split($0,a,"|"); print a[3]}'`"
	unset SystemValues_VSFTPd
	# NginX
	SystemValues_NginX="`Func_SQL_Command 'SELECT' 'MySB_db' 'port_tcp1,port_tcp2' 'services' "serv_name = 'NginX'"`"
	Port_HTTPS="`echo $SystemValues_NginX | awk '{split($0,a,"|"); print a[1]}'`"
	Port_HTTP="`echo $SystemValues_NginX | awk '{split($0,a,"|"); print a[2]}'`"
	unset SystemValues_NginX
	# SSH
	Port_SSH="`Func_SQL_Command 'SELECT' 'MySB_db' 'port_tcp1' 'services' "serv_name = 'SSH'"`"

	if [ -z "$HostNameFQDN" ]; then
		HostNameFQDN="`hostname -f`"
	fi

	if [ -z "$PrimaryInet" ]; then
		PrimaryInet="`ip route get 8.8.8.8 | grep 8.8.8.8 | awk '{ print $5 }'`"
	fi

	if [ -z "$SrvIpAddress" ]; then
		UrlCheckList="ipv4.icanhazip.com whatismyip.akamai.com ifconfig.me/ip checkip.dyndns.com"
		for UrlCheck in $UrlCheckList; do
			case "$UrlCheck" in
				'checkip.dyndns.com')
					SrvIpAddress_Ext="`curl --silent $UrlCheck | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'`"
				;;
				*)
					SrvIpAddress_Ext="`curl --silent $UrlCheck`"
				;;
			esac
			if [ ! -z "$SrvIpAddress_Ext" ]; then
				break
			fi
		done
		SrvIpAddress_Loc="`ifconfig $PrimaryInet | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p' | grep -v 127 | head -n 1`"
		if [ -z "$SrvIpAddress_Loc" ]; then
			SrvIpAddress_Loc="`ifconfig $PrimaryInet | sed -n 's/.*inet adr:\([0-9.]\+\)\s.*/\1/p' | grep -v 127 | head -n 1`"
		fi
		# Compare IP address (external view) with real IP address (local view)
		if [ ! -z "$SrvIpAddress_Loc" ] && [ "$SrvIpAddress_Ext" != "$SrvIpAddress_Loc" ]; then
			SrvIpAddress="$SrvIpAddress_Loc"
		else
			SrvIpAddress="$SrvIpAddress_Ext"
		fi
	fi

	if [ -f /etc/timezone ] && [ -z "$TimeZone" ]; then
		TimeZone="`cat /etc/timezone`"
	else
		TimeZone="Europe/Paris"
	fi
	### ----- System info

	### ----- Main user info
	## Table users
	UsersValues="`Func_SQL_Command 'SELECT' 'MySB_db' 'users_email,users_ident,users_passwd,id_users,language' 'users' "admin = '1'"`"
	MainUserEmail="`echo $UsersValues | awk '{split($0,a,"|"); print a[1]}'`"
	MainUser="`echo $UsersValues | awk '{split($0,a,"|"); print a[2]}'`"
	MainUserPassword="`echo $UsersValues | awk '{split($0,a,"|"); print a[3]}'`"
	MainUserId="`echo $UsersValues | awk '{split($0,a,"|"); print a[4]}'`"
	if [ -z "$EnvLang" ]; then
		EnvLang="`echo $UsersValues | awk '{split($0,a,"|"); print a[5]}'`"
	fi
	unset UsersValues

	unset MainUserIPs Temp
	Temp="`Func_SQL_Command 'SELECT' 'MySB_db' 'ipv4' 'users_addresses' "is_active = '1' AND id_users = '$MainUserId'" | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	if [ "$IpRestriction" == "YES" ]; then
		for ip in $Temp; do
			MainUserIPs="$MainUserIPs $ip/32"
		done
	else
		MainUserIPs="0/0"
	fi
	MainUserIPs=$(echo "$MainUserIPs"|tr " " "\n"|sort|uniq|tr "\n" " ") # sort as uniq
	### ----- Main user info

	### ----- Normal users info
	unset SeedboxUsersIPs Temp
	Temp="`Func_SQL_Command 'SELECT' 'MySB_db' 'ipv4' 'users_addresses' "is_active = '1' AND id_users != '$MainUserId'" | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	if [ "$IpRestriction" == "YES" ]; then
		for ip in $Temp; do
			SeedboxUsersIPs="${SeedboxUsersIPs} $ip/32"
		done
	else
		SeedboxUsersIPs="0/0"
	fi
	SeedboxUsersIPs=$(echo "$SeedboxUsersIPs"|tr " " "\n"|sort|uniq|tr "\n" " ") # sort as uniq
	### ----- Normal users info

	### ----- Services info
	ROW="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_services,to_install' 'services' "used = '1'"`"
	for MyRow in $ROW; do
		Id_Services="`echo $MyRow | awk '{split($0,a,"|"); print a[1]}'`"
		To_Install="`echo $MyRow | awk '{split($0,a,"|"); print a[2]}'`"
		case "$Id_Services" in
			1)	ToInstall_Manager="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			2)	ToInstall_Cakebox="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			3)	ToInstall_PlexMedia="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			4)	ToInstall_Webmin="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			5)	ToInstall_OpenVPN="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			6)	ToInstall_LogWatch="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			7)	ToInstall_Fail2Ban="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			8)	ToInstall_PeerGuardian="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			9)	ToInstall_Blocklist="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			10)	ToInstall_DNScrypt="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			18)	ToInstall_Samba="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			19)	ToInstall_NFS="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			24)	ToInstall_ownCloud="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			25)	ToInstall_LetsEncrypt="`echo $To_Install | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
		esac
	done

	ROW="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_services,is_installed' 'services' "used = '1'"`"
	for MyRow in $ROW; do
		Id_Services="`echo $MyRow | awk '{split($0,a,"|"); print a[1]}'`"
		Is_Installed="`echo $MyRow | awk '{split($0,a,"|"); print a[2]}'`"
		case "$Id_Services" in
			1)	IsInstalled_Manager="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			2)	IsInstalled_Cakebox="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			3)	IsInstalled_PlexMedia="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			4)	IsInstalled_Webmin="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			5)	IsInstalled_OpenVPN="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			6)	IsInstalled_LogWatch="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			7)	IsInstalled_Fail2Ban="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			8)	IsInstalled_PeerGuardian="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			9)	IsInstalled_Blocklist="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			10)	IsInstalled_DNScrypt="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			18)	IsInstalled_Samba="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			19)	IsInstalled_NFS="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			24)	IsInstalled_ownCloud="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
			25)	IsInstalled_LetsEncrypt="`echo $Is_Installed | sed 's/0/NO/g;' | sed 's/1/YES/g;'`";;
		esac
	done

	case "$ToInstall_PeerGuardian" in
		"YES")
			MySB_PeerBlock="PeerGuardian"
		;;
		"NO")
			case "$IsInstalled_PeerGuardian" in
				"YES")
					MySB_PeerBlock="PeerGuardian"
				;;
				"NO")
					case "$ToInstall_Blocklist" in
						"YES")
							MySB_PeerBlock="rTorrent"
						;;
						"NO")
							case "$IsInstalled_Blocklist" in
								"YES")
									MySB_PeerBlock="rTorrent"
								;;
								"NO")
									MySB_PeerBlock="$Global_None"
								;;
							esac
						;;
					esac
				;;
			esac
		;;
	esac

	# Webmin port
	Ports_Webmin="`Func_SQL_Command 'SELECT' 'MySB_db' 'port_tcp1' 'services' "serv_name = 'Webmin'"`"

	# OpenVPN
	ServicesValues_OpenVPN="`Func_SQL_Command 'SELECT' 'MySB_db' 'port_udp1,port_udp2,port_udp3' 'services' "serv_name = 'OpenVPN'"`"
	Port_OpenVPN_WithGW="`echo $ServicesValues_OpenVPN | awk '{split($0,a,"|"); print a[1]}'`"
	Port_OpenVPN_WithoutGW="`echo $ServicesValues_OpenVPN | awk '{split($0,a,"|"); print a[2]}'`"
	Port_OpenVPN_TAP_WithoutGW="`echo $ServicesValues_OpenVPN | awk '{split($0,a,"|"); print a[3]}'`"
	if [ ! -z "$Port_OpenVPN_WithGW" ]; then	# UDP
		OpenVPN_Proto="udp"
	else										# TCP
		ServicesValues_OpenVPN="`Func_SQL_Command 'SELECT' 'MySB_db' 'port_tcp1,port_tcp2,port_tcp3' 'services' "serv_name = 'OpenVPN'"`"
		Port_OpenVPN_WithGW="`echo $ServicesValues_OpenVPN | awk '{split($0,a,"|"); print a[1]}'`"
		Port_OpenVPN_WithoutGW="`echo $ServicesValues_OpenVPN | awk '{split($0,a,"|"); print a[2]}'`"
		Port_OpenVPN_TAP_WithoutGW="`echo $ServicesValues_OpenVPN | awk '{split($0,a,"|"); print a[3]}'`"
		OpenVPN_Proto="tcp"
	fi
	### ----- Services info

	### ----- White IP addresses
	Fail2banWhiteList="`Func_SQL_Command 'SELECT' 'MySB_db' 'fail2ban_whitelist' 'vars' '1'`"
	VpnIPs="`Func_SQL_Command 'SELECT' 'MySB_db' 'vpn_ip' 'vars' '1' | sed 's/,/ /g;'`"
	### ----- White IP addresses

	### ----- Networks ports (Services ports)
	ServicesValues_Plex="`Func_SQL_Command 'SELECT' 'MySB_db' 'port_tcp1,ports_tcp_list,ports_udp_list' 'services' "serv_name = 'Plex Media Server'"`"
	Ports_PlexMedia="`echo $ServicesValues_Plex | awk '{split($0,a,"|"); print a[1]}' | sed 's/,/ /g;'`"
	Ports_TCP_PlexMedia="`echo $ServicesValues_Plex | awk '{split($0,a,"|"); print a[2]}' | sed 's/,/ /g;'`"
	Ports_UDP_PlexMedia="`echo $ServicesValues_Plex | awk '{split($0,a,"|"); print a[3]}' | sed 's/,/ /g;'`"
	### ----- Networks ports (Services ports)

	### ----- Repositories infos
	ServicesDir="`Func_SQL_Command 'SELECT' 'MySB_db' 'dir' 'repositories' "name = 'ruTorrent' OR name = 'Seedbox-Manager' OR name = 'Cakebox-Light' OR name = 'LoadAvg' OR name = 'ownCloud' ORDER BY id_repositories"`"
	RutorrentDir=$MySB_InstallDir"`echo $ServicesDir | awk '{split($0,a," "); print a[1]}'`"
	ManagerDir=$MySB_InstallDir"`echo $ServicesDir | awk '{split($0,a," "); print a[2]}'`"
	CakeboxDir=$MySB_InstallDir"`echo $ServicesDir | awk '{split($0,a," "); print a[3]}'`"
	LoadAvgDir=$MySB_InstallDir"`echo $ServicesDir | awk '{split($0,a," "); print a[4]}'`"
	ownCloudDir=$MySB_InstallDir"`echo $ServicesDir | awk '{split($0,a," "); print a[5]}'`"	
	RutorrentPluginsDir=$RutorrentDir/plugins
	### ----- Repositories infos
fi

#### 6 - Version for upgrade
if [ -f $MySB_InstallDir/files/current_version ]; then
	source $MySB_InstallDir/files/current_version
fi

#### 7 - Language
if [ -z "$EnvLang" ]; then
	EnvLang="`echo ${LANG:0:2}`"
fi
if [ -f $MySB_InstallDir/inc/lang/$EnvLang/Global.lng ]; then
	source $MySB_InstallDir/inc/lang/$EnvLang/Global.lng
else
	source $MySB_InstallDir/inc/lang/en/Global.lng
fi

LoadLanguage() {
	if [ -z "$1" ]; then
		ScriptLang="$ScriptName"
	else
		ScriptLang="$1"
	fi
	if [ -f $MySB_InstallDir/inc/lang/$EnvLang/$ScriptLang.lng ]; then
		source $MySB_InstallDir/inc/lang/$EnvLang/$ScriptLang.lng
	else
		if [ -f $MySB_InstallDir/inc/lang/en/$ScriptLang.lng ]; then
			source $MySB_InstallDir/inc/lang/en/$ScriptLang.lng
		fi
	fi

	case "$ScriptLang" in
		BulkChanges.bsh|From_*) # Upgrade ?
			if [ -f $MySB_InstallDir/inc/lang/$EnvLang/Upgrade.lng ]; then
				source $MySB_InstallDir/inc/lang/$EnvLang/Upgrade.lng
			else
				source $MySB_InstallDir/inc/lang/en/Upgrade.lng
			fi
		;;
		funcs_MySB_CreateUser)
			if [ -f $MySB_InstallDir/inc/lang/$EnvLang/MySB_CreateUser.lng ]; then
				source $MySB_InstallDir/inc/lang/$EnvLang/MySB_CreateUser.lng
			else
				source $MySB_InstallDir/inc/lang/en/MySB_CreateUser.lng
			fi
		;;
		funcs_GetTrackersCert.bsh)
			if [ -f $MySB_InstallDir/inc/lang/$EnvLang/GetTrackersCert.bsh.lng ]; then
				source $MySB_InstallDir/inc/lang/$EnvLang/GetTrackersCert.bsh.lng
			else
				source $MySB_InstallDir/inc/lang/en/GetTrackersCert.bsh.lng
			fi
		;;
		PeerGuardian)
			if [ -f $MySB_InstallDir/inc/lang/$EnvLang/MySB_SecurityRules.lng ]; then
				source $MySB_InstallDir/inc/lang/$EnvLang/MySB_SecurityRules.lng
			else
				source $MySB_InstallDir/inc/lang/en/MySB_SecurityRules.lng
			fi
		;;
	esac
}
LoadLanguage

##################### LAST LINE ######################################