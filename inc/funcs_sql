# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
funcs_sql=1
##################### FIRST LINE #####################################

#### Add MySB_SecurityRules command in queue
AddSecurityInQueue() {
	# VARs
	MySwitch="$1"
	Command="$2"
	User="`whoami`"
	Arguments=""
	args=("$@")
	for ((i=2; i < $#; i++)) { Arguments="$Arguments ${args[$i]}"; }
	Arguments="`echo $Arguments | sed -e 's/^ //g;' | sed -e 's/^ //g;'`"

	case "$MySwitch" in
		"add")
			# Check the current priority
			Priority="`Func_SQL_Command 'SELECT' 'MySB_db' 'max(priority)' 'commands' '1'`"
			(( Priority++ ))

			# Add the commands in database
			Func_SQL_Command 'INSERT' 'MySB_db' 'commands' "commands,reload,priority,args,user" "'$Command','1','$Priority','$Arguments','$User'"
		;;
		"remove")
			Func_SQL_Command 'DELETE' 'MySB_db' 'commands' "commands='$Command' AND args='$Arguments' AND user='$User'"
			Func_SQL_Command 'DELETE' 'MySB_db' 'users' "users_ident = '$UserToDelete'"
		;;
		"check")
			Func_SQL_Command 'SELECT' 'MySB_db' 'args' 'commands' "commands='$Command' AND user='$User'"
		;;
	esac
}

#### SGBD commands (SELECT / UPDATE / INSERT / DELETE / ALTER)
Func_SQL_Command() {
	DatabaseType="mysql"
	Command="$1"
	DataBase="$2"
	AptDate="`date +%Y-%m-%d\ %H:%M:%S`"

	# MySQL or SQLite ?
	case "$DataBase" in
		"MySB_db")
			# <= 1
			if [ "`ls -a /var/lib/mysql/MySB_db/ 2> /dev/null | sed -e "/\.$/d" | wc -l`" -le 1 ] && [ -f $MySB_InstallDir"/db/MySB.sq3" ]; then
				DatabaseType="sqlite3"
				DataBase=$MySB_DB
			fi
		;;
		"Wolf_db")
			DatabaseType="sqlite3"
			DataBase=$Wolf_DB
		;;
		"Sync_db")
			DatabaseType="sqlite3"
			DataBase=$Sync_DB
		;;
	esac

	if ! GetPid mysqld && CheckCommand 0 mysql && [ "$DatabaseType" == "mysql" ]; then
		service mysql restart &> /dev/null
	fi

	case "$Command" in
		"UPDATE")
			Table="$3"
			VarSet="`echo $4 | sed "s/NOW/$AptDate/g;"`"
			VarWhere="$5"
			Display="$6"
			case "$DatabaseType" in
				"sqlite3")
					/usr/bin/sqlite3 $Display -cmd '.timeout 150000' $DataBase "UPDATE $Table SET $VarSet WHERE $VarWhere;"
				;;
				"mysql")
					IFS=$','
					TempVars=''
					for VarS in $VarSet; do
						Key="`echo $VarS | cut -d '=' -f 1 | sed 's/ //g;'`"
						Value="`echo $VarS | cut -d '=' -f 2 | sed 's/^ //g;'`"
						VarS='`'"`echo $Key`"'`='"$Value"
						if [ -z "$TempVars" ]; then
							TempVars="$VarS"
						else
							TempVars="$TempVars, $VarS"
						fi
					done
					unset IFS
					VarSet="`echo $TempVars`"

					case "$VarWhere" in
						'ALL') # WHERE 'ALL'.
							MyVar="UPDATE $Table SET $VarSet"
						;;
						*)
							a="`echo "$VarWhere" | grep -o "' AND " | wc -l`"
							b=$a; c=0
							(( b++ ))
							for (( i=1; i<=$b; i++ )); do
								Var1="`echo $VarWhere | awk -F "' AND " "{print $"$i"}" | sed 's/^ //g;'`"
								if [ ! -z "$Var1" ]; then
									Key="`echo $Var1 | cut -d '=' -f 1 | sed 's/ //g;'`"
									Value="`echo $Var1 | cut -d '=' -f 2 | sed 's/^ //g;'`"
									Var1='`'"`echo $Key`"'`='"$Value"
									if [ $c -lt $a ]; then
										if [ -z "$VarWhereTemp" ]; then
											VarWhereTemp="$Var1"
										else
											VarWhereTemp="$VarWhereTemp' AND $Var1"
										fi
									else
										if [ -z "$VarWhereTemp" ]; then
											VarWhereTemp="$Var1"
										else
											VarWhereTemp="$VarWhereTemp' AND $Var1"
										fi
									fi
									(( c++ ))
								fi
							done
							MyVar="UPDATE $Table SET $VarSet WHERE $VarWhereTemp"
							unset VarWhereTemp
						;;
					esac
					if [ "$Display" == "-echo" ];then
						echo "$MyVar"
					fi
					/usr/bin/mysql --defaults-extra-file=/root/.config.cnf --database=$DataBase -e "$MyVar";
				;;
			esac
		;;
		"INSERT")
			Table="$3"
			VarColumns="$4"
			VarValues="`echo $5 | sed "s/NOW/$AptDate/g;"`"
			Display="$6"
			case "$DatabaseType" in
				"sqlite3")
					/usr/bin/sqlite3 $Display -cmd '.timeout 150000' $DataBase "INSERT INTO $Table ($VarColumns) VALUES ($VarValues);"
				;;
				"mysql")
					IFS=$','; TempValue=""
					for Column in $VarColumns; do
						case "$Column" in
							'key')
								Column="`echo $Column | sed 's/key/\`key\`/g;'`"
							;;
							'value')
								Column="`echo $Column | sed 's/value/\`value\`/g;'`"
							;;
							*)
								Column="`echo $Column | sed -e 's/^ //g;' | sed 's/\s+$//'`"
								Column='`'"`echo $Column`"'`'
							;;
						esac
						TempValue="$TempValue,$Column"
					done
					unset IFS
					TempValue="`echo $TempValue | sed 's/^,//g;' | sed 's/,$//g;'`"
					VarColumns="$TempValue"
					MyVar="INSERT INTO $Table ($VarColumns) VALUES ($VarValues)"
					if [ "$Display" == "-echo" ];then
						echo "$MyVar"
					fi
					/usr/bin/mysql --defaults-extra-file=/root/.config.cnf --database=$DataBase -e "$MyVar";
				;;
			esac
		;;
		"DELETE")
			Table="$3"
			VarWhere="$4"
			Display="$5"
			case "$DatabaseType" in
				"sqlite3")
					/usr/bin/sqlite3 $Display -cmd '.timeout 150000' $DataBase "DELETE FROM $Table WHERE $VarWhere"
				;;
				"mysql")
					MyVar="DELETE FROM $Table WHERE $VarWhere"
					if [ "$Display" == "-echo" ];then
						echo "$MyVar"
					fi
					/usr/bin/mysql --defaults-extra-file=/root/.config.cnf --database=$DataBase -e "$MyVar";
				;;
			esac
		;;
		"SELECT")
			VarSelect="$3"
			Table="$4"
			VarWhere="$5"
			case "$DatabaseType" in
				"sqlite3")
					case "$VarSelect" in
						"count(*)")
							/usr/bin/sqlite3 -cmd '.timeout 150000' $DataBase "SELECT $VarSelect FROM $Table;"
						;;
						*)
							/usr/bin/sqlite3 -cmd '.timeout 150000' $DataBase "SELECT $VarSelect FROM $Table WHERE $VarWhere;"
						;;
					esac
				;;
				"mysql")
					case "$VarSelect" in
						min\(*\)|max\(*\))
							Value="`/usr/bin/mysql --defaults-extra-file=/root/.config.cnf --database=$DataBase -N -s -e \"SELECT $VarSelect FROM $Table WHERE $VarWhere\";`"
							if [ "$Value" == "NULL" ]; then
								echo 0
							else
								echo $Value
							fi
						;;
						"count(*)")
							/usr/bin/mysql --defaults-extra-file=/root/.config.cnf --database=$DataBase -N -s -e "SELECT $VarSelect FROM $Table";
						;;
						*)
							/usr/bin/mysql --defaults-extra-file=/root/.config.cnf --database=$DataBase -N -s -e "SELECT $VarSelect FROM $Table WHERE $VarWhere" | sed 's/\t/|/g;';
						;;
					esac
				;;
			esac
		;;
		"ALTER")
			Type="$3"
			Table="$4"
			Column="$5"
			Params="$6"
			Display="$7"
			case "$DatabaseType" in
				"mysql")
					case "$Type" in
						"ADD")
							MyVar="ALTER TABLE $Table ADD \`$Column\` $Params"
						;;
						"CHANGE")
							MyVar="ALTER TABLE $Table CHANGE \`$Column\` \`$Column\` $Params"
						;;
						"DROP")
							MyVar="ALTER TABLE $Table DROP \`$Column\`"
						;;
					esac
					if [ "$Display" == "-echo" ];then
						echo "$MyVar"
					fi
					/usr/bin/mysql --defaults-extra-file=/root/.config.cnf --database=$DataBase -e "$MyVar";
				;;
			esac
		;;
	esac
}

##################### LAST LINE ######################################