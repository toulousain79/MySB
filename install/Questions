#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

MySB_Install_PID=$1
TYPE="$2"
Directory="$3"

case "$TYPE" in
	"INSTALL")
		DisplayInfo=YES
		DisplayUserInfo=YES
		DisplayServerInfo=YES
		DisplayServices=YES
		DisplaySecurity=YES
	;;
	"UPGRADE")
		DisplayInfo=NO
		DisplayUserInfo=NO
		DisplayServerInfo=NO
		DisplayServices=YES
		DisplaySecurity=YES

		# Main User password (confirm it OR change it when you upgrade)
		echo
		echo -e "$Upgrade_MainUserPasswordConfirm"
		QuestionGetString YES "$Questions_MainUserPassword" MainUserPassword
		Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "users_passwd = '$MainUserPassword'" "admin = '1'"

		# Language select
		echo
		echo -e "$Upgrade_LanguageSelect"
		QuestionGetString NO "$Questions_LanguageSelect" LanguageSelect $EnvLang
		LanguageSelect="`echo $LanguageSelect | tr '[:upper:]' '[:lower:]'`"
		sed -i '/EnvLang/d' /etc/MySB/config
		echo "EnvLang=\"$LanguageSelect\"" >> /etc/MySB/config
		source /etc/MySB/config
		source $Directory/inc/vars
	;;
esac

#### Advertising
if [ "$DisplayInfo" == "YES" ]; then
	echo
	echo -e "$Header_Install_0"
	echo

	echo
	echo -e "$Questions_NeedSomeInfos"
	echo
fi

#### MAIN USER INFO
if [ "$DisplayUserInfo" == "YES" ]; then
	if [ "$DisplayInfo" == "YES" ]; then
		echo -e "$Questions_Category_MainUserInfos"
	fi

	# Main User name
	echo
	while [ "`echo $MainUser | grep '@'`" != "" ] || [ -z "$MainUser" ]; do
		QuestionGetString NO "$Questions_MainUserUsername" MainUser
	done

	# Main User password
	echo
	if [ -z "$MainUserPassword" ] || [ "$TYPE" == "UPGRADE" ]; then
		QuestionGetString YES "$Questions_MainUserPassword" MainUserPassword
	fi

	# User IP addresses
	echo
	echo -e "$Questions_Message_IpRestriction"
	QuestionGetString NO "$Questions_UseIprestriction" IpRestriction $Global_YES
	IpRestriction="`echo $IpRestriction | tr '[:lower:]' '[:upper:]'`"

	echo
	echo -e "$Questions_Message_AddAddresses"

	while [ "$CHECK_MYIP" != "$MainUserIPs" ] || [ -z "$MainUserIPs" ]; do
		MainUserIPs="`echo $SSH_CLIENT | awk '{ print $1 }'`"
		if [ -z "$MainUserIPs" ]; then
			MainUserIPs="`who --ips | awk '{print $6}' | grep ^[0123456789]`"
			if [ -z "$MainUserIPs" ]; then
				MainUserIPs="`who --ips | awk '{print $5}' | grep ^[0123456789]`"
			fi
		fi

		QuestionGetString NO "$Questions_AddAddresses" MainUserIPs $MainUserIPs
		IFS=$','
		for ip in $MainUserIPs; do 
			TEMP="`ValidateIP "$ip"`"
			if [ ! -z $TEMP ]; then CHECK_MYIP="$CHECK_MYIP $TEMP"; fi
		done
		unset IFS
		CHECK_MYIP="`echo $CHECK_MYIP | sed -e "s/\ /\,/g;" | sed -e "s/^$//g;"`"
	done

	# SMTP ?
	echo
	echo -e "$Questions_Message_SMTP_0"
	SMTP_Provider=""
	while [ ! "$SMTP_Provider" = "LOCAL" ] \
		&& [ ! "$SMTP_Provider" = "FREE" ] \
		&& [ ! "$SMTP_Provider" = "OVH" ] \
		&& [ ! "$SMTP_Provider" = "GMAIL" ] \
		&& [ ! "$SMTP_Provider" = "YAHOO" ] \
		&& [ ! "$SMTP_Provider" = "ZOHO" ]; do

		QuestionGetString NO "$Questions_SMTP" SMTP_Provider $SMTP_Provider
	done

	SMTP_Provider="`echo $SMTP_Provider | tr '[:lower:]' '[:upper:]'`"
	if [ "$SMTP_Provider" != "LOCAL" ]; then
		QuestionGetString NO "$Questions_SMTP_Username" SMTP_Username
		QuestionGetString YES "$Questions_SMTP_Password" SMTP_Password
	fi

	# User e-mail
	if [ "$SMTP_Provider" != "LOCAL" ]; then
		echo
		echo -e "$Questions_Message_SMTP_1"
	fi
	while [ ! "`ValidateMail $MainUserEmail`" = "1" ] || [ -z "$MainUserEmail" ]; do
		QuestionGetString NO "$Questions_EmailAddress" MainUserEmail
	done
fi

#### SERVER INFO
if [ "$DisplayServerInfo" == "YES" ]; then
	if [ "$DisplayInfo" == "YES" ]; then
		echo
		echo -e "$Questions_Category_ServerInfos"
	fi

	#Time Zone
	echo
	QuestionGetString NO "$Questions_TimeZone" TimeZone "$TimeZone"

	# Primary Inet
	echo
	QuestionGetString NO "$Questions_PrimaryNetwork" PrimaryInet $PrimaryInet

	# Box' IP
	echo
	while [ ! "$CHECK_SrvIpAddress" = "$SrvIpAddress" ] || [ -z "$SrvIpAddress" ]; do
		QuestionGetString NO "$Questions_BoxIpAddress" SrvIpAddress $SrvIpAddress
		CHECK_SrvIpAddress="`ValidateIP "$SrvIpAddress"`"
	done

	# Box' hostname
	echo
	QuestionGetString NO "$Questions_Hostname" HostNameFQDN $HostNameFQDN

	# NginX HTTPs port
	echo
	QuestionGetString NO "$Questions_PortHTTPs" Port_HTTPS $Port_HTTPS

	# SSH port
	echo
	QuestionGetString NO "$Questions_PortSSH" Port_SSH $Port_SSH

	# FTP port
	echo
	QuestionGetString NO "$Questions_PortFTPs" Port_FTP $Port_FTP
fi

#### SERVICES
if [ "$DisplayServices" == "YES" ]; then
	if [ "$DisplayInfo" == "YES" ]; then
		echo
		echo -e "$Questions_Category_Services"
	fi

	#Provider
	echo
	echo -e "$Questions_Message_ServerProvider"
	ServerProvider=""
	while [ "$ServerProvider" != "$Global_NO" ] \
		&& [ "$ServerProvider" != "DIGICUBE" ] \
		&& [ "$ServerProvider" != "OVH" ] \
		&& [ "$ServerProvider" != "ONLINE" ]; do

		QuestionGetString NO "$Questions_ServerProvider" ServerProvider $Global_NO
		ServerProvider="`echo $ServerProvider | tr '[:lower:]' '[:upper:]'`"
	done

	# Seedbox-Manager
	if [ "$IsInstalled_Manager" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallSeedboxManager" ToInstall_Manager $Global_NO
		ToInstall_Manager="`echo $ToInstall_Manager | tr '[:lower:]' '[:upper:]'`"

		if [ "$ToInstall_Manager" == "$Global_YES" ]; then
			to_install=1
		else
			to_install=0
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install'" "serv_name = 'Seedbox-Manager'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'Seedbox-Manager'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'ruTorrent Plugin Link Manager'"		
	fi

	# Cakebox Light
	if [ "$IsInstalled_Cakebox" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallCakeBox" ToInstall_Cakebox $Global_NO
		ToInstall_Cakebox="`echo $ToInstall_Cakebox | tr '[:lower:]' '[:upper:]'`"

		if [ "$ToInstall_Cakebox" == "$Global_YES" ]; then
			to_install=1
		else
			to_install=0
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install'" "serv_name = 'CakeBox-Light'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'CakeBox-Light'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'ruTorrent Plugin Link Cakebox'"		
	fi

	# Plexmedia server
	if [ "$IsInstalled_PlexMedia" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallPlexMedia" ToInstall_PlexMedia $Global_NO
		ToInstall_PlexMedia="`echo $ToInstall_PlexMedia | tr '[:lower:]' '[:upper:]'`"

		if [ "$ToInstall_PlexMedia" == "$Global_YES" ]; then
			to_install=1
		else
			to_install=0
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install'" "serv_name = 'Plex Media Server'"
	fi

	# Webmin
	if [ "$IsInstalled_Webmin" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallWebmin" ToInstall_Webmin $Global_NO
		ToInstall_Webmin="`echo $ToInstall_Webmin | tr '[:lower:]' '[:upper:]'`"
		if [ "$ToInstall_Webmin" == "$Global_YES" ]; then
			QuestionGetString NO "$Questions_PortWebmin" Ports_Webmin $Ports_Webmin
		fi

		if [ "$ToInstall_Webmin" == "$Global_YES" ]; then
			to_install=1
		else
			to_install=0
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', port_tcp1 = '$Ports_Webmin', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'Webmin'"
	fi

	# OpenVPN
	if [ "$IsInstalled_OpenVPN" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallOpenVPN" ToInstall_OpenVPN $Global_NO
		ToInstall_OpenVPN="`echo $ToInstall_OpenVPN | tr '[:lower:]' '[:upper:]'`"
		if [ "$ToInstall_OpenVPN" == "$Global_YES" ]; then
			OpenVPN_Proto=""
			QuestionGetString NO "$Questions_PortOpenvpnTUNwithGW" Port_OpenVPN_WithGW $Port_OpenVPN_WithGW
			QuestionGetString NO "$Questions_PortOpenvpnTUNwithoutGW" Port_OpenVPN_WithoutGW $Port_OpenVPN_WithoutGW
			QuestionGetString NO "$Questions_PortOpenvpnTAPwithoutGW" Port_OpenVPN_TAP_WithoutGW $Port_OpenVPN_TAP_WithoutGW
			while [ ! "$OpenVPN_Proto" = "UDP" ] && [ ! "$OpenVPN_Proto" = "TCP" ]; do
				QuestionGetString NO "$Questions_ProtoOpenVPN" OpenVPN_Proto UDP
			done
		fi
		if [ "$ToInstall_OpenVPN" == "$Global_YES" ]; then
			to_install=1

			OpenVPN_Proto="`echo $OpenVPN_Proto | tr '[:upper:]' '[:lower:]'`"
			case "$OpenVPN_Proto" in
				"tcp")
					UdpPortsList="port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''"
					TcpPortsList="port_tcp1 = '$Port_OpenVPN_WithGW', port_tcp2 = '$Port_OpenVPN_WithoutGW', port_tcp3 = '$Port_OpenVPN_TAP_WithoutGW', ports_tcp_list = ''"
				;;
				"udp")
					UdpPortsList="port_udp1 = '$Port_OpenVPN_WithGW', port_udp2 = '$Port_OpenVPN_WithoutGW', port_udp3 = '$Port_OpenVPN_TAP_WithoutGW', ports_udp_list = ''"
					TcpPortsList="port_tcp1 = '', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = ''"
				;;
			esac
		else
			to_install=0
			UdpPortsList="port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''"
			TcpPortsList="port_tcp1 = '', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = ''"
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', $TcpPortsList, $UdpPortsList" "serv_name = 'OpenVPN'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install'" "serv_name = 'OpenVPN'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install'" "serv_name = 'Samba'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install'" "serv_name = 'NFS'"
	fi

	# ownCloud
	if [ "$IsInstalled_ownCloud" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallOwnCloud" ToInstall_ownCloud $Global_NO
		ToInstall_ownCloud="`echo $ToInstall_ownCloud | tr '[:lower:]' '[:upper:]'`"

		if [ "$ToInstall_ownCloud" == "$Global_YES" ]; then
			to_install=1
		else
			to_install=0
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', port_tcp1 = '', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'ownCloud'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'ownCloud'"
	fi
fi

#### SECURITY
if [ "$DisplaySecurity" == "YES" ]; then
	if [ "$DisplayInfo" == "YES" ]; then
		echo
		echo -e "$Questions_Category_Security"
	fi

	# Logwatch
	if [ "$IsInstalled_LogWatch" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallLogwatch" ToInstall_LogWatch $Global_NO
		ToInstall_LogWatch="`echo $ToInstall_LogWatch | tr '[:lower:]' '[:upper:]'`"

		if [ "$ToInstall_LogWatch" == "$Global_YES" ]; then
			to_install=1
		else
			to_install=0
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'LogWatch'"
	fi
	
	# Fail2Ban
	if [ "$IsInstalled_Fail2Ban" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallFail2Ban" ToInstall_Fail2Ban $Global_YES
		ToInstall_Fail2Ban="`echo $ToInstall_Fail2Ban | tr '[:lower:]' '[:upper:]'`"

		if [ "$ToInstall_Fail2Ban" == "$Global_YES" ]; then
			to_install=1
		else
			to_install=0
		fi
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install'" "serv_name = 'Fail2Ban'"
	fi

	# DNScrypt-proxy
	if [ "$IsInstalled_DNScrypt" != "YES" ]; then
		echo
		QuestionGetString NO "$Questions_InstallDNScrypt" ToInstall_DNScrypt $Global_YES
		ToInstall_DNScrypt="`echo $ToInstall_DNScrypt | tr '[:lower:]' '[:upper:]'`"
		if [ ! -z $IFPVEKERNEL ] && [ "$ToInstall_DNScrypt" == "$Global_YES" ]; then
			echo -e "${CYELLOW}Your system is an$CEND ${CRED}OpenVZ container$CEND${CYELLOW}.$CEND"
			echo -e "${CYELLOW}At the end of the installation, you should replace your DNS (/etc/resolv.conf) with ${CGREEN}nameserver 127.0.0.1$CEND${CYELLOW} through the OpenVZ host (eg Proxmox).$CEND"
			echo -e "$Questions_Message_DNScrypt"
			sleep 10
		fi

		if [ "$ToInstall_DNScrypt" == "$Global_YES" ]; then
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'DNScrypt-proxy'"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '1'" "name = 'DNScrypt-proxy'"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '1'" "name = 'Libsodium'"
		else
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '0'" "name = 'DNScrypt-proxy'"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '0'" "name = 'Libsodium'"
		fi
	fi

	# Blocklist
	if [ "$MySB_PeerBlock" == "none" ] || [ "$MySB_PeerBlock" == "" ]; then
		echo
		echo -e "$Questions_Message_Blocklists"

		if [ -z $IFPVEKERNEL ]; then
			if [ "$MEMORY" -lt "2048" ]; then
				echo -e "$Questions_Message_Blocklists_0"
			else
				echo -e "$Questions_Message_Blocklists_1"
			fi
			MySB_PeerBlock=""
			while [ "$MySB_PeerBlock" != "$Global_NO" ] \
				&& [ "$MySB_PeerBlock" != "PeerGuardian" ] \
				&& [ "$MySB_PeerBlock" != "rTorrent" ]; do

				QuestionGetString NO "$Questions_InstallBlockList_0" MySB_PeerBlock "PeerGuardian"
			done
		else
			echo -e "$Questions_Message_NotPeerGuardian"
			MySB_PeerBlock=""
			while [ "$MySB_PeerBlock" != "$Global_NO" ] \
				&& [ "$MySB_PeerBlock" != "rTorrent" ]; do

				QuestionGetString NO "$Questions_InstallBlockList_1" MySB_PeerBlock "rTorrent"
			done
		fi

		case "$MySB_PeerBlock" in
			"PeerGuardian")
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'PeerGuardian'"
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0'" "serv_name = 'rTorrent Block List'"
			;;
			"rTorrent")
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0'" "serv_name = 'PeerGuardian'"
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'rTorrent Block List'"
			;;
			*)
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0'" "serv_name = 'PeerGuardian'"
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0'" "serv_name = 'rTorrent Block List'"
			;;
		esac
	fi
fi

#### Add answer to SQLite db
if [ "$TYPE" == "INSTALL" ]; then
	# 'system' table
	if [ "$IpRestriction" == "$Global_YES" ]; then
		IpRestriction="1"
	else
		IpRestriction="0"
	fi	
	Func_SQL_Command 'UPDATE' 'MySB_db' 'system' "hostname = '$HostNameFQDN', ipv4 = '$SrvIpAddress', primary_inet = '$PrimaryInet', timezone = '$TimeZone', server_provider = '$ServerProvider', ip_restriction = '$IpRestriction'" "id_system = '1'"
	
	# 'smtp' table
	Func_SQL_Command 'UPDATE' 'MySB_db' 'smtp' "smtp_provider = '$SMTP_Provider', smtp_username = '$SMTP_Username', smtp_passwd = '$SMTP_Password', smtp_email ='$MainUserEmail'" "id_smtp = '1'"

	# 'users' table (Main user)
	Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "users_ident = '$MainUser', users_email = '$MainUserEmail', users_passwd = '$MainUserPassword', sftp = '1', sudo = '1', admin = '1'" "users_ident = 'MySB'"
	Func_SQL_Command 'UPDATE' 'Wolf_db' 'user' "name = '$MainUser', email = '$MainUserEmail', username = '$MainUser'" "id = '2'"

	# 'users_addresses' table
	MainUserId="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_users' 'users' \"users_ident = '$MainUser'\"`"
	MainUserIPs="`echo $MainUserIPs | sed "s/,/;/g;"`"
	IFS=$';'
	for ip in $MainUserIPs; do
		HostName="`nslookup $ip | grep 'name =' | awk '{ print $4 }' | sed 's/.\{1\}$//g'`"
		Func_SQL_Command 'INSERT' 'MySB_db' 'users_addresses' "id_users,ipv4,hostname,check_by,is_active,last_update" "'$MainUserId','$ip','$HostName','ipv4','1','NOW'"
	done
	unset IFS

	#### 'services' table
	# HTTPs & HTTP
	Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "port_tcp1 = '$Port_HTTPS', port_tcp2 = '$Port_HTTP', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'NginX'"
	# SSH
	Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "port_tcp1 = '$Port_SSH', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'SSH'"
	# FTP
	Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "port_tcp1 = '$Port_FTP', port_tcp2 = '$Port_FTP_Data', port_tcp3 = '65000:65535', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'VSFTPd'"
fi

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################