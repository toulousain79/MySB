#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

MySB_Install_PID=$1
TYPE="$2"
Directory="$3"

case "$TYPE" in
	"INSTALL")
		DisplayInfo=YES
		DisplayUserInfo=YES
		DisplayServerInfo=YES
		DisplayServices=YES
		DisplaySecurity=YES
		ServerProvider=""
		SMTP_Provider=""
		Port_HTTP="8888"
		RepeatSurvey=NO
	;;
	"UPGRADE")
		DisplayInfo=NO
		DisplayUserInfo=NO
		DisplayServerInfo=NO
		DisplayServices=YES
		DisplaySecurity=YES

		# Main User password (confirm it OR change it when you upgrade)
		echo
		echo -e "$Upgrade_MainUserPasswordConfirm"
		QuestionGetString YES "$Questions_MainUserPassword" MainUserPassword
		Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "users_passwd = '$MainUserPassword'" "admin = '1'"

		# Language select
		if [ -z "$EnvLang" ]; then
			echo
			echo -e "$Upgrade_LanguageSelect"
			QuestionGetString NO "$Questions_LanguageSelect" LanguageSelect "$EnvLang"
			LanguageSelect="`echo $LanguageSelect | tr '[:upper:]' '[:lower:]'`"
			sed -i '/EnvLang/d' /etc/MySB/config
			echo "EnvLang=\"$LanguageSelect\"" >> /etc/MySB/config
			source /etc/MySB/config
			source $Directory/inc/vars
		fi
	;;
esac

DisplaySurvey() {
	# New page
	if [ $FirstTime -eq 0 ]; then
		BannerGenerator
	fi

	#### Advertising
	if [ "$DisplayInfo" == "YES" ]; then
		echo
		echo -e "$Header_Install_0"
		echo

		echo
		echo -e "$Questions_NeedSomeInfos"
		echo
	fi

	#### MAIN USER INFO
	if [ "$DisplayUserInfo" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo -e "$Questions_Category_MainUserInfos"
		fi

		# Main User name
		echo
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$MainUser"
		else
			Value=""
		fi
		MainUser=""
		while [ ! -z "`echo $MainUser | grep '@'`" ] || [ -z "$MainUser" ]; do
			QuestionGetString NO "$Questions_MainUserUsername" MainUser "$Value"
		done

		# Main User password
		echo
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$MainUserPassword"
		else
			Value=""
			MainUserPassword=""
		fi

		if [ -z "$MainUserPassword" ] || [ "$TYPE" == "UPGRADE" ] || [ "$RepeatSurvey" == "YES" ]; then
			QuestionGetString NO "$Questions_MainUserPassword" MainUserPassword "$Value"
		fi

		# SMTP ?
		echo
		if [ -z "$SMTP_Provider" ] || [ "$RepeatSurvey" == "YES" ]; then
			echo -e "$Questions_Message_SMTP_0"
			Loop_SMTP_Provider=1
		else
			Loop_SMTP_Provider=0
		fi
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$SMTP_Provider"
		else
			Value="LOCAL"
		fi

		while [ $Loop_SMTP_Provider -eq 1 ]; do
			QuestionGetString NO "$Questions_SMTP" SMTP_Provider "$Value"
			SMTP_Provider="`echo $SMTP_Provider | tr '[:lower:]' '[:upper:]'`"
			case "$SMTP_Provider" in
				'LOCAL'|'FREE'|'OVH'|'GMAIL'|'YAHOO'|'ZOHO')
					Loop_SMTP_Provider=0
				;;
			esac
		done

		if [ "$SMTP_Provider" != "LOCAL" ]; then
			QuestionGetString NO "$Questions_SMTP_Username" SMTP_Username "$SMTP_Username"
			QuestionGetString NO "$Questions_SMTP_Password" SMTP_Password "$SMTP_Password"
		fi

		# User e-mail
		echo
		if [ "$SMTP_Provider" != "LOCAL" ]; then
			echo -e "$Questions_Message_SMTP_1"
		fi
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$MainUserEmail"
		else
			Value=""
		fi
		MainUserEmail=""
		while [ "`ValidateMail $MainUserEmail`" -ne 1 ] || [ -z "$MainUserEmail" ]; do
			QuestionGetString NO "$Questions_EmailAddress" MainUserEmail "$Value"
		done
	fi

	#### SERVER INFO
	if [ "$DisplayServerInfo" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo
			echo -e "$Questions_Category_ServerInfos"
		fi

		# Time Zone
		echo
		QuestionGetString NO "$Questions_TimeZone" TimeZone "$TimeZone"

		# Primary Inet
		echo
		QuestionGetString NO "$Questions_PrimaryNetwork" PrimaryInet "$PrimaryInet"

		# Box' IP
		echo
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$SrvIpAddress"
			SrvIpAddress=""
		else
			Value="$SrvIpAddress"
		fi
		while [ ! "$CHECK_SrvIpAddress" = "$SrvIpAddress" ] || [ -z "$SrvIpAddress" ]; do
			QuestionGetString NO "$Questions_BoxIpAddress" SrvIpAddress "$Value"
			CHECK_SrvIpAddress="`ValidateIP "$SrvIpAddress"`"
		done

		# Box' hostname
		echo
		QuestionGetString NO "$Questions_Hostname" HostNameFQDN "$HostNameFQDN"

		# NginX HTTPs port
		echo
		QuestionGetString NO "$Questions_PortHTTPs" Port_HTTPS "$Port_HTTPS"

		# SSH port
		echo
		QuestionGetString NO "$Questions_PortSSH" Port_SSH "$Port_SSH"

		# FTP port
		echo
		QuestionGetString NO "$Questions_PortFTPs" Port_FTP "$Port_FTP"
	fi

	#### SERVICES
	if [ "$DisplayServices" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo
			echo -e "$Questions_Category_Services"
		fi

		#Provider
		echo
		if [ -z "$ServerProvider" ] || [ "$RepeatSurvey" == "YES" ]; then
			echo -e "$Questions_Message_ServerProvider"
			Loop_ServerProvider=1
		else
			Loop_ServerProvider=0
		fi
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$ServerProvider"
		else
			Value="$Global_None"
		fi
		Value="`echo $Value | sed "s/^NO$/$Global_None/g;"`"
		while [ $Loop_ServerProvider -eq 1 ]; do
			QuestionGetString NO "$Questions_ServerProvider" ServerProvider "$Value"
			ServerProvider="`echo $ServerProvider | tr '[:lower:]' '[:upper:]'`"
			case "$ServerProvider" in
				"$Global_None"|'OVH'|'ONLINE'|'DIGICUBE')
					Loop_ServerProvider=0
				;;
			esac
		done

		# Seedbox-Manager
		if [ "$IsInstalled_Manager" != "YES" ]; then
			echo
			Loop_IsInstalled_Manager=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_Manager"
			else
				Value="$Global_NO"
			fi
			while [ $Loop_IsInstalled_Manager -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallSeedboxManager" ToInstall_Manager "$Value"
				ToInstall_Manager="`echo $ToInstall_Manager | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_Manager" in
					"$Global_NO"|"$Global_YES")
						Loop_IsInstalled_Manager=0
					;;
				esac
			done

			if [ "$ToInstall_Manager" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1'" "serv_name = 'Seedbox-Manager'"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'Seedbox-Manager' OR name = 'ruTorrent Plugin Link Manager'"
		fi

		# Cakebox Light
		if [ "$IsInstalled_Cakebox" != "YES" ]; then
			echo
			Loop_IsInstalled_Cakebox=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_Cakebox"
			else
				Value="$Global_NO"
			fi
			while [ $Loop_IsInstalled_Cakebox -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallCakeBox" ToInstall_Cakebox "$Value"
				ToInstall_Cakebox="`echo $ToInstall_Cakebox | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_Cakebox" in
					"$Global_NO"|"$Global_YES")
						Loop_IsInstalled_Cakebox=0
					;;
				esac
			done

			if [ "$ToInstall_Cakebox" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1'" "serv_name = 'CakeBox-Light'"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'CakeBox-Light' OR name = 'ruTorrent Plugin Link Cakebox'"
		fi

		# Plexmedia server
		if [ "$IsInstalled_PlexMedia" != "YES" ]; then
			echo
			Loop_ToInstall_PlexMedia=1
			Loop_IsInstalled_Cakebox=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_PlexMedia"
			else
				Value="$Global_NO"
			fi
			while [ $Loop_ToInstall_PlexMedia -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallPlexMedia" ToInstall_PlexMedia "$Value"
				ToInstall_PlexMedia="`echo $ToInstall_PlexMedia | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_PlexMedia" in
					"$Global_NO"|"$Global_YES")
						Loop_ToInstall_PlexMedia=0
					;;
				esac
			done

			if [ "$ToInstall_PlexMedia" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1'" "serv_name = 'Plex Media Server'"
		fi

		# ownCloud
		if [ "$IsInstalled_ownCloud" != "YES" ]; then
			echo
			Loop_ToInstall_ownCloud=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_ownCloud"
			else
				Value="$Global_NO"
			fi
			while [ $Loop_ToInstall_ownCloud -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallOwnCloud" ToInstall_ownCloud "$Value"
				ToInstall_ownCloud="`echo $ToInstall_ownCloud | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_ownCloud" in
					"$Global_NO"|"$Global_YES")
						Loop_ToInstall_ownCloud=0
					;;
				esac
			done

			if [ "$ToInstall_ownCloud" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1', port_tcp1 = '', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'ownCloud'"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'ownCloud'"
		fi

		# Webmin
		if [ "$IsInstalled_Webmin" != "YES" ]; then
			echo
			Loop_ToInstall_Webmin=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_Webmin"
			else
				Value="$Global_NO"
			fi
			while [ $Loop_ToInstall_Webmin -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallWebmin" ToInstall_Webmin "$Value"
				ToInstall_Webmin="`echo $ToInstall_Webmin | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_Webmin" in
					"$Global_NO"|"$Global_YES")
						Loop_ToInstall_Webmin=0
					;;
				esac
			done

			if [ "$ToInstall_Webmin" == "$Global_YES" ]; then
				QuestionGetString NO "$Questions_PortWebmin" Ports_Webmin "$Ports_Webmin"
			fi

			if [ "$ToInstall_Webmin" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1', port_tcp1 = '$Ports_Webmin', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'Webmin'"
		fi

		# OpenVPN
		if [ "$IsInstalled_OpenVPN" != "YES" ]; then
			echo
			Loop_ToInstall_OpenVPN=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_OpenVPN"
			else
				Value="$Global_NO"
			fi
			while [ $Loop_ToInstall_OpenVPN -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallOpenVPN" ToInstall_OpenVPN "$Value"
				ToInstall_OpenVPN="`echo $ToInstall_OpenVPN | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_OpenVPN" in
					"$Global_NO"|"$Global_YES")
						Loop_ToInstall_OpenVPN=0
					;;
				esac
			done

			if [ "$ToInstall_OpenVPN" == "$Global_YES" ]; then
				if [ "$RepeatSurvey" == "YES" ]; then
					ValueProto="$OpenVPN_Proto"
				else
					ValueProto="UDP"
				fi
				to_install=1
				OpenVPN_Proto=""
				ValueOpenVPN_WithGW="$Port_OpenVPN_WithGW"
				ValueOpenVPN_WithoutGW="$Port_OpenVPN_WithoutGW"
				ValueOpenVPN_TAP_WithoutGW="$Port_OpenVPN_TAP_WithoutGW"
				QuestionGetString NO "$Questions_PortOpenvpnTUNwithGW" Port_OpenVPN_WithGW "$ValueOpenVPN_WithGW"
				QuestionGetString NO "$Questions_PortOpenvpnTUNwithoutGW" Port_OpenVPN_WithoutGW "$ValueOpenVPN_WithoutGW"
				QuestionGetString NO "$Questions_PortOpenvpnTAPwithoutGW" Port_OpenVPN_TAP_WithoutGW "$ValueOpenVPN_TAP_WithoutGW"
				while [ ! "$OpenVPN_Proto" = "udp" ] && [ ! "$OpenVPN_Proto" = "tcp" ]; do
					QuestionGetString NO "$Questions_ProtoOpenVPN" OpenVPN_Proto "$ValueProto"
					OpenVPN_Proto="`echo $OpenVPN_Proto | tr '[:upper:]' '[:lower:]'`"
				done

				case "$OpenVPN_Proto" in
					"tcp")
						UdpPortsList="port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''"
						TcpPortsList="port_tcp1 = '$Port_OpenVPN_WithGW', port_tcp2 = '$Port_OpenVPN_WithoutGW', port_tcp3 = '$Port_OpenVPN_TAP_WithoutGW', ports_tcp_list = ''"
					;;
					"udp")
						UdpPortsList="port_udp1 = '$Port_OpenVPN_WithGW', port_udp2 = '$Port_OpenVPN_WithoutGW', port_udp3 = '$Port_OpenVPN_TAP_WithoutGW', ports_udp_list = ''"
						TcpPortsList="port_tcp1 = '', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = ''"
					;;
				esac
			else
				to_install=0
				UdpPortsList="port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''"
				TcpPortsList="port_tcp1 = '', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = ''"
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1', $TcpPortsList, $UdpPortsList" "serv_name = 'OpenVPN' OR serv_name = 'Samba' OR serv_name = 'NFS'"
		fi
	fi

	#### SECURITY
	if [ "$DisplaySecurity" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo
			echo -e "$Questions_Category_Security"
		fi

		# IP restriction
		echo
		echo -e "$Questions_Message_IpRestriction"
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$IpRestriction"
		else
			Value="$Global_YES"
		fi
		QuestionGetString NO "$Questions_UseIprestriction" IpRestriction "$Value"
		IpRestriction="`echo $IpRestriction | tr '[:lower:]' '[:upper:]'`"

		echo
		echo -e "$Questions_Message_AddAddresses"
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$MainUserIPs"
		else
			TempIPs="`echo $SSH_CLIENT | awk '{ print $1 }'`"
			if [ -z "$TempIPs" ]; then
				TempIPs="`who --ips | awk '{print $6}' | grep ^[0123456789]`"
				if [ -z "$TempIPs" ]; then
					TempIPs="`who --ips | awk '{print $5}' | grep ^[0123456789]`"
				fi
			fi
			Value="$TempIPs"
		fi
		CHECK_MYIP=""

		while [ "$CHECK_MYIP" != "$MainUserIPs" ] || [ -z "$Value" ]; do
			QuestionGetString NO "$Questions_AddAddresses" MainUserIPs "$Value"
			IFS=$','
			for ip in $MainUserIPs; do
				TEMP="`ValidateIP "$ip"`"
				if [ ! -z $TEMP ]; then CHECK_MYIP="$CHECK_MYIP $TEMP"; fi
			done
			unset IFS
			CHECK_MYIP="`echo $CHECK_MYIP | sed -e "s/\ /\,/g;" | sed -e "s/^$//g;"`"
		done

		# Logwatch
		if [ "$IsInstalled_LogWatch" != "YES" ]; then
			echo
			Loop_ToInstall_LogWatch=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_LogWatch"
			else
				Value="$Global_NO"
			fi
			while [ $Loop_ToInstall_LogWatch -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallLogwatch" ToInstall_LogWatch "$Value"
				ToInstall_LogWatch="`echo $ToInstall_LogWatch | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_LogWatch" in
					"$Global_NO"|"$Global_YES")
						Loop_ToInstall_LogWatch=0
					;;
				esac
			done

			if [ "$ToInstall_LogWatch" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1'" "serv_name = 'LogWatch'"
		fi

		# Fail2Ban
		if [ "$IsInstalled_Fail2Ban" != "YES" ]; then
			echo
			Loop_ToInstall_Fail2Ban=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_Fail2Ban"
			else
				Value="$Global_YES"
			fi
			while [ $Loop_ToInstall_Fail2Ban -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallFail2Ban" ToInstall_Fail2Ban "$Value"
				ToInstall_Fail2Ban="`echo $ToInstall_Fail2Ban | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_Fail2Ban" in
					"$Global_NO"|"$Global_YES")
						Loop_ToInstall_Fail2Ban=0
					;;
				esac
			done

			if [ "$ToInstall_Fail2Ban" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1'" "serv_name = 'Fail2Ban'"
		fi

		# DNScrypt-proxy
		if [ "$IsInstalled_DNScrypt" != "YES" ]; then
			echo
			Loop_ToInstall_DNScrypt=1
			if [ "$RepeatSurvey" == "YES" ]; then
				Value="$ToInstall_DNScrypt"
			else
				Value="$Global_YES"
			fi
			while [ $Loop_ToInstall_DNScrypt -eq 1 ]; do
				QuestionGetString NO "$Questions_InstallDNScrypt" ToInstall_DNScrypt "$Value"
				ToInstall_DNScrypt="`echo $ToInstall_DNScrypt | tr '[:lower:]' '[:upper:]'`"
				case "$ToInstall_DNScrypt" in
					"$Global_NO"|"$Global_YES")
						Loop_ToInstall_DNScrypt=0
					;;
				esac
			done

			if [ ! -z "$IFPVEKERNEL" ] && [ "$ToInstall_DNScrypt" == "$Global_YES" ]; then
				echo -e "${CYELLOW}Your system is an$CEND ${CRED}OpenVZ container$CEND${CYELLOW}.$CEND"
				echo -e "${CYELLOW}At the end of the installation, you should replace your DNS (/etc/resolv.conf) with ${CGREEN}nameserver 127.0.0.1$CEND${CYELLOW} through the OpenVZ host (eg Proxmox).$CEND"
				echo -e "$Questions_Message_DNScrypt"
				sleep 10
			fi

			if [ "$ToInstall_DNScrypt" == "$Global_YES" ]; then
				to_install=1
			else
				to_install=0
			fi
			Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '$to_install', used = '1'" "serv_name = 'DNScrypt-proxy'"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "active = '$to_install'" "name = 'DNScrypt-proxy' OR name = 'Libsodium'"
		fi

		# Blocklist
		if [ "$RepeatSurvey" == "YES" ]; then
			Value="$MySB_PeerBlock"
		else
			Value=""
		fi
		if [ "$TYPE" == "INSTALL" ]; then
			MySB_PeerBlock=""
		fi
		if [ "$MySB_PeerBlock" == "$Global_None" ] || [ -z "$MySB_PeerBlock" ]; then
			echo
			echo -e "$Questions_Message_Blocklists"

			if [ -z "$IFPVEKERNEL" ]; then
				if [ $MEMORY -lt 2048 ]; then
					echo -e "$Questions_Message_Blocklists_0"
				else
					echo -e "$Questions_Message_Blocklists_1"
				fi

				if [ "$RepeatSurvey" == "YES" ]; then
					Value="$Value"
				else
					Value="PeerGuardian"
				fi
				MySB_PeerBlock=""
				while [ "$MySB_PeerBlock" != "$Global_None" ] \
					&& [ "$MySB_PeerBlock" != "PeerGuardian" ] \
					&& [ "$MySB_PeerBlock" != "rTorrent" ]; do

					QuestionGetString NO "$Questions_InstallBlockList_0" MySB_PeerBlock "$Value"
				done
			else
				echo -e "$Questions_Message_NotPeerGuardian"
				if [ "$RepeatSurvey" == "YES" ]; then
					Value="$Value"
				else
					Value="rTorrent"
				fi
				MySB_PeerBlock=""
				while [ "$MySB_PeerBlock" != "$Global_None" ] \
					&& [ "$MySB_PeerBlock" != "rTorrent" ]; do

					QuestionGetString NO "$Questions_InstallBlockList_1" MySB_PeerBlock "$Value"
				done
			fi

			case "$MySB_PeerBlock" in
				"PeerGuardian")
					Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1', used = '1'" "serv_name = 'PeerGuardian'"
					Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', used = '1'" "serv_name = 'rTorrent Block List'"
				;;
				"rTorrent")
					Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', used = '1'" "serv_name = 'PeerGuardian'"
					Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1', used = '1'" "serv_name = 'rTorrent Block List'"
				;;
				*)
					Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', used = '1'" "serv_name = 'PeerGuardian'"
					Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', used = '1'" "serv_name = 'rTorrent Block List'"
				;;
			esac
		fi
	fi

	if [ "$TYPE" == "INSTALL" ]; then
		#### Add answer to database
		# 'system' table
		if [ "$IpRestriction" == "$Global_YES" ]; then
			Value="1"
		else
			Value="0"
		fi
		FreeSpace="`df --sync /home/ | awk '{ print $4 }' | tail -n 1`"
		FreeSpaceToKeep="`python -c "print 2 * 1024**2"`" # Keep a minimum of 2Go of free space
		FreeSpace=$(($FreeSpace-$FreeSpaceToKeep))
		Func_SQL_Command 'UPDATE' 'MySB_db' 'system' "hostname = '$HostNameFQDN', ipv4 = '$SrvIpAddress', primary_inet = '$PrimaryInet', timezone = '$TimeZone', server_provider = '$ServerProvider', ip_restriction = '$Value', quota_default = '$FreeSpace'" "id_system = '1'"

		# 'smtp' table
		Func_SQL_Command 'UPDATE' 'MySB_db' 'smtp' "smtp_provider = '$SMTP_Provider', smtp_username = '$SMTP_Username', smtp_passwd = '$SMTP_Password', smtp_email ='$MainUserEmail'" "id_smtp = '1'"

		# 'users' table (Main user)
		Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "users_ident = '$MainUser', users_email = '$MainUserEmail', users_passwd = '$MainUserPassword', sftp = '1', sudo = '1', admin = '1'" "users_ident = 'MySB' OR admin = '1'"
		Func_SQL_Command 'UPDATE' 'MySB_db' 'users_history' "users_ident = '$MainUser'" "users_ident = 'MySB'"
		Func_SQL_Command 'UPDATE' 'Wolf_db' 'user' "name = '$MainUser', email = '$MainUserEmail', username = '$MainUser'" "id = '2'"

		# 'users_addresses' table
		MainUserId="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_users' 'users' \"users_ident = '$MainUser'\"`"
		Func_SQL_Command 'DELETE' 'MySB_db' 'users_addresses' "id_users = '$MainUserId'"
		IFS=$','
		for ip in $MainUserIPs; do
			HostName="`nslookup $ip | grep 'name =' | awk '{ print $4 }' | sed 's/.\{1\}$//g'`"
			Func_SQL_Command 'INSERT' 'MySB_db' 'users_addresses' "id_users,ipv4,hostname,check_by,is_active,last_update" "'$MainUserId','$ip','$HostName','ipv4','1','NOW'"
		done
		unset IFS

		#### 'services' table
		# HTTPs & HTTP
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "port_tcp1 = '$Port_HTTPS', port_tcp2 = '$Port_HTTP', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'NginX'"
		# SSH
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "port_tcp1 = '$Port_SSH', port_tcp2 = '', port_tcp3 = '', ports_tcp_list = '', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'SSH'"
		# FTP
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "port_tcp1 = '$Port_FTP', port_tcp2 = '$Port_FTP_Data', port_tcp3 = '65000:65535', port_udp1 = '', port_udp2 = '', port_udp3 = '', ports_udp_list = ''" "serv_name = 'VSFTPd'"
	fi

	# Enable loop survey
	RepeatSurvey=YES
}

ConfirmSurvey() {
	# VARs
	SurveyIsConfirmed=""
	# New page
	BannerGenerator

	#### MAIN USER INFO
	if [ "$DisplayUserInfo" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo -e "$Questions_Category_MainUserInfos"
		fi
		echo -e "$Summary_Language" "${CGREEN}$EnvLang$CEND"
		echo -e "$Summary_MainUser" "${CGREEN}$MainUser$CEND"
		echo -e "$Summary_MainUserPass" "${CGREEN}$MainUserPassword$CEND"
		echo -e "$Summary_SmtpProvider" "${CGREEN}$SMTP_Provider$CEND"
		if [ "$SMTP_Provider" != "LOCAL" ]; then
			echo -e "$Summary_SmtpUsername" "${CGREEN}$SMTP_Username$CEND"
			echo -e "$Summary_SmtpPassword" "${CGREEN}$SMTP_Password$CEND"
		fi
		echo -e "$Summary_MainUserMail" "${CGREEN}$MainUserEmail$CEND"
	fi

	#### SERVER INFO
	if [ "$DisplayServerInfo" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo
			echo -e "$Questions_Category_ServerInfos"
		fi
		echo -e "$Summary_TimeZone" "${CGREEN}$TimeZone$CEND"
		echo -e "$Summary_PrimaryInet" "${CGREEN}$PrimaryInet$CEND"
		echo -e "$Summary_SrvIpAddress" "${CGREEN}$SrvIpAddress$CEND"
		echo -e "$Summary_HostNameFQDN" "${CGREEN}$HostNameFQDN$CEND"
		echo -e "$Summary_PortHTTPs" "${CGREEN}$Port_HTTPS$CEND"
		echo -e "$Summary_Port_SSH" "${CGREEN}$Port_SSH$CEND"
		echo -e "$Summary_Port_FTP" "${CGREEN}$Port_FTP$CEND"
	fi

	#### SERVICES
	if [ "$DisplayServices" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo
			echo -e "$Questions_Category_Services"
		fi
		echo -e "$Summary_ServerProvider" "${CGREEN}$ServerProvider$CEND"
		echo -e "$Summary_SeedboxManager" "${CGREEN}$ToInstall_Manager$CEND"
		echo -e "$Summary_CakeboxLight" "${CGREEN}$ToInstall_Cakebox$CEND"
		echo -e "$Summary_PlexMedia" "${CGREEN}$ToInstall_PlexMedia$CEND"
		echo -e "$Summary_Webmin" "${CGREEN}$ToInstall_Webmin$CEND"
		if [ "$ToInstall_Webmin" == "$Global_YES" ]; then
			echo -e "$Summary_WebminPort" "${CGREEN}$Ports_Webmin$CEND"
		fi
		echo -e "$Summary_ownCloud" "${CGREEN}$ToInstall_ownCloud$CEND"
		echo -e "$Summary_OpenVPN" "${CGREEN}$ToInstall_OpenVPN$CEND"
		if [ "$ToInstall_OpenVPN" == "$Global_YES" ]; then
			echo -e "$Summary_OpenVPN_Proto" "${CGREEN}$OpenVPN_Proto$CEND"
			echo -e "$Summary_OpenVPN_WithGW" "${CGREEN}$Port_OpenVPN_WithGW$CEND"
			echo -e "$Summary_OpenVPN_WithoutGW" "${CGREEN}$Port_OpenVPN_WithoutGW$CEND"
			echo -e "$Summary_OpenVPN_TAP_WithoutGW" "${CGREEN}$Port_OpenVPN_TAP_WithoutGW$CEND"
		fi
	fi

	#### SECURITY
	if [ "$DisplaySecurity" == "YES" ]; then
		if [ "$DisplayInfo" == "YES" ]; then
			echo
			echo -e "$Questions_Category_Security"
		fi
		echo -e "$Summary_IpRestriction" "${CGREEN}$IpRestriction$CEND"
		echo -e "$Summary_MainUserIPs" "${CGREEN}$MainUserIPs$CEND"
		echo -e "$Summary_InstallLogWatch" "${CGREEN}$ToInstall_LogWatch$CEND"
		echo -e "$Summary_InstallFail2Ban" "${CGREEN}$ToInstall_Fail2Ban$CEND"
		echo -e "$Summary_InstallDNScrypt" "${CGREEN}$ToInstall_DNScrypt$CEND"
		echo -e "$Summary_PeerBlock" "${CGREEN}$MySB_PeerBlock$CEND"
	fi

	#### Confirm
	echo
	echo -e "$Summary_ConfirmMessage"
	while [ ! "$SurveyIsConfirmed" = "$Global_YES" ] && [ ! "$SurveyIsConfirmed" = "$Global_NO" ]; do
		QuestionGetString NO "$Summary_Confirm" SurveyIsConfirmed "$Global_NO"
		SurveyIsConfirmed="`echo $SurveyIsConfirmed | tr '[:lower:]' '[:upper:]'`"
	done
}

#### Execute the survey
SurveyIsConfirmed="$Global_NO"
FirstTime=1
while [ ! "$SurveyIsConfirmed" = "$Global_YES" ]; do
	#### Execute survey
	DisplaySurvey

	#### Summary
	case "$TYPE" in
		'INSTALL')
			FirstTime=0
			ConfirmSurvey
		;;
		'UPGRADE')
			SurveyIsConfirmed="$Global_YES"
		;;
	esac
done

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################