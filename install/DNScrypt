#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

if [ "$USAGE" == "ON" ]; then
	if [ "$IsInstalled_DNScrypt" == "NO" ]; then
		echo
		echo -e "${CYELLOW}DNScrypt-proxy is not installed!$CEND"
		QuestionGetString NO "Install DNScrypt-proxy? " IsInstalled_DNScrypt YES

		sqlite3 -cmd '.timeout 150000' -echo $MySB_DB "UPDATE services SET is_installed = '$(echo $IsInstalled_DNScrypt | sed 's/NO/0/g;' | sed 's/YES/1/g;')' WHERE serv_name = 'DNScrypt-proxy';"

		if [ "$IsInstalled_DNScrypt" != "YES" ]; then
			EndingScript 0
		fi
	fi
fi

if [ "$ToInstall_DNScrypt" == "YES" ]; then
	#### Install packages
	PackagesManage install "ldnsutils libldns-dev"

	#### Add dnscrypt user
	if [ "`cat /etc/passwd | grep dnscrypt`" == "" ]; then
		adduser --system --group --quiet --home /var/run/dnscrypt-proxy --shell /bin/false --disabled-password --disabled-login dnscrypt
	fi

	# LIBsodium
	LibsodiumDir=$MySB_InstallDir"`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT dir FROM repositories WHERE name = 'Libsodium'\"`"
	LibsodiumUrl="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT url FROM repositories WHERE name = 'Libsodium'\"`"

	if [ -d $LibsodiumDir ]; then
		cd $LibsodiumDir/
		git stash
		git pull
		make clean
	else
		git clone $LibsodiumUrl $LibsodiumDir
	fi

	cd $LibsodiumDir/
	./autogen.sh
	./configure
	make -j$PROCESSOR
	make check
	make install
	/sbin/ldconfig

	# DNScrypt
	DnscryptDir=$MySB_InstallDir"`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT dir FROM repositories WHERE name = 'DNScrypt-proxy'\"`"
	DnscryptUrl="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT url FROM repositories WHERE name = 'DNScrypt-proxy'\"`"
	DnscryptFile="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT file FROM repositories WHERE name = 'DNScrypt-proxy'\"`"

	if [ ! -f $MySB_InstallDir/files/$DnscryptFile ]; then
		wget --no-check-certificate $DnscryptUrl -O $MySB_InstallDir/files/$DnscryptFile
	fi
	if [ ! -d $DnscryptDir ] && [ -f $MySB_InstallDir/files/$DnscryptFile ]; then
		tar -zxvf $MySB_InstallDir/files/$DnscryptFile -C $MySB_InstallDir/temp/
		SubDir="`tar -ztf $MySB_InstallDir/files/$DnscryptFile | sed -e 's@/.*@@' | uniq`"
		if [ -d $MySB_InstallDir/temp/$SubDir ]; then
			mv $MySB_InstallDir/temp/$SubDir $DnscryptDir
		fi
	fi

	cd $DnscryptDir/
	make clean
	./autogen.sh
	./configure --enable-plugins
	make -j$PROCESSOR
	make check
	make install

	#### STOP services
	ManageServices stop "bind9"

	#### DNScrypt-proxy - /etc/init.d/dnscrypt-proxy
	cp $MySB_InstallDir/templates/etc.init.dnscrypt-proxy.template /etc/init.d/dnscrypt-proxy
	perl -pi -e "s/<MySB_DB>/`echo $MySB_DB | sed s,/,\\\\\\\\\\/,g`/g" /etc/init.d/dnscrypt-proxy
	perl -pi -e "s/<InstallDir>/$MySB_InstallDirEscaped/g" /etc/init.d/dnscrypt-proxy
	chmod +x /etc/init.d/dnscrypt-proxy
	#update-rc.d dnscrypt-proxy defaults

	#### Update resolvers infos in db
	if [ -f /usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv ] && CheckCommand 0 csvtool; then
		# Clean the table 'dnscrypt_resolvers'
		sqlite3 -cmd '.timeout 150000' $MySB_DB "DELETE FROM dnscrypt_resolvers WHERE 1"

		# Get resolvers information from 'dnscrypt-resolvers.csv'
		ResolversTable="`csvtool -t ',' -u '|' cat /usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv | csvtool drop 1 - | sed 's/ /#/g;'`"
		for Line in $ResolversTable; do
			Name="`echo $Line | awk '{split($0,a,\"|\"); print a[1]}' | sed 's/#/ /g;'`"
			FullName="`echo $Line | awk '{split($0,a,\"|\"); print a[2]}' | sed 's/#/ /g;'`"
			Description="`echo $Line | awk '{split($0,a,\"|\"); print a[3]}' | sed 's/#/ /g;'`"
			Location="`echo $Line | awk '{split($0,a,\"|\"); print a[4]}' | sed 's/#/ /g;'`"
			Coordinates="`echo $Line | awk '{split($0,a,\"|\"); print a[5]}' | sed 's/#/ /g;'`"
			URL="`echo $Line | awk '{split($0,a,\"|\"); print a[6]}' | sed 's/#/ /g;' | sed 's/http.\/\//http:\/\//g;'`"
			Version="`echo $Line | awk '{split($0,a,\"|\"); print a[7]}' | sed 's/#/ /g;'`"
			DnssecVal="`echo $Line | awk '{split($0,a,\"|\"); print a[8]}' | sed 's/#/ /g;'`"
			NoLogs="`echo $Line | awk '{split($0,a,\"|\"); print a[9]}' | sed 's/#/ /g;'`"
			Namecoin="`echo $Line | awk '{split($0,a,\"|\"); print a[10]}' | sed 's/#/ /g;'`"
			ResolverAddress="`echo $Line | awk '{split($0,a,\"|\"); print a[11]}' | sed 's/#/ /g;'`"
			ProviderName="`echo $Line | awk '{split($0,a,\"|\"); print a[12]}' | sed 's/#/ /g;'`"
			ProviderPublicKey="`echo $Line | awk '{split($0,a,\"|\"); print a[13]}' | sed 's/#/ /g;'`"
			ProviderPublicKeyTxtRecord="`echo $Line | awk '{split($0,a,\"|\"); print a[14]}' | sed 's/#/ /g;'`"

			# Add new informations in DB (don't want IPv6)
			if [ -z "`echo $Name | grep 'ipv6'`" ]; then
				sqlite3 -cmd '.timeout 150000' $MySB_DB "INSERT INTO dnscrypt_resolvers (name,full_name,description,location,coordinates,url,version,dnssec,no_logs,namecoin,resolver_address,provider_name,provider_public_key,provider_public_key_txt_record,is_activated,is_wished) VALUES (\"$Name\",\"$FullName\",\"$Description\",\"$Location\",\"$Coordinates\",\"$URL\",\"$Version\",\"$DnssecVal\",\"$NoLogs\",\"$Namecoin\",\"$ResolverAddress\",\"$ProviderName\",\"$ProviderPublicKey\",\"$ProviderPublicKeyTxtRecord\",\"0\",\"0\");"
			fi
		done

		# Force use of all provider taht accept 'dnssec' and 'no logs'
		sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE dnscrypt_resolvers SET is_wished = '1' WHERE dnssec = 'yes' AND no_logs='yes';"
	fi

	# Check service
	crontab -l > /tmp/crontab.tmp
	sed -i '/dnscrypt-proxy/d' /tmp/crontab.tmp
	echo "*/5 * * * * if ( ! /bin/ps ax | grep 'dnscrypt-proxy' | sed '/grep/d' > /dev/null ); then service dnscrypt-proxy restart &> /dev/null; fi" >> /tmp/crontab.tmp
	crontab /tmp/crontab.tmp
	rm -f /tmp/crontab.tmp

	# Mark as installed
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '0',is_installed = '1' WHERE serv_name = 'DNScrypt-proxy';"

	#### Logs
	if [ ! -d /var/log/dnscrypt-proxy/archives ]; then mkdir -p /var/log/dnscrypt-proxy/archives; fi
	if [ -f /var/log/dnscrypt-proxy.log ]; then mv /var/log/dnscrypt-proxy.log /var/log/dnscrypt-proxy; fi

	#### Logrotate
	cp -v $MySB_InstallDir/templates/etc.logrotate.d.dnscrypt.template /etc/logrotate.d/dnscrypt-proxy
	logrotate -f /etc/logrotate.d/dnscrypt-proxy

	#### Create new security rules
	ScriptInvoke 'screen' "$MySB_InstallDir/bin/MySB_SecurityRules" 'create'

	#### START services
	#ManageServices start "cron bind9 dnscrypt-proxy"
	Switch="$1"
	if [ "$Switch" != "UPGRADE" ]; then
		ManageServices start "cron"
	fi

	#### Check if service is OK and running
	if ! GetPid dnscrypt-proxy; then
		service dnscrypt-proxy status | tee -a $MySB_InstallDir/temp/continue
	fi
fi

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################