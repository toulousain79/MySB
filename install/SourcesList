#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### VARs
[ -z "${binCURL}" ] && binCURL="curl -skLS --retry 3"
case $(getconf LONG_BIT) in
    64) sArch="amd64" ;;
    *) sArch="i386" ;;
esac
if [ -n "${2}" ] && [ "${2}" == "buster" ]; then
    gsDebianRelease="${2}"
    export gsDebianRelease
fi

#### Install packages
sPackages=(netselect-apt apt-mirror debian-keyring debian-archive-keyring dirmngr ca-certificates apt-transport-https curl gnupg2)
gfnPackageBundleInstall "${sPackages[@]}"
echo "0 7 * * * root /usr/bin/apt-mirror > /var/spool/apt-mirror/var/cron.log" >/etc/cron.d/apt-mirror

#### Preferences
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/apt/stable.pref.tmpl /etc/apt/preferences.d/stable.pref
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/apt/testing.pref.tmpl /etc/apt/preferences.d/testing.pref
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/apt/unstable.pref.tmpl /etc/apt/preferences.d/unstable.pref
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/apt/experimental.pref.tmpl /etc/apt/preferences.d/experimental.pref

#### Apt tweaks
install -v -o root -g root -m 0644 "${MySB_InstallDir}"/templates/apt/etc.apt.apt.conf.d.99tweaks.tmpl /etc/apt/apt.conf.d/99tweaks

#### Global debian repos
# Detect mirrors
if gfnCheckCommand 0 netselect-apt; then
    case "${gsServerProvider}" in
        HETZNER) nMaxRepos=2 ;;
        *) nMaxRepos=3 ;;
    esac

    # Stable
    netselect-apt -a ${sArch} -n -t 10 -o "${MySB_InstallDir}"/temp/sources.list stable >"${MySB_InstallDir}"/files/fastest_stable_mirrors
    MirrorsList="$(grep 'http' "${MySB_InstallDir}"/files/fastest_stable_mirrors | sed -e 's/^ //g;s/\s+$//g;')"
    Count=1

    {
        echo "#### Generated by 'netselect-apt' for ${sArch} architecture"
        echo ""
    } >"${MySB_InstallDir}"/temp/sources.list

    if [ -z "${MirrorsList}" ]; then
        gfnCreateBasicSourcesList
    else
        for Mirror in ${MirrorsList}; do
            if [[ ${Count} -le ${nMaxRepos} ]]; then
                if (! grep -q "${Mirror}" "${MySB_InstallDir}"/temp/sources.list); then
                    ReleaseGPG="$($binCURL "${Mirror}"/dists/"${gsDebianRelease}"/Release.gpg)"
                    if [ -n "${ReleaseGPG}" ]; then
                        {
                            echo "# ${Mirror}"
                            echo "deb [arch=${sArch}] ${Mirror} ${gsDebianRelease} main contrib non-free"
                            echo "deb [arch=${sArch}] ${Mirror} ${gsDebianRelease}-updates main contrib non-free"
                            # echo "deb [arch=${sArch}] ${Mirror} ${gsDebianRelease}-backports main contrib non-free"
                            echo
                        } >>"${MySB_InstallDir}"/temp/sources.list
                    fi
                else
                    ((nMaxRepos++))
                fi

                ((Count++))
            fi
        done
        {
            echo "# Security"
            echo "deb [arch=${sArch}] http://security.debian.org stable/updates main contrib non-free"
        } >>"${MySB_InstallDir}"/temp/sources.list
        sed -i "s/stable/${gsDebianRelease}/g;" "${MySB_InstallDir}"/temp/sources.list
        [ -f "${MySB_InstallDir}"/temp/sources.list ] && mv -v "${MySB_InstallDir}"/temp/sources.list /etc/apt/sources.list
    fi

    # Testing
    netselect-apt -a ${sArch} -n -t 10 -o "${MySB_InstallDir}"/temp/sources.list testing >"${MySB_InstallDir}"/files/fastest_testing_mirrors
    MirrorsList="$(grep 'http' "${MySB_InstallDir}"/files/fastest_testing_mirrors | sed -e 's/^ //g;s/\s+$//g;')"
    Count=1

    {
        echo "#### Generated by 'netselect-apt' for ${sArch} architecture"
        echo ""
    } >"${MySB_InstallDir}"/temp/sources.list

    if [ -z "${MirrorsList}" ]; then
        gfnCreateBasicSourcesList
    else
        for Mirror in ${MirrorsList}; do
            if [[ ${Count} -le ${nMaxRepos} ]]; then
                if (! grep -q "${Mirror}" "${MySB_InstallDir}"/temp/sources.list); then
                    ReleaseGPG="$($binCURL "${Mirror}"/dists/"${gsDebianRelease}"/Release.gpg)"
                    if [ -n "${ReleaseGPG}" ]; then
                        {
                            echo "# ${Mirror}"
                            echo "deb [arch=${sArch}] ${Mirror} testing main contrib non-free"
                            echo "deb [arch=${sArch}] ${Mirror} testing-updates main contrib non-free"
                            echo
                        } >>"${MySB_InstallDir}"/temp/sources.list
                    fi
                else
                    ((nMaxRepos++))
                fi

                ((Count++))
            fi
        done

        {
            echo "# Security"
            echo "deb [arch=${sArch}] http://security.debian.org testing-security main contrib non-free"
        } >>"${MySB_InstallDir}"/temp/sources.list
        [ -f "${MySB_InstallDir}"/temp/sources.list ] && mv -v "${MySB_InstallDir}"/temp/sources.list /etc/apt/sources.list.d/testing.list
    fi

    rm -fv "${MySB_InstallDir}"/temp/sources.list*
else
    gfnCreateBasicSourcesList
fi

if [ "${gsServerProvider}" == "HETZNER" ]; then
    # https://wiki.hetzner.de/index.php/Hetzner_Aptitude_Mirror

    # Stable
    {
        echo ""
        echo "# Stable packages and security Updates from the Hetzner Debian Mirror"
        echo "deb [arch=${sArch}] http://mirror.hetzner.de/debian/packages ${gsDebianRelease} main contrib non-free"
        echo "deb [arch=${sArch}] http://mirror.hetzner.de/debian/packages ${gsDebianRelease}-updates main contrib non-free"
        # echo "deb [arch=${sArch}] http://mirror.hetzner.de/debian/packages ${gsDebianRelease}-backports main contrib non-free"
        echo "deb [arch=${sArch}] http://mirror.hetzner.de/debian/security ${gsDebianRelease}/updates main contrib non-free"
    } >>/etc/apt/sources.list

    # Testing
    {
        echo "# Testing packages and security Updates from the Hetzner Debian Mirror"
        echo "deb [arch=${sArch}] http://mirror.hetzner.de/debian/packages testing main contrib non-free"
        echo "deb [arch=${sArch}] http://mirror.hetzner.de/debian/packages testing-updates main contrib non-free"
        echo "deb [arch=${sArch}] http://mirror.hetzner.de/debian/security testing-security main contrib non-free"
    } >/etc/apt/sources.list.d/testing.list
fi

#### Local mirrors
if gfnCheckCommand 0 apt-mirror; then
    gfnCreateLocalMirror
fi

#### Force apt-get update
if [ "${gbIsReady_MySB_Db}" == "YES" ]; then
    cmdMySQL 'MySB_db' "UPDATE system SET apt_update = 1, apt_date = '$(date +%Y-%m-%d\ %H:%M:%S)' WHERE id_system='1';" -v
fi

#### PeerGuardian
if [ "${gbIsInstalled_PeerGuardian}" == "YES" ]; then
    if [ -z "$funcs_PeerGuardian" ]; then
        # shellcheck source=inc/funcs_by_script/funcs_PeerGuardian
        source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_PeerGuardian
    fi

    #### Generate base configs
    gfnPeerGuardianCreateBaseConfig

    # Restart PeerGuardian
    gfnManageServices start pglcmd
fi

#### Show new /etc/apt/sources.list
echo
cat /etc/apt/sources.list
for sRepo in /etc/apt/sources.list.d/*.list; do
    echo
    cat "${sRepo}"
done
echo

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
