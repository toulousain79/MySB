#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Switch (INSTALL/UPGRADE/INIT)
if [ ! -z "$1" ]; then
	LocSwitch="$1"
fi

#### Installation / Upgrade ?
if [ "$ToInstall_ownCloud" == "YES" ] && [ "$LocSwitch" != "INIT" ]; then
	if ! CheckCommand 0 smbclient; then
		PackagesManage install "smbclient"
	fi

	#### VARs
	source /etc/MySB/config_db
	ownCloudDir=$MySB_InstallDir"`Func_SQL_Command 'SELECT' 'MySB_db' 'dir' 'repositories' "name = 'ownCloud'"`"
	ownCloudToUpgrade="`Func_SQL_Command 'SELECT' 'MySB_db' 'upgrade' 'repositories' "name = 'ownCloud'"`"
	ownCloudUrl="`Func_SQL_Command 'SELECT' 'MySB_db' 'url' 'repositories' "name = 'ownCloud'"`"
	ownCloudFile="`Func_SQL_Command 'SELECT' 'MySB_db' 'file' 'repositories' "name = 'ownCloud'"`"
	MailFrom="`echo $MainUserEmail | cut -d "@" -f 1`"
	MailDomain="`echo $MainUserEmail | cut -d "@" -f 2`"
	TimeZoneEscaped="`echo $TimeZone | sed s,/,\\\\\\\\\\/,g`"
	TimeStamp=$(date +%s)
	ownCloudDataDirectory="/home/owncloud"

	#### STOP services
	ManageServices stop "php5-fpm nginx"

	#### PHP
	perl -pi -e "s/post_max_size = 10M/post_max_size = 20G/g" /etc/php5/fpm/php.ini
	perl -pi -e "s/upload_max_filesize = 10M/upload_max_filesize = 20G/g" /etc/php5/fpm/php.ini
	perl -pi -e "s/max_file_uploads = 20/max_file_uploads = 20000/g" /etc/php5/fpm/php.ini
	perl -pi -e "s/output_buffering = 4096/output_buffering = Off/g" /etc/php5/fpm/php.ini
	if [ -z "`cat /etc/php5/mods-available/apcu.ini | grep 'apc.enable_cli'`" ]; then
		echo "apc.enable_cli=1" >> /etc/php5/mods-available/apcu.ini
	fi
	perl -pi -e "s/^;env\[PATH\]/env\[PATH\]/g" /etc/php5/fpm/pool.d/www.conf

	#### NginX configuration
	cp -vf $MySB_InstallDir/templates/nginx/etc.nginx.locations.owncloud.conf.tmpl /etc/nginx/locations/ownCloud.conf
	perl -pi -e "s/<MySB_InstallDir>/$MySB_InstallDirEscaped/g" /etc/nginx/locations/ownCloud.conf
	chmod 0644 /etc/nginx/locations/ownCloud.conf

	#### ownCloud Core, is it a new install ?
	# Maybe ownCloud would be downloaded by 'DownloadAll' script ?
	# We can can check that by the presence of the old archive file.
	# Old archive exist ? So we force an upgrade and keep the current config file.
	if [ $ownCloudToUpgrade -eq 1 ]; then
		# Backup the config file if needed
		if [ -f $ownCloudDir/config/config.php ]; then
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ maintenance:mode --on"
			mv -v $ownCloudDir/config/config.php $MySB_InstallDir/temp/owncloud_config.php
		fi
		if [ -d $ownCloudDir/apps ]; then
			mv -v $ownCloudDir/apps $MySB_InstallDir/temp/owncloud_apps
		fi
		if [ -f $MySB_InstallDir/files/$ownCloudFile ]; then
			DeleteDirectory 1 "$ownCloudDir"
		fi
		# Maybe need to launch a script on next reboot ?
		# Disable the upgrade job
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "upgrade = '0', on_boot = '1', script = '$0'" "name = 'ownCloud'" '-echo'
	fi

	if [ ! -d $ownCloudDir ]; then
		if [ ! -f $MySB_InstallDir/files/$ownCloudFile ]; then
			curl --retry 2 -kSL -o "$MySB_InstallDir/files/$ownCloudFile" "$ownCloudUrl"
		fi
		unzip $MySB_InstallDir/files/$ownCloudFile -d $MySB_InstallDir/temp/
		SubDirownCloud="`unzip -l $MySB_InstallDir/files/$ownCloudFile | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d'`"
		if [ -d $MySB_InstallDir/temp/$SubDirownCloud ]; then
			mv -v $MySB_InstallDir/temp/$SubDirownCloud $ownCloudDir
		fi
	fi
	# Restore the old config file
	if [ -f $MySB_InstallDir/temp/owncloud_config.php ]; then
		mv -v $MySB_InstallDir/temp/owncloud_config.php $ownCloudDir/config/config.php
	fi
	if [ -d $MySB_InstallDir/temp/owncloud_apps ]; then
		if [ -d $ownCloudDir/apps ]; then
			rm -rfv $ownCloudDir/apps
		fi
		mv -v $MySB_InstallDir/temp/owncloud_apps $ownCloudDir/apps
	fi
	# Create needed directories
	if [ ! -d $ownCloudDir/assets ]; then
		mkdir -v $ownCloudDir/assets
		chown www-data:www-data $ownCloudDir/assets
		chmod 0755 $ownCloudDir/assets
	fi
	if [ ! -d $ownCloudDataDirectory ]; then
		mkdir -v $ownCloudDataDirectory
		chown www-data:www-data $ownCloudDataDirectory
	fi
	if [ ! -d /home/admin ]; then
		mkdir -v /home/admin
		chown www-data:www-data /home/admin
	fi
	# Clean some files and directories
	if [ -f $ownCloudDir/config/config.sample.php ]; then
		rm -fv $ownCloudDir/config/config.sample.php
	fi

	#### CRON
	crontab -u www-data -l > /tmp/crontab.tmp
	sed -i '/ownCloud/d' /tmp/crontab.tmp
	echo "*/15  *  *  *  * php -f $ownCloudDir/cron.php > /dev/null 2>&1 # ownCloud" | tee -a /tmp/crontab.tmp
	crontab -u www-data /tmp/crontab.tmp
	rm -f /tmp/crontab.tmp

	#### Create directories & change rights
	ManageDirectoriesAndFiles 'global'

	#### START services
	ManageServices start "php5-fpm nginx"

	#### Database directory does not exist ? So we do the first install !
	if [ ! -f $ownCloudDir/config/config.php ] && [ "`ls -la /var/lib/mysql/ownCloud_db/*.* | wc -l`" -le 1 ]; then
		chown -R www-data:www-data $ownCloudDir/
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ maintenance:install --database \"mysql\" --database-host \"localhost\" --database-name \"ownCloud_db\" --database-user \"MySB_user\" --database-pass \"$MySQL_MysbPassword\" --admin-user \"admin\" --admin-pass \"$MySQL_MysbPassword\" --data-dir \"$ownCloudDataDirectory\" --no-interaction"
		# Maybe need to launch a script on next reboot ?
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "on_boot = '1', script = '$0'" "name = 'ownCloud'" '-echo'
	fi

	#### Update database with new values
	# oc_appconfig
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_appconfig' "configvalue='yes' AND configkey='shareapi_allow_mail_notification'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_appconfig' 'appid,configkey,configvalue' "'core','shareapi_allow_mail_notification','yes'" '-echo'
	else
		Func_SQL_Command 'UPDATE' 'ownCloud_db' 'oc_appconfig' "configvalue = 'yes'" "appid='core' AND configkey='shareapi_allow_mail_notification'" '-echo'
	fi
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_appconfig' "configvalue='yes' AND configkey='shareapi_allow_public_notification'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_appconfig' 'appid,configkey,configvalue' "'core','shareapi_allow_public_notification','yes'" '-echo'
	else
		Func_SQL_Command 'UPDATE' 'ownCloud_db' 'oc_appconfig' "configvalue = 'yes'" "appid='core' AND configkey='shareapi_allow_public_notification'" '-echo'
	fi
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_appconfig' "configvalue='yes' AND configkey='shareapi_default_expire_date'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_appconfig' 'appid,configkey,configvalue' "'core','shareapi_default_expire_date','yes'" '-echo'
	else
		Func_SQL_Command 'UPDATE' 'ownCloud_db' 'oc_appconfig' "configvalue = 'yes'" "appid='core' AND configkey='shareapi_default_expire_date'" '-echo'
	fi
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_appconfig' "configkey='shareapi_enforce_links_password'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_appconfig' 'appid,configkey,configvalue' "'core','shareapi_enforce_links_password','yes'" '-echo'
	else
		Func_SQL_Command 'UPDATE' 'ownCloud_db' 'oc_appconfig' "configvalue = 'yes'" "appid='core' AND configkey='shareapi_enforce_links_password'" '-echo'
	fi
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_appconfig' "configkey='shareapi_enforce_expire_date'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_appconfig' 'appid,configkey,configvalue' "'core','shareapi_enforce_expire_date','no'" '-echo'
	else
		Func_SQL_Command 'UPDATE' 'ownCloud_db' 'oc_appconfig' "configvalue = 'no'" "appid='core' AND configkey='shareapi_enforce_expire_date'" '-echo'
	fi
	# oc_preferences
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_preferences' "configvalue='$EnvLang' AND userid='admin'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_preferences' 'userid,appid,configkey,configvalue' "'admin','core','lang','$EnvLang'" '-echo'
	fi
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_preferences' "configvalue='$MainUserEmail' AND userid='admin'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_preferences' 'userid,appid,configkey,configvalue' "'admin','settings','email','$MainUserEmail'" '-echo'
	fi
	IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'gid' 'oc_groups' "gid='MySB_users'"`"
	if [ -z $IfExist ]; then
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_groups' 'gid' "'MySB_users'" '-echo'
	fi
	Func_SQL_Command 'UPDATE' 'ownCloud_db' 'oc_preferences' "configvalue = '$TimeZone'" "configkey = 'timezone'" '-echo'

	if CheckCommand 0 $ownCloudDir/occ; then
		# ownCloud is installed
		Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', is_installed = '1'" "serv_name = 'ownCloud'" '-echo'
		# Force upgrade script on next boot if needed
		ScriptOnBoot="`Func_SQL_Command 'SELECT' 'MySB_db' 'script' 'repositories' \"on_boot = '1' AND name = 'ownCloud'\"`"
		if [ ! -z "$ScriptOnBoot" ]; then
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "script = '$0'" "name = 'ownCloud'" '-echo'
		fi
	fi

	#### Logrotate
	LogRotate 'owncloud'
fi

#### Upgrade on boot
if [ "$IsInstalled_ownCloud" == "YES" ] && [ "$LocSwitch" == "INIT" ]; then
	OnBoot="`Func_SQL_Command 'SELECT' 'MySB_db' 'on_boot' 'repositories' \"name = 'ownCloud'\"`"
	ownCloudDataDirectory="/home/owncloud"

	if [ "$OnBoot" -eq 1 ]; then
		#### VARs
		MailFrom="`echo $MainUserEmail | cut -d "@" -f 1`"
		MailDomain="`echo $MainUserEmail | cut -d "@" -f 2`"
		TimeZoneEscaped="`echo $TimeZone | sed s,/,\\\\\\\\\\/,g`"

		#### ownCloud upgrade
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ upgrade -v"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ maintenance:repair"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ maintenance:mimetype:update-db"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ maintenance:mimetype:update-js"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ maintenance:mode --off"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ app:enable files_external"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ app:enable notifications"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ background:cron"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files:cleanup"

		#### Generatinf a new config file
		if [ -d $ownCloudDir ] && [ -f $ownCloudDir/config/config.php ]; then
			#### Check old config file
			PasswordSalt="`su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:get passwordsalt"`"
			echo "PasswordSalt: "$PasswordSalt
			Secret="`su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:get secret"`"
			echo "Secret: "$Secret

			#### New config file
			# Get the new version
			Version="`su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:get version"`"
			Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "version = '$Version'" "name = 'ownCloud'" '-echo'
			cp -vf $MySB_InstallDir/templates/owncloud/owncloud.config.php.tmpl $ownCloudDir/config/config.php
			perl -pi -e "s/<version>/$Version/g" $ownCloudDir/config/config.php
			source /etc/MySB/config_db
			perl -pi -e "s/<db_password>/$MySQL_MysbPassword/g" $ownCloudDir/config/config.php
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set passwordsalt --value=$PasswordSalt"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set trusted_domains 1 --value=$HostNameFQDN:$Port_HTTPS"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set default_language --value=$EnvLang"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set lost_password_link --value=https://$HostNameFQDN:$Port_HTTPS/?user/change-password.html"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set mail_from_address --value=$MailFrom"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set mail_domain --value=$MailDomain"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set overwritehost --value=$HostNameFQDN:$Port_HTTPS"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set overwrite.cli.url --value=https://127.0.0.1:$Port_HTTPS/oc"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set logtimezone --value=$TimeZoneEscaped"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set secret --value=$Secret"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set assetdirectory --value=$MySB_InstallDirEscaped/web/apps/oc"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set skeletondirectory --value=$MySB_InstallDirEscaped/web/apps/oc/core/skeleton"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set versions_retention_obligation --value=auto"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set upgrade.disable-web --value=true"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set check_for_working_wellknown_setup --value=true"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set check_for_working_htaccess --value=true"
			su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ config:system:set updatechecker --value=false"
			chown www-data:www-data $ownCloudDir/config/config.php
			chmod 0640 $ownCloudDir/config/config.php
		fi

		#### Display 'config.php' for logs
		cat $ownCloudDir/config/config.php

		#### Backuping config file
		if [ -f $ownCloudDir/config/config.php ]; then
			cp -v $ownCloudDir/config/config.php $MySB_InstallDir/files/owncloud_config.php
		fi

		#### Updating database
		IdStorage=$(Func_SQL_Command 'SELECT' 'ownCloud_db' 'mount_id' 'oc_external_mounts' "mount_point='/MySB_Home'")
		if [ -z "$IdStorage" ]; then
			IdStorage=1

			# oc_external_mounts
			Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_external_mounts' 'mount_point,storage_backend,auth_backend,priority,type' "'/MySB_Home','local','null::null','150','1'" '-echo'
		fi

		# oc_external_applicable
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:applicable --remove-all $IdStorage"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:applicable --add-group MySB_users $IdStorage"

		# oc_external_config
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:config $IdStorage datadir '/home/\$user/'"

		# oc_external_options
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:option $IdStorage filesystem_check_changes 'true'"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:option $IdStorage encrypt 'false'"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:option $IdStorage previews 'true'"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:option $IdStorage enable_sharing 'true'"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:option $IdStorage encoding_compatibility 'false'"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:verify $IdStorage"
		su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files_external:option $IdStorage encoding_compatibility 'false'"

		IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_appconfig' "configkey='allow_user_mounting'"`"
		if [ -z $IfExist ]; then
			Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_appconfig' 'appid,configkey,configvalue' "'files_external','allow_user_mounting','yes'" '-echo'
		else
			Func_SQL_Command 'UPDATE' 'ownCloud_db' 'oc_appconfig' "configvalue = 'yes'" "appid='files_external' AND configkey='allow_user_mounting'" '-echo'
		fi
		IfExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'configvalue' 'oc_appconfig' "configkey='user_mounting_backends'"`"
		if [ ! -z $IfExist ]; then
			Func_SQL_Command 'DELETE' 'ownCloud_db' 'oc_appconfig' "appid='files_external' AND configkey='user_mounting_backends'"
		fi
		Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_appconfig' 'appid,configkey,configvalue' "'files_external','user_mounting_backends','ftp,dav,owncloud,sftp,amazons3,dropbox,googledrive,swift,smb,\\\OC\\\Files\\\Storage\\\SFTP_Key,\\\OC\\\Files\\\Storage\\\SMB_OC'" '-echo'

		#### External Storage (mount.json)
		if [ ! -f $ownCloudDataDirectory/mount.json ]; then
			cp -vf $MySB_InstallDir/templates/owncloud/home.owncloud.mount.json.tmpl $ownCloudDataDirectory/mount.json
			perl -pi -e "s/<IdStorage>/$IdStorage/g" $ownCloudDataDirectory/mount.json
		fi

		#### Create all existing MySB users AND Scanning users' files
		if [ -d $ownCloudDir/data ]; then
			rm -rfv $ownCloudDir/data
		fi
		for seedUser in $UsersList; do
			if [ ! -d $ownCloudDataDirectory/$seedUser ]; then
				mkdir -v $ownCloudDataDirectory/$seedUser
				chown www-data:www-data $ownCloudDataDirectory/$seedUser
				chmod 0755 $ownCloudDataDirectory/$seedUser
			fi
			UserExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'uid' 'oc_users' "uid='$seedUser'"`"
			if [ -z "$UserExist" ]; then
				FnUserMail="`Func_SQL_Command 'SELECT' 'MySB_db' 'users_email' 'users' "users_ident = '$seedUser'"`"
				OC_PASS="`GenPassword 8`"
				export OC_PASS
				TimeStamp=$(date +%s)
				su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ user:add --password-from-env --display-name=\"$seedUser\" --group=\"MySB_users\" $seedUser" &> /dev/null
				Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_preferences' "userid,appid,configkey,configvalue" "'admin','files_external','/Home_$seedUser','$TimeStamp'"
				Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_preferences' "userid,appid,configkey,configvalue" "'$seedUser','core','lang','$EnvLang'"
				Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_preferences' "userid,appid,configkey,configvalue" "'$seedUser','settings','email','$EnvLang'"
				Func_SQL_Command 'INSERT' 'ownCloud_db' 'oc_storages' "id" "'local::/home/$seedUser/'"
				Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "init_password = '1'" "users_ident = '$seedUser'" '-echo'
			else
				su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ files:scan --path=\"/$seedUser/files/MySB_Home\""
			fi
			unset UserExist
		done

		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "on_boot = '0', script = ''" "name = 'ownCloud'"
	fi
fi

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################