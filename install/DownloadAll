#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### file to allow the install to continue or not
if [ -f $MySB_InstallDir/temp/continue ]; then
	rm -vf $MySB_InstallDir/temp/continue
fi

#### VARs
LocSwitch="$1"
RemovePluginCakebox=NO
RemovePluginManager=NO

#### Get all repos
AllRepos="`Func_SQL_Command 'SELECT' 'MySB_db' '*' 'repositories' \"active = '1'\"`"
IFS=$'\n'
for Repo in $AllRepos; do
	RepoType="`echo $Repo | awk '{split($0,a,"|"); print a[2]}'`"
	RepoDir="`echo $Repo | awk '{split($0,a,"|"); print a[3]}'`"
	RepoName="`echo $Repo | awk '{split($0,a,"|"); print a[4]}'`"
	RepoVersion="`echo $Repo | awk '{split($0,a,"|"); print a[5]}'`"
	ToUpgrade="`echo $Repo | awk '{split($0,a,"|"); print a[6]}'`"
	RepoFile="`echo $Repo | awk '{split($0,a,"|"); print a[7]}'`"
	RepoURL="`echo $Repo | awk '{split($0,a,"|"); print a[8]}'`"
	Error=0

	echo
	echo "########## $RepoType: $RepoName"
	case "$RepoName" in
		'Lets Encrypt')
			echo "Directory : "$RepoDir
		;;
		*)
			echo "Directory : "$MySB_InstallDir$RepoDir
		;;
	esac
	echo "Version : "$RepoVersion
	echo "File : "$RepoFile
	echo "To upgrade : `echo $ToUpgrade | sed 's/0/NO/g;' | sed 's/1/YES/g;'`"
	echo "URL : "$RepoURL
	echo

	# Delete old repo file
	if [ $ToUpgrade -eq 1 ]; then
		# Backup some config files or directory
		case "$RepoName" in
			'ownCloud')
				if [ -f $ownCloudDir/config/config.php ]; then
					su -s /bin/sh www-data -c "/usr/bin/php $ownCloudDir/occ maintenance:mode --on"
					mv -v $ownCloudDir/config/config.php $MySB_InstallDir/temp/owncloud_config.php
				fi
				if [ -d $ownCloudDir/apps ]; then
					mv -v $ownCloudDir/apps $MySB_InstallDir/temp/owncloud_apps
				fi
				# Maybe need to launch a script on next reboot ?
				Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "on_boot = '1', script = '$MySB_InstallDir/install/ownCloud'" "name = '$RepoName'" '-echo'
			;;
			'Seedbox-Manager')
				if [ -d $ManagerDir/conf ]; then
					mv -v $ManagerDir/conf $MySB_InstallDir/temp/sm_conf
				fi
			;;
			'ruTorrent')
				if [ -d $RutorrentDir/share/users ]; then
					mv -v $RutorrentDir/share/users $MySB_InstallDir/temp/rutorrent_share_users
				fi
			;;
		esac

		# We can delete repo dir ONLY IF repo file exist...
		if [ -f $MySB_InstallDir/files/$RepoFile ]; then
			case "$LocSwitch" in
				'UPGRADE'|'REFRESH')
					DeleteDirectory 1 "$MySB_InstallDir$RepoDir"
				;;
			esac
		fi

		# Disable the upgrade job
		Func_SQL_Command 'UPDATE' 'MySB_db' 'repositories' "upgrade = '0'" "name = '$RepoName'" '-echo'
	fi

	# Download all
	case "$RepoType" in
		'TARGZ')
			if [ ! -f $MySB_InstallDir/files/$RepoFile ]; then
				curl --retry 2 -kSL -o "$MySB_InstallDir/files/$RepoFile" "$RepoURL"
				Error=$?
			fi
			if [ ! -d $MySB_InstallDir$RepoDir ] && [ $Error -eq 0 ]; then
				tar -zxvf $MySB_InstallDir/files/$RepoFile -C $MySB_InstallDir/temp/
				Error=$?
				SubDir="`tar -ztf $MySB_InstallDir/files/$RepoFile | cut -d '/' -f 1 | uniq`"
				if [ -d $MySB_InstallDir/temp/$SubDir ]; then
					mv -v $MySB_InstallDir/temp/$SubDir $MySB_InstallDir$RepoDir
					chown -R root:root $MySB_InstallDir$RepoDir
					Error=$?
				fi
			fi
		;;
		'WBM')
			if [ ! -f $MySB_InstallDir$RepoDir/$RepoFile ]; then
				curl --retry 2 -kSL -o "$MySB_InstallDir$RepoDir/$RepoFile" "$RepoURL"
				Error=$?
			fi
		;;
		'SVN')
			case "$LocSwitch" in
				"UPGRADE")
					if [ -d $MySB_InstallDir$RepoDir ]; then
						svn up --non-interactive --trust-server-cert $MySB_InstallDir$RepoDir
						Error=$?
						if [ $Error -gt 0 ]; then
							svn switch $RepoURL $MySB_InstallDir$RepoDir
							Error=$?
						fi
					else
						# GitHub project download directly from 'github.com', so it is a ZIP file.
						if [ -f $MySB_InstallDir/files/$RepoFile ]; then
							unzip $MySB_InstallDir/files/$RepoFile -d $MySB_InstallDir/temp/
							Error=$?
							SubDir="`unzip -l $MySB_InstallDir/files/$RepoFile | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d'`"
							if [ -d $MySB_InstallDir/temp/$SubDir ]; then
								mv -v $MySB_InstallDir/temp/$SubDir $MySB_InstallDir$RepoDir
								Error=$?
							fi
						else
							svn co --non-interactive --trust-server-cert $RepoURL $MySB_InstallDir$RepoDir
							Error=$?
						fi
					fi
				;;
				*)
					if [ ! -d $MySB_InstallDir$RepoDir/.svn ]; then
						svn co --non-interactive --trust-server-cert $RepoURL $MySB_InstallDir$RepoDir
						Error=$?
					fi
				;;
			esac
		;;
		'GIT')
			case "$LocSwitch" in
				"UPGRADE")
					case "$RepoName" in
						'Lets Encrypt')
							TempRepoDir="$RepoDir"
						;;
						*)
							TempRepoDir="$MySB_InstallDir$RepoDir"
						;;
					esac

					# GitHub project download directly from 'github.com', so it is a ZIP file.
					if [ -f $MySB_InstallDir/files/$RepoFile ]; then
						unzip $MySB_InstallDir/files/$RepoFile -d $MySB_InstallDir/temp/
						Error=$?
						SubDir="`unzip -l $MySB_InstallDir/files/$RepoFile | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d'`"
						if [ -d $MySB_InstallDir/temp/$SubDir ] && [ ! -d $TempRepoDir ]; then
							mv -v $MySB_InstallDir/temp/$SubDir $TempRepoDir
							Error=$?
						fi
					else
						git clone $RepoURL $TempRepoDir
						Error=$?
						if [ $Error -eq 0 ]; then
							cd $TempRepoDir/
							git checkout -b $(git describe --tags $(git rev-list --tags --max-count=1))
							Error=$?
						fi
					fi
				;;
				*)
					if [ ! -d $MySB_InstallDir$RepoDir ]; then
						# GitHub project download directly from 'github.com', so it is a ZIP file.
						if [ -f $MySB_InstallDir/files/$RepoFile ]; then
							unzip $MySB_InstallDir/files/$RepoFile -d $MySB_InstallDir/temp/
							Error=$?
							SubDir="`unzip -l $MySB_InstallDir/files/$RepoFile | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d'`"
							if [ -d $MySB_InstallDir/temp/$SubDir ]; then
								case "$RepoName" in
									'Lets Encrypt')
										mv -v $MySB_InstallDir/temp/$SubDir $RepoDir
									;;
									*)
										mv -v $MySB_InstallDir/temp/$SubDir $MySB_InstallDir$RepoDir
									;;
								esac
								Error=$?
							fi
						else
							git clone $RepoURL $MySB_InstallDir$RepoDir
							Error=$?
						fi
					fi
				;;
			esac
		;;
		'ZIP')
			if [ ! -f $MySB_InstallDir/files/$RepoFile ]; then
				curl --retry 2 -kSL -o "$MySB_InstallDir/files/$RepoFile" "$RepoURL"
				Error=$?
			fi
			if [ ! -d $MySB_InstallDir$RepoDir ] && [ $Error -eq 0 ]; then
				unzip $MySB_InstallDir/files/$RepoFile -d $MySB_InstallDir/temp/
				Error=$?
				SubDir="`unzip -l $MySB_InstallDir/files/$RepoFile | awk '{ print $4 }' | cut -d '/' -f 1 | uniq | sed '1,3d;$d'`"
				if [ -d $MySB_InstallDir/temp/$SubDir ]; then
					mv -v $MySB_InstallDir/temp/$SubDir $MySB_InstallDir$RepoDir
					chown -R root:root $MySB_InstallDir$RepoDir
					Error=$?
				fi
			fi
		;;
		'CURL')
			if [ ! -f $MySB_InstallDir/files/$RepoFile ]; then
				curl --insecure -S $RepoURL | php -- --install-dir=$MySB_InstallDir/files/
				Error=$?
			fi
			if [ -f $MySB_InstallDir/files/$RepoFile ]; then
				cp -v $MySB_InstallDir/files/$RepoFile $RepoDir
				Error=$?
			fi
		;;
	esac

	# Restore some config files or directory
	case "$RepoName" in
		'ownCloud')
			if [ -f $MySB_InstallDir/temp/owncloud_config.php ]; then
				mv -v $MySB_InstallDir/temp/owncloud_config.php $ownCloudDir/config/config.php
			fi
			if [ -d $MySB_InstallDir/temp/owncloud_apps ]; then
				if [ -d $ownCloudDir/apps ]; then
					rm -rfv $ownCloudDir/apps
				fi
				mv -v $MySB_InstallDir/temp/owncloud_apps $ownCloudDir/apps
			fi
		;;
		'Seedbox-Manager')
			if [ -d $MySB_InstallDir/temp/sm_conf ]; then
				if [ -d $ManagerDir/conf ]; then
					rm -rfv $ManagerDir/conf
				fi
				mv -v $MySB_InstallDir/temp/sm_conf $ManagerDir/conf
			fi
		;;
		'ruTorrent')
			if [ -d $MySB_InstallDir/temp/rutorrent_share_users ]; then
				if [ -d $RutorrentDir/share/users ]; then
					rm -rfv $RutorrentDir/share/users
				fi
				mv -v $MySB_InstallDir/temp/rutorrent_share_users $RutorrentDir/share/users
			fi
		;;
	esac

	# Switch on errors
	if [ $Error -gt 0 ]; then
		case "$RepoName" in
			'Cakebox-Light')
				RemovePluginCakebox=YES
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', is_installed = '0'" "serv_name = 'Cakebox-Light'" '-echo'
			;;
			'Seedbox-Manager')
				RemovePluginManager=YES
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', is_installed = '0'" "serv_name = 'Seedbox-Manager'" '-echo'
			;;
			'Composer'|'NodeJS')
				RemovePluginCakebox=YES
				RemovePluginManager=YES
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', is_installed = '0'" "serv_name = 'Cakebox-Light'" '-echo'
				Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '0', is_installed = '0'" "serv_name = 'Seedbox-Manager'" '-echo'
				echo "$RepoURL" >> $MySB_InstallDir/temp/continue
			;;
			'XMLRPC'|'LibTorrent'|'rTorrent'|'ruTorrent'|'ruTorrents Official Plugins')
				echo "$RepoURL" >> $MySB_InstallDir/temp/continue
			;;
		esac
	fi
done
unset IFS

if [ "$RemovePluginCakebox" == "YES" ]; then
	PluginDir="`Func_SQL_Command 'SELECT' 'MySB_db' 'dir' 'repositories' "name = 'ruTorrent Plugin Link Cakebox'"`"
	echo
	echo "########## Remove: ruTorrent Plugin Link Cakebox"
	echo "Directory : "$PluginDir
	echo
	DeleteDirectory 1 "$MySB_InstallDir$PluginDir"
fi
if [ "$RemovePluginManager" == "YES" ]; then
	PluginDir="`Func_SQL_Command 'SELECT' 'MySB_db' 'dir' 'repositories' "name = 'ruTorrent Plugin Link Manager'"`"
	echo
	echo "########## Remove: ruTorrent Plugin Link Manager"
	echo "Directory : "$PluginDir
	echo
	DeleteDirectory 1 "$MySB_InstallDir$PluginDir"
fi

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################