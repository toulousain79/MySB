#!/bin/bash
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

##################### VARS ###########################################
gsCurrentVersion="v4.0"
MySB_InstallDir="/opt/MySB"
EnvLang="$1"
# Colors
CEND="\033[0m"
CBLACK="\033[0;30m"
CRED="\033[1;31m"
CGREEN="\033[1;32m"
CYELLOW="\033[1;33m"
CBLUE="\033[1;34m"

##################### FUNCTIONS ######################################

# English mesages
LoadEnglish() {
	AnswerYES="YES"
	AnswerNO="NO"
	OnlyForDebian="${CRED}MySB script is designed only for Debian 7 Wheezy (32 or 64bits).
Systems with a kernel PVE is no longer supported.
A valid Internet access is required.
A default Debian kernel is also required.
Aborting !$CEND"

	RebootBeforeInstall="${CBLUE}You need to reboot your server before install MySB.
After the reboot, you can start again '$0'.$CEND

${CYELLOW}Do you want to reboot now ?$CEND"

	MessageIsReady="${CYELLOW}All is ok to start MySB installation.
The following actions will be performed.
	1) Updating sources (verbosely)
	2) Update System (verbosely)
	3) Installation of some mandatory pakages (verbosely)
	4) Simple adaptation of sources (silently)
	5) Creation of databases (silently)
	4) You will have to answer some questions
	5) Installation of MySB (silently)

The installation may take 30 to 60 minutes around.
This will depend on your server configuration and choice of services to install.

Are you ready to install MySB ? (yes/no)$CEND "

	CustomKernel="${CRED}Your server use a custom kernel (maybe installed by OVH, DigiCube or other).
This kernel does not support networking modules required by Iptables, PeerGuardian and OpenVPN.
If you want install MySB, you must install a Debian standard kernel.$CEND

${CYELLOW}You have 2 options:
	You have 2 options:
		- Either we try to install a standard Debian kernel (not guaranteed outcome).
		- Either you do a fresh install of your server using the OVH Manager interface as follows:
			1) When choosing the OS, check \"Custom install\"
			2) Then on the options page (hostname, SSH key), check \"Use of kernel distribution\"
			3) Continue and confirm the installation of your system
			4) From there you can proceed with installing MySB$CEND

${CBLUE}Type$CEND ${CGREEN}YES$CEND ${CBLUE}for try to install a standard Debian kernel.$CEND
${CBLUE}Type$CEND ${CGREEN}NO$CEND ${CBLUE}for stop the script now and proceed to an new install yourself.$CEND

${CBLUE}What do you want to do ?$CEND"

	BannerAdvertising="${CRED}############################################################$CEND
${CRED}#$CEND ${CYELLOW}At the end of the installation, you will receive an email.$CEND
${CRED}#$CEND ${CYELLOW}It list informations about your account.$CEND
${CRED}# IMPORTANT:$CEND ${CYELLOW}Remember to also to check the SPAM folder of your mail account...$CEND
${CRED}############################################################$CEND"

	KernelManualInstall="${CRED}I can't find the last kernel for your server, please install it yourself.$CEND"
	LatestKernel="${CYELLOW}Latest Debian kernel	: $CEND"
	LetsGo="${CYELLOW}OK, let's go !$CEND"
	SeeYouLater="${CYELLOW}OK, see you later...$CEND"
	WhereToInstall="${CBLUE}Where do you want to install MySB ? (Hit enter for default choice) [$MySB_InstallDir]$CEND"
	UpdatingSource="${CBLUE}Updating Debian source lists$CEND... "
	SomethingWrong="${CRED}Looks like something was wrong during the update, aborting !$CEND"
	UpgradingSystem="${CBLUE}Upgrading the system$CEND"
	NeededPackage="${CBLUE}Installing some needed packages$CEND... "
	DirNotEmpty="${CYELLOW}The selected folder [$MySB_InstallDir] is not empty, choose another one:$CEND"
	DownloadingGithub="${CBLUE}Downloading files from GitHub into [$MySB_InstallDir]$CEND"
	Done="${CGREEN}Done !$CEND"
	Failed="${CRED}Failed !$CEND"
	CantWriteConfig="${CRED}I can't write the config file \"/etc/MySB/config\", aborting !$CEND"
	LoadingVar="${CBLUE}Loading variables and functions$CEND..."
	CreatingDir="${CBLUE}Creating directories$CEND..."
	SourcesDebian="${CBLUE}Generating of Debian 'source.lists' file$CEND..."
	CreatingMySQL_DB="${CBLUE}Creating MySQL databases$CEND..."
	QStartInstall="How do you want to start the installation ? Type 'manual' or 'auto' ?"
	StartingScreen="${CBLUE}Starting SCREEN session...$CEND"
	PleaseWait="${CRED}Please wait $CEND"
	AlreadyExecuted="${CRED}MySB is already started with SCREEN, aborting !$CEND"
	AlreadyInstalled="${CRED}MySB is already installed, aborting!$CEND"
	ToUpgradeUse="${CBLUE}To upgrade MySB, thank you to use the following command.$CEND"
}

# French mesages
LoadFrench() {
	AnswerYES="OUI"
	AnswerNO="NON"
	OnlyForDebian="${CRED}MySB est conçu uniquement pour Debian 7 Wheezy (32 ou 64bits).
Les systèmes avec un noyau PVE ne sont pas supportés.
Un accès Internet valide est requis.
Un noyau Debian standard est également nécessaire.
Abandon !$CEND"

	RebootBeforeInstall="${CBLUE}Vous devez redémarrer votre serveur avant d'installer MySB.
Après le redémarrage, vous pourrez exécuter '$0' à nouveau.$CEND

${CYELLOW}Voulez-vous redémarrer maintenant ?$CEND"

	MessageIsReady="${CYELLOW}Tout est OK pour démarrer l'installation de MySB.
Les actions suivantes vont être exécutées.
	1) Mise à jour rapide des sources (verbeusement)
	2) Mise à jour du système (verbeusement)
	3) Installation de quelques paquets obligatoires (verbeusement)
	4) Adaptation simple des sources (en silence)
	5) Création des bases de données (en silence)
	6) Vous devrez répondre à quelques questions
	7) Installation de MySB (en silence)

L'installation peut prendre de 30 à 60 minutes environ.
Cela dépendra de la configuration de votre serveur et du choix des services à installer.

Êtes-vous prêt à installer MySB ? (oui/non)$CEND "

	CustomKernel="${CRED}Votre serveur utilise un noyau personnalisé (peut-être installé par OVH, DigiCube ou autre).
Ce noyau ne supporte pas les modules requis par IPtables, OpenVPN et PeerGuardian.
Si vous voulez installer MySB, vous devez installer un noyau Debian standard.$CEND

${CYELLOW}Vous avez 2 possibilités:
		- Soit nous essayons d'installer un noyau Debian standard (résultat non garanti).
		- Soit vous faites une nouvelle installation de votre serveur en utilisant l'interface du gestionnaire OVH comme suit:
			1) Lors du choix du système d'exploitation, consultez \"Installation personnalisée\"
			2) Ensuite, sur la page des options (nom d'hôte, clé SSH), vérifiez \"Utilisez le noyau de la distribution\"
			3) Continuez et confirmez l'installation de votre système
			4) De là, vous pouvez procéder à l'installation de MySB$CEND

${CBLUE}Tapez$CEND ${CGREEN}OUI$CEND ${CBLUE}pour essayer d'installer un noyau Debian standard.$CEND
${CBLUE}Tapez$CEND ${CGREEN}NON$CEND ${CBLUE}pour arrêter le script maintenant et procéder à une nouvelle installation d'un kernel vous-même.$CEND

${CBLUE}Que voulez-vous faire?$CEND"

	BannerAdvertising="${CRED}############################################################$CEND
${CRED}#$CEND ${CYELLOW}A la fin de l'installation, vous recevrez un e-mail.$CEND
${CRED}#$CEND ${CYELLOW}Il listera les informations sur votre compte.$CEND
${CRED}# IMPORTANT:$CEND ${CYELLOW}Pensez à vérifier également le dossier SPAM de votre compte de messagerie...$CEND
${CRED}############################################################$CEND"

	KernelManualInstall="${CRED}Je ne peux pas trouver le dernier noyau pour votre serveur, merci d'installer vous-même un noyau standard.$CEND"
	LatestKernel="${CYELLOW}Dernier noyau debian	: $CEND"
	LetsGo="${CYELLOW}OK, c'est parti !$CEND"
	SeeYouLater="${CYELLOW}OK, à plus tard ...$CEND"
	WhereToInstall="${CBLUE}Où voulez-vous installer MySB ? (Appuyez sur Entrée pour le choix par défaut) [$MySB_InstallDir]$CEND"
	UpdatingSource="${CBLUE}Mise à jour des listes sources de Debian$CEND... "
	SomethingWrong="${CRED}On dirait que quelque chose clochait au cours de la mise à jour, abandon!$CEND"
	UpgradingSystem="${CBLUE}Mise à niveau du système$CEND"
	NeededPackage="${CBLUE}Installation des paquets nécessaires$CEND... "
	DirNotEmpty="${CYELLOW}Le dossier sélectionné [$MySB_InstallDir] n'est pas vide, choisissez en un autre:$CEND"
	DownloadingGithub="${CBLUE}Téléchargement des fichiers provenant de GitHub dans [$MySB_InstallDir]$CEND"
	Done="${CGREEN}Fait !$CEND"
	Failed="${CRED}Echoué !$CEND"
	CantWriteConfig="${CRED}Je ne peux pas écrire dans le fichier \"/etc/MySB/config\", abandon !$CEND"
	LoadingVar="${CBLUE}Chargement des variables et fonctions$CEND..."
	CreatingDir="${CBLUE}Création des répertoires$CEND..."
	SourcesDebian="${CBLUE}Génération du fichier 'sources.list' pour Debian$CEND..."
	CreatingMySQL_DB="${CBLUE}Création des bases de données MySQL$CEND..."
	QStartInstall="Comment voulez-vous lancer l'installation? Tapez 'manuel' ou 'auto'."
	StartingScreen="${CBLUE}Démarrage de la session SCREEN...$CEND"
	PleaseWait="${CRED}Merci de patienter $CEND"
	AlreadyExecuted="${CRED}L'installation de MySB est déjà exécutée avec SCREEN, abandon !$CEND"
	AlreadyInstalled="${CRED}MySB est déjà installé, abandon!$CEND"
	ToUpgradeUse="${CBLUE}Pour mettre à jour MySB, merci d'utiliser la commande suivante.$CEND"
}

# To execute when this script will exited
ExitOnError() {
	if [ -f $MySB_InstallDir/inc/includes_after ]; then source $MySB_InstallDir/inc/includes_after; fi
	case "$1" in
		0)	echo -e "$2"; exit 0;;
		*)	echo -e "$SomethingWrong"; echo -e "$2"; exit 1;;
	esac
}

# Kernel replace ?
KernelReplace() {
	local KernelFind Answer

	if [ -z "`dpkg -l | grep 'aptitude'`" ]; then
		KernelFind="`apt-cache search linux-image | grep -v 'rt-' | grep -v 'dummy' | grep -v 'dbg' | grep 'image' |  awk '{ print $1 }' | grep '[.]'`"
	else
		KernelFind="`aptitude -q search linux-image | grep -v 'rt-' | grep -v 'dummy' | grep -v 'dbg' | awk '{ print $2 }' | grep '[.]'`"
	fi

	echo
	if [ ! -z "$KernelFind" ]; then
		echo -e "$LatestKernel${CGREEN}$KernelFind$CEND"
		echo
		$AptCommand -y --assume-yes -o Acquire::Check-Valid-Until=false update
		$AptCommand -y --assume-yes -V -o Dpkg::Options::="--force-confold" upgrade
		$AptCommand -y --assume-yes install $KernelFind
		if [ -f /etc/grub.d/06_OVHkerne ]; then
			mv /etc/grub.d/06_OVHkernel /etc/grub.d/99_OVHkernel
			update-grub
		fi
		echo
		echo -e -n "$RebootBeforeInstall"

		read Answer
		case ${Answer:0:1} in
			y|Y|yes|YES|o|O|oui|OUI)
				echo -e "$LetsGo"
				fnCountDown 3
				reboot
				ExitOnError 0
			;;
			n|N|no|NO|non|NON)
				Continue=1
			;;
		esac
	else
		echo -e "$LatestKernel${CRED}??$CEND"
		echo -e "$KernelManualInstall"
		Continue=1
	fi
}

# Banner
BannerInstall() {
	clear
	#### Banner
	echo -e "${CGREEN}############################################################$CEND"
	echo -e "${CGREEN}#$CEND"
	echo -e "${CGREEN}#$CEND 			${CYELLOW}MySB$CEND ${CRED}$gsCurrentVersion$CEND"
	echo -e "${CGREEN}#$CEND"
	echo -e "${CGREEN}############################################################$CEND"
	echo

	#### Advertising
	echo -e "$BannerAdvertising"
	echo
}

# Count down...
fnCountDown() {
	for ((i = $1; i >= 0; i -= 1)); do
		echo -n " $i"
		sleep 1
	done
	echo
}

SystemChecks() {
	local nContinue sOS_Id sOS_Ver sOS_Arch sPVE_Kernel sOVH_Kernel sFlex_Kernel sAnswer

	nContinue=0

	#### Must be Debian 7 Wheezy (x86_64)
	if type -P lsb_release > /dev/null; then
		sOS_Id="`lsb_release -is`"
		sOS_Ver="`lsb_release -rs | cut -d '.' -f 1`"
	else
		if [ -f /etc/lsb-release ]; then
			sOS_Id="`cat /etc/lsb-release | grep 'DISTRIB_ID' | cut -d '=' -f 2`"
			sOS_Ver="`cat /etc/lsb-release | grep 'DISTRIB_RELEASE' | cut -d '=' -f 2`"
		elif [ -f /etc/issue.net ]; then
			sOS_Id="`cat /etc/issue.net | awk '{ print $1 }' | sed -e 's/^$//g;'`"
			sOS_Ver="`cat /etc/issue.net | awk '{ print $3 }' | sed -e 's/^$//g;'`"
		fi
	fi
	sOS_Arch="`dpkg --print-architecture`"
	sPVE_Kernel="`uname -r | grep 'pve'`"
	sOVH_Kernel="`uname -r | grep 'xxxx'`"
	sFlex_Kernel="`uname -a | grep 'Ubuntu'`"
	echo -e "${CYELLOW}Architecture	: $CEND${CGREEN}$sOS_Arch$CEND"
	if [ "$sOS_Id" != "Debian" ]; then
		if [ -f /etc/debian_version ]; then
			echo -e "${CYELLOW}Distributor ID	: $CEND${CGREEN}$sOS_Id$CEND"
			sOS_Ver="`cat /etc/debian_version | cut -d '.' -f 1`"
		else
			echo -e "${CYELLOW}Distributor ID	: $CEND${CRED}$sOS_Id$CEND"
			nContinue=1
		fi
	else
		echo -e "${CYELLOW}Distributor ID	: $CEND${CGREEN}$sOS_Id$CEND"
	fi
	case "$sOS_Ver" in
		7)	echo -e "${CYELLOW}Release		: $CEND${CGREEN}$sOS_Ver$CEND";;
		*)	echo -e "${CYELLOW}Release		: $CEND${CRED}$sOS_Ver$CEND"; nContinue=1;;
	esac

	#### Check kernel if is a PVE kernel
	if [ ! -z "$sPVE_Kernel" ]; then
		nContinue=1
		echo -e "${CYELLOW}PVE kernel	: $CEND${CRED}$AnswerYES$CEND"
	else
		echo -e "${CYELLOW}PVE kernel	: $CEND${CGREEN}$AnswerNO$CEND"
	fi

	#### Must be root
	if [[ $EUID -ne 0 ]]; then
		nContinue=1
		echo -e "${CYELLOW}Root		: $CEND${CRED}$AnswerNO$CEND"
	else
		echo -e "${CYELLOW}Root		: $CEND${CGREEN}$AnswerYES$CEND"
	fi

	#### Check internet access
	ping -c4 -w4 github.com >> /tmp/`basename $0`.log
	if [ $? -gt 0 ]; then
		nContinue=1
		echo -e "${CYELLOW}Internet	: $CEND${CRED}$AnswerNO$CEND"
	else
		echo -e "${CYELLOW}Internet	: $CEND${CGREEN}$AnswerYES$CEND"
	fi

	#### Check kernel if is an Ubuntu kernel (DigiCube)
	if [ ! -z "$sFlex_Kernel" ]; then
		nContinue=1
		echo -e "${CYELLOW}Ubuntu kernel	: $CEND${CRED}$AnswerYES$CEND"
	else
		echo -e "${CYELLOW}Ubuntu kernel	: $CEND${CGREEN}$AnswerNO$CEND"
	fi

	#### Check kernel if is an OVH kernel, replace the kernel if needed
	if [ ! -z "$sOVH_Kernel" ]; then
		echo -e "${CYELLOW}OVH kernel	: $CEND${CRED}$AnswerYES$CEND"
	else
		echo -e "${CYELLOW}OVH kernel	: $CEND${CGREEN}$AnswerNO$CEND"
	fi
	if [ ! -z "$sOVH_Kernel" ]; then
		sAnswer=""
		while [ -z "$sAnswer" ]; do
			clear
			echo -e -n "$CustomKernel"
			read sAnswer
			case ${sAnswer:0:1} in
				y|Y|yes|YES|o|O|oui|OUI)
					echo -e "$LetsGo"
					fnCountDown 3
					KernelReplace
				;;
				n|N|no|NO|non|NON)
					nContinue=1
				;;
				*)	unset sAnswer;;
			esac
		done
	fi

	[ $nContinue -gt 0 ] && ExitOnError 1 "$OnlyForDebian"
}

##################### INIT ###########################################

# Start Log
clear
echo "------------------------------------------------------------" > /tmp/`basename $0`.log
echo "START Err: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` "-" `basename $0` >> /tmp/`basename $0`.log
echo "------------------------------------------------------------" >> /tmp/`basename $0`.log
exec 2>> /tmp/`basename $0`.log

# Language select
if [ -z "$EnvLang" ]; then
	EnvLang="`echo ${LANG:0:2}`"
fi
case "$EnvLang" in
	en)	LoadEnglish;;
	fr)	LoadFrench;;
	*)	EnvLang="en"; LoadEnglish;;
esac

# Banner
BannerInstall

# Some verifications
SystemChecks

# apt-get OR aptitude ?
if [ -z "`dpkg -l | grep 'aptitude'`" ]; then
	AptCommand="apt-get"
else
	AptCommand="aptitude -q"
fi

# Check if ths script is already running with screen
if type -P screen > /dev/null; then
	if [ ! -z "`screen -ls | grep MySB 2>/dev/null`" ]; then
		ExitOnError 1 "$AlreadyExecuted"
	fi
fi

# Check if MySB is already installed
if [ -s $MySB_InstallDir/version ]; then # Upgrade ?
	echo -e "$AlreadyInstalled"
	echo -e "$ToUpgradeUse"
	echo -e "${CGREEN}	MySB_UpgradeMe$CEND"
	ExitOnError 1
fi

# A fresh install ?
Answer=""
while [ -z "$Answer" ]; do
	echo
	echo
	echo -e -n "$MessageIsReady"

	read Answer
	case ${Answer:0:1} in
		y|Y|yes|YES|o|O|oui|OUI)
			echo -e "$LetsGo"
			# Select destination directory
			echo
			echo -e -n "$WhereToInstall"
			read MySB_InstallDir
			if [ -z "$MySB_InstallDir" ]; then
				MySB_InstallDir="/opt/MySB"
			fi
			IfEmpty="`ls -a $MySB_InstallDir 2> /dev/null | sed -e "/\.$/d" | wc -l`"
			while [ -z "$MySB_InstallDir" ] || [ -d $MySB_InstallDir ] || [ $IfEmpty -gt 0 ]; do
				echo -e -n "$DirNotEmpty"
				read MySB_InstallDir
				if [ -z "$MySB_InstallDir" ]; then
					MySB_InstallDir="/opt/MySB"
				fi

				if [ -d $MySB_InstallDir ]; then
					IfEmpty="`ls -a $MySB_InstallDir 2> /dev/null | sed -e "/\.$/d" | wc -l`"
				else
					IfEmpty=0
				fi
			done
		;;
		n|N|no|NO|non|NON)
			ExitOnError 0 "$SeeYouLater"
		;;
		*)	unset Answer;;
	esac
done

# First we do an update
BannerInstall
echo -e -n "$UpdatingSource"
fnCountDown 3
$AptCommand -y --assume-yes -o Acquire::Check-Valid-Until=false update
[ $? -gt 0 ] && ExitOnError 1 "$AptCommand -y --assume-yes -o Acquire::Check-Valid-Until=false update"

# Next we do an upgrade
BannerInstall
echo -e -n "$UpgradingSystem"
fnCountDown 3
$AptCommand -y --assume-yes -V -o Dpkg::Options::="--force-confold" upgrade
[ $? -gt 0 ] && ExitOnError 1 "$AptCommand -y --assume-yes -V -o Dpkg::Options::="--force-confold" upgrade"

# Now we can install required packages
BannerInstall
echo -e -n "$NeededPackage"
fnCountDown 3
TOOLS="git-core dos2unix lsb-release screen ccze gnupg figlet mlocate dnsutils aptitude" # DO NO RENAME 'TOOLS' VARIABLES !
$AptCommand -y --assume-yes install $TOOLS
[ $? -gt 0 ] && ExitOnError 1 "$AptCommand -y --assume-yes install $TOOLS"

#### download files from Git
BannerInstall
echo -e -n "$DownloadingGithub"
screen -dmS MySB_GitClone git clone --progress -b $gsCurrentVersion https://github.com/toulousain79/MySB.git $MySB_InstallDir >> /tmp/`basename $0`.log;
while [ ! -z "`screen -ls | grep 'MySB_GitClone'`" ]; do
	echo -n "."
	sleep 1
done
if [ $? -eq 0 ]; then
	echo -e "$Done"
else
	ExitOnError 1 "git clone --progress -b $gsCurrentVersion https://github.com/toulousain79/MySB.git $MySB_InstallDir"
fi

# /etc/MySB/config
if [ ! -d /etc/MySB/ ]; then mkdir /etc/MySB/; fi
echo "MySB_InstallDir=\"$MySB_InstallDir\"" > /etc/MySB/config
echo "EnvLang=\"$EnvLang\"" >> /etc/MySB/config
chmod 0640 /etc/MySB/config

# load variables
source $MySB_InstallDir/inc/vars

# Create directories
echo -e -n "$CreatingDir"
gfnManageDirAndFiles 'global'
echo -e "$Done"

#### Sources List
echo -e -n "$SourcesDebian..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/SourcesList" 'BASIC' 'INSTALL'
gfnStatusSTD

#### Create databases
echo -e -n "$CreatingMySQL_DB"
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/MySQL" 'INSTALL'
gfnStatusSTD

# Update DB with usable values
cmdMySQL 'MySB_db' "UPDATE system SET mysb_version='$gsCurrentVersion' WHERE id_system='1';" -v >> /tmp/`basename $0`.log
[ $? -gt 0 ] && ExitOnError 1 "UPDATE system"
cmdMySQL 'MySB_db' "INSERT INTO users (users_ident,users_email,language,admin) VALUES ('MySB','MySB','$EnvLang','1');" -v >> /tmp/`basename $0`.log
[ $? -gt 0 ] && ExitOnError 1 "INSERT INTO users"
source $MySB_InstallDir/inc/vars
[ $? -gt 0 ] && ExitOnError 1 "source $MySB_InstallDir/inc/vars"

# Some questions
/bin/bash $MySB_InstallDir/install/Questions $$ 'INSTALL'
echo
echo

# Start install script
echo -e "$StartingScreen"
screen -wipe >> /tmp/`basename $0`.log
screen -dmS MySB_bsh /bin/bash $MySB_InstallDir/install/MySB.bsh;
echo -e -n "$PleaseWait"
fnCountDown 5
screen -r MySB_bsh

# -----------------------------------------
if [ -f $MySB_InstallDir/inc/includes_after ]; then source $MySB_InstallDir/inc/includes_after; fi
# -----------------------------------------
##################### LAST LINE ######################################