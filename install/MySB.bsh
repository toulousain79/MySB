#!/bin/bash
# -----------------------------------------
if [ -f $(dirname $0)/../inc/includes_before ]; then source $(dirname $0)/../inc/includes_before; fi
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

if [ "$1" != "manual" ] || [ -z "$1" ]; then
	if [ "`screen -ls | grep MySB`" == "" ]; then
		echo ""
		echo -e "$MySB_MustStartWith"
		exit 1
	fi
fi

#### Advertising
echo
echo -e "$Header_Install_0"
echo

echo
echo -e "$MySB_LoseConnection"
echo

echo
echo -e "$MySB_UserAdded"
echo
echo

echo -e "$MySB_AllIsOk"
echo
QuestionGetString NO "$Global_WantToContinue" CONTINUE $Global_YES
CONTINUE="`echo $CONTINUE | tr '[:lower:]' '[:upper:]'`"
if [ "$CONTINUE" == "$Global_NO" ]; then
	echo -e "$Global_SeeYouLater"
	echo
	echo
	EndingScript 0
else
	#### Create MySB banner
	if [ "$BANNER" == "ON" ]; then
		BannerGenerator
	fi

	#### Advertising
	echo
	echo -e "$Header_Install_0"
	echo
	echo
	echo -e "$MySB_LoseConnection"
	echo

	REBOOT=$Global_NO
	REBOOT="`echo $REBOOT | tr '[:lower:]' '[:upper:]'`"
fi

#### Count steps
CurrentSTEP=0
TotalSTEP=$(cat $0 | grep 'CurrentSTEP++' | wc -l)
if [ "$ToInstall_Webmin" == "YES" ]; then
	(( TotalSTEP++ ))
fi
if [ "$ToInstall_LogWatch" == "YES" ]; then
	(( TotalSTEP++ ))
fi
if [ "$ToInstall_PlexMedia" == "YES" ]; then
	(( TotalSTEP++ ))
fi
if [ "$ToInstall_ownCloud" == "YES" ]; then
	(( TotalSTEP++ ))
fi

#
########## PREPARE - BoF ##########
#
echo -e "$MySB_Title_Preparing"

#### 0 - SSH
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring SSH$CEND..."
screen -dmS SSH /bin/bash $MySB_InstallDir/install/SSH 'INSTALL';
WaitingScreen SSH
StatusSTD

#### 1 - Getting information about OVH monitoring engine
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_ProviderInfos$CEND..."
if [ "$ServerProvider" == "OVH" ]; then
	screen -dmS Monitoring /bin/bash $MySB_InstallDir/install/Monitoring 'INSTALL';
	WaitingScreen Monitoring
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 2 - Packages
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_NeededPackages$CEND..."
screen -dmS Packages /bin/bash $MySB_InstallDir/install/Packages 'INSTALL';
WaitingScreen Packages
StatusSTD

#### 3 - Tweaks
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_Optimiszation$CEND..."
screen -dmS Tweaks /bin/bash $MySB_InstallDir/install/Tweaks 'INSTALL';
WaitingScreen Tweaks
StatusSTD

#### 4 - DownloadAll
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_DownloadAll$CEND..."
screen -dmS DownloadAll /bin/bash $MySB_InstallDir/install/DownloadAll 'INSTALL';
WaitingScreen DownloadAll
StatusSTD

if [ -f $MySB_InstallDir/temp/continue ]; then
	echo ""
	echo -e "$MySB_Error_Download"
	echo
	cat $MySB_InstallDir/temp/continue
	EndingScript 1
fi

#### 5 - Certificates
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_Certificates$CEND..."
screen -dmS Certificates /bin/bash $MySB_InstallDir/install/Certificates 'CreateCACertificate' 'NoServiceNameToGive' 'INSTALL';
WaitingScreen Certificates
StatusSTD

#### 6 - PHP
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring PHP5$CEND..."
screen -dmS PHP /bin/bash $MySB_InstallDir/install/PHP 'INSTALL';
WaitingScreen PHP
StatusSTD

#### 7 - Postfix
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Postfix$CEND..."
screen -dmS Postfix /bin/bash $MySB_InstallDir/install/Postfix 'INSTALL';
WaitingScreen Postfix
StatusSTD

#### 8 - Nginx
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring NginX$CEND..."
screen -dmS Nginx /bin/bash $MySB_InstallDir/install/Nginx 'INSTALL';
WaitingScreen Nginx
StatusSTD

#### 9 - VSFTP
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring VSFTPd$CEND..."
screen -dmS VSFTP /bin/bash $MySB_InstallDir/install/VSFTP 'INSTALL';
WaitingScreen VSFTP
StatusSTD

#### 10 - Bind
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring BIND$CEND..."
screen -dmS Bind /bin/bash $MySB_InstallDir/install/Bind 'INSTALL';
WaitingScreen Bind
StatusSTD

if [ -f $MySB_InstallDir/temp/continue ]; then
	echo ""
	echo -e "$MySB_Error_Bind"
	echo
	cat $MySB_InstallDir/temp/continue
	EndingScript 1
fi

#
########## PREPARE - EoF ##########
#

#
########## SECURITY - BoF ##########
#
echo
echo -e "$MySB_Title_SecurityRules"

#### 11 - RKHunter
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring RKhunter$CEND..."
screen -dmS RKHunter /bin/bash $MySB_InstallDir/install/RKHunter 'INSTALL';
WaitingScreen RKHunter
StatusSTD

#### 12 - Fail2Ban
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Fail2Ban$CEND..."
if [ "$ToInstall_Fail2Ban" == "YES" ]; then
	screen -dmS Fail2Ban /bin/bash $MySB_InstallDir/install/Fail2Ban 'INSTALL';
	WaitingScreen Fail2Ban
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

### 13 - DNScrypt-proxy
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring DNScrypt-proxy$CEND..."
if [ "$ToInstall_DNScrypt" == "YES" ]; then
	screen -dmS DNScrypt /bin/bash $MySB_InstallDir/install/DNScrypt 'INSTALL';
	WaitingScreen DNScrypt
	StatusSTD

	if [ -f $MySB_InstallDir/temp/continue ]; then
		echo ""
		echo -e "$MySB_Error_DNScrypt"
		echo
		cat $MySB_InstallDir/temp/continue
		EndingScript 1
	fi
else
	echo -e "$Global_NothingToDo"
fi

#### 14 - BlockList / PeerGuardian
rTorrentBlocklist() {
	(( CurrentSTEP++ ))
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_rTorrentBlocklist$CEND..."
	screen -dmS Blocklist /bin/bash $MySB_InstallDir/install/Blocklists 'INSTALL';
	WaitingScreen Blocklist
	StatusSTD
}

case $MySB_PeerBlock in
	PeerGuardian)
		(( CurrentSTEP++ ))
		echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_PeerGuardian$CEND..."
		screen -dmS PeerGuardian /bin/bash $MySB_InstallDir/install/PeerGuardian 'INSTALL';
		WaitingScreen PeerGuardian
		StatusSTD

		rTorrentBlocklist $1
	;;
	rTorrent)
		CurrentSTEP=$(( CurrentSTEP+1 ))
		rTorrentBlocklist $1
	;;
	*)
		(( CurrentSTEP++ ))
		CurrentSTEP=$(( CurrentSTEP+1 ))
		echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_NoBlocklist$CEND..."
		StatusSTD
	;;
esac

#
########## SECURITY - EoF ##########
#

#
########## SERVICES - BoF ##########
#
echo
echo -e "$MySB_Title_InstallServices"

#### 15 - rTorrent
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring rTorrent$CEND..."
screen -dmS rTorrent /bin/bash $MySB_InstallDir/install/rTorrent 'INSTALL';
WaitingScreen rTorrent
StatusSTD

#### 16 - ruTorrent
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_ruTorrent$CEND..."
screen -dmS ruTorrent /bin/bash $MySB_InstallDir/install/ruTorrent 'INSTALL';
WaitingScreen ruTorrent
StatusSTD

#### 17 - Tools
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Composer, Bower and NodeJS$CEND..."
if [ "$ToInstall_Cakebox" == "YES" ] || [ "$ToInstall_Manager" == "YES" ]; then
	screen -dmS Tools /bin/bash $MySB_InstallDir/install/Tools 'INSTALL';
	WaitingScreen Tools
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 18 - SeedboxManager
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Seedbox-Manager$CEND..."
if [ "$ToInstall_Manager" == "YES" ]; then
	screen -dmS SeedboxManager /bin/bash $MySB_InstallDir/install/SeedboxManager 'INSTALL';
	WaitingScreen SeedboxManager
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 19 - CakeboxLight
(( CurrentSTEP++ ))
if [ "$ToInstall_Cakebox" == "YES" ]; then
	echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring CakeBox-Light$CEND..."
	screen -dmS CakeboxLight /bin/bash $MySB_InstallDir/install/CakeboxLight 'INSTALL';
	WaitingScreen CakeboxLight
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 20 - LoadAvg
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring LoadAvg$CEND..."
screen -dmS LoadAvg /bin/bash $MySB_InstallDir/install/LoadAvg 'INSTALL';
WaitingScreen LoadAvg
StatusSTD

#### 21a - OpenVPN
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring OpenVPN$CEND..."
if [ "$ToInstall_OpenVPN" == "YES" ]; then
	screen -dmS OpenVPN /bin/bash $MySB_InstallDir/install/OpenVPN 'server' 'INSTALL';
	WaitingScreen OpenVPN
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 21b - Samba
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Samba$CEND..."
if [ "$ToInstall_OpenVPN" == "YES" ]; then
	screen -dmS Samba /bin/bash $MySB_InstallDir/install/Samba 'INSTALL';
	WaitingScreen Samba
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 21c - NFS
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring NFS$CEND..."
if [ "$ToInstall_OpenVPN" == "YES" ]; then
	screen -dmS NFS /bin/bash $MySB_InstallDir/install/NFS 'INSTALL';
	WaitingScreen NFS
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 22 - Logwatch
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Logwatch$CEND..."
if [ "$ToInstall_LogWatch" == "YES" ]; then
	screen -dmS Logwatch /bin/bash $MySB_InstallDir/install/Logwatch 'INSTALL';
	WaitingScreen Logwatch
	StatusSTD
else
	echo -e "$Global_NothingToDo"	
fi

### 23 - PlexMedia
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring PlexMedia$CEND..."
if [ "$ToInstall_PlexMedia" == "YES" ]; then
	screen -dmS PlexMedia /bin/bash $MySB_InstallDir/install/PlexMedia 'INSTALL';
	WaitingScreen PlexMedia
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

### 24 - ownCloud
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring ownCloud$CEND..."
if [ "$ToInstall_ownCloud" == "YES" ]; then
	screen -dmS ownCloud /bin/bash $MySB_InstallDir/install/ownCloud 'INSTALL';
	WaitingScreen ownCloud
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 25 - Webmin
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Webmin$CEND..."
if [ "$ToInstall_Webmin" == "YES" ]; then
	screen -dmS Webmin /bin/bash $MySB_InstallDir/install/Webmin 'INSTALL';
	WaitingScreen Webmin
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#
########## SERVICES - EoF ##########
#

#### 26 - Cron
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_InstallingConfiguring Cron$CEND..."
screen -dmS Cron /bin/bash $MySB_InstallDir/install/Cron 'INSTALL';
WaitingScreen Cron
StatusSTD

#### 27 - MySB_CreateUser
(( CurrentSTEP++ ))
echo  -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $MySB_Step_MainUser \"$MainUser\"$CEND..."
screen -dmS MySB_CreateUser /bin/bash $MySB_InstallDir/bin/MySB_CreateUser "$MainUser" "INSTALL";
WaitingScreen MySB_CreateUser
StatusSTD

#### 28 - Create final security rules
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_FinalSecurityRules$CEND..."
screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'create' 'INSTALL';
WaitingScreen MySB_SecurityRules
StatusSTD

#### 29 - Modify rights and owner for directories and files
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_OwnerAndRights$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#
########## INSTALLATION - EoF ##########
#

echo
echo -e "$MySB_Message_Last"

#### 30 - Reboot after install
REBOOT=$Global_YES

# -----------------------------------------
if [ -f $(dirname $0)/../inc/includes_after ]; then source $(dirname $0)/../inc/includes_after; fi
# -----------------------------------------
##################### LAST LINE ######################################