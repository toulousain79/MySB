#!/bin/bash

#### DO NOT MODIFY
UserName="`whoami`"
ScriptName=$(basename $0)
CompleteDir="$HOME/rtorrent/complete/"
DataBase="$HOME/db/$UserName.sq3"
FileLockDirect="$HOME/scripts/direct.lock"
FileLockCron="$HOME/scripts/cron.lock"
FileLog="$HOME/logs/$ScriptName.log"
RsyncCipher="aes128-ctr"
PID="$$"
get_base_path="$1"
get_custom1="$2"
get_name="$3"
get_loaded_file="$4"
## Destination
# ftp OR rsync
ModeSync="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT mode_sync FROM ident WHERE ident_id = '1';"`"
# Destination directory, WITH starting './' and WITHOUT ending '/'. (ex: ./home/myuser)
DstDir="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT dst_dir FROM ident WHERE ident_id = '1';"`"
# Hostname OR IP address of the destination. (ex: myserver.mydomain.com)
DstSrv="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT dst_srv FROM ident WHERE ident_id = '1';"`"
# Port (ex: 22)
DstPort="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT dst_port FROM ident WHERE ident_id = '1';"`"
# Username
DstUser="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT dst_user FROM ident WHERE ident_id = '1';"`"
# Password
DstPass="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT dst_pass FROM ident WHERE ident_id = '1';"`"
# Max file to synchronize from 'FileList' per cronjob ? (0 for sync all)
MaxToSync="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT max_to_sync FROM ident WHERE ident_id = '1';"`"
# 1: Create a subdirectory for alone files (needed by some scraper) | 0: Do not create subdirectory
CreateSubDir="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT create_subdir FROM ident WHERE ident_id = '1';"`"
# Notification (if enabled on MySB options page in portal)
MailObjectOK="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT MailObjectOK FROM ident WHERE ident_id = '1';"`"
MailObjectKO="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT MailObjectKO FROM ident WHERE ident_id = '1';"`"
#### DO NOT MODIFY

#### START BY: CRON (without args) or DIRECTLY (with args after a download) ?
case "$1" in
	'CRON'|'DIRECT')
		CronMode=1
	;;
	*)
		if [ -z "$get_base_path" ] || [ -z "$get_custom1" ] || [ -z "$get_name" ] || [ -z "$get_loaded_file" ]; then
			CronMode=1
		else
			CronMode=0
		fi
	;;
esac

#### LIST ADD:  Started DIECTLY means that we must add download informations to a list (or not).
if [ $CronMode -eq 0 ]; then
	# Sync Mode for finished download
	# 0	-->	Do not start any script (no synchro)
	# 1	-->	Execute scripts by crontab
	# 2	-->	Execute scripts directly when a download is finished
	CompleteDirEscaped="`echo $CompleteDir | sed s,/,\\\\\\\\\\/,g`"
	CategoryDir="`echo $get_custom1 | sed "s/$CompleteDirEscaped//g;" | sed 's/\///g;'`"
	CategoryList="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT sync_mode FROM categories WHERE name = '$CategoryDir';"`"
	case "$CategoryList" in
		1)
			CategoryList="cron"
		;;
		2)
			CategoryList="direct"
		;;
		*)
			exit 0
		;;
	esac

	# Add entry to the list (cron OR direct)
	sqlite3 -cmd '.timeout 150000' $DataBase "INSERT INTO list (list_category,is_active,get_base_path,get_custom1,get_name,get_loaded_file,CategoryDir) VALUES ('$CategoryList','1','$get_base_path','$get_custom1','$get_name','$get_loaded_file','$CategoryDir');"

	# We are in direct sync mode
	CategoryList="direct"
	FileLock="$FileLockDirect"
else
	case "$1" in
		'CRON')
			# We are in cron sync mode
			CategoryList="cron"
			FileLock="$FileLockCron"
		;;
		'DIRECT')
			# We are in direct sync mode
			CategoryList="direct"
			FileLock="$FileLockDirect"
		;;
		*)
			# We are in cron sync mode
			CategoryList="cron"
			FileLock="$FileLockCron"
		;;
	esac
fi

#### LOCKED: If a lock file exists means that synchronization is already in progress. Same thing if the list is empty.
InQueue="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT count(*) FROM list WHERE list_category = '$CategoryList' AND is_active = '1';"`"
if [ -e $FileLock ]; then				# Check that the lock file has not been forgotten...
	GetPid="`cat $FileLock`"
	case "`ps -p $GetPid &>/dev/null`" in
		0)								# The script is still running, the lock file is legitimate. We can stop the script.
			exit 0
		;;
		*)								# Otherwise, we remove it and continue running the script.
			rm -f $FileLock
			if [ -e /tmp/$UserName-$ScriptName.log.$GetPid ]; then
				rm -f /tmp/$UserName-$ScriptName.log.$GetPid
			fi
			if [ $InQueue -eq 0 ]; then	# The list is empty, there is nothing to do. So we stop the script.
				exit 0
			else						# Otherwise, we continue and create a new lock file.
				echo $PID > $FileLock
			fi
		;;
	esac
else									# No file locking, we continue.
	if [ $InQueue -eq 0 ]; then			# The list is empty, there is nothing to do. So we stop the script.
		exit 0
	else								# Otherwise, we continue and create a new lock file.
		echo $PID > $FileLock
	fi
fi

############ FUNCTIONs - BoF ############

#### Retrieving files to transfer
Listing() {
	# VARs
	FnGet_List_ID="$1"
	FnGet_Base_Bath="$2"
	FnGet_Custom1="$3"
	FnGet_Name="$4"
	FnGet_LoadedFile="$5"
	FnCategoryDir="$6"
	FnGet_NameEscaped="`echo $FnGet_Name | sed s,/,\\\\\\\\\\/,g`"
	FnLine="$FnGet_Custom1$FnGet_Name"
	FnMail_Object="$MailObjectOK"
	FnStartDate="`/bin/date +%Y/%m/%d`"
	FnStartHour="`/bin/date +%H:%M:%S`"
	GetPid="`cat $FileLock`"
	Error=0

	# Check if files exist
	FnCheck="`file "$FnLine"`"
	if [ $? -ne 0 ]; then
		ModeSync="no_such_file_or_directory"
	else
		Type="`echo $FnCheck | cut -d ":" -f 2 | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	fi

	# Need to create a subdirectory on destination ?
	if [ -f "$FnLine" ] && [ $CreateSubDir -eq 1 ]; then
		FnGet_NameEscaped="`echo $FnGet_NameEscaped | sed 's/\[/\\\[/g;' | sed 's/\]/\\\]/g;' | sed 's/(/\\(/g' | sed 's/)/\\)/g'`"
		FnSubDirectory="`echo $FnLine | sed "s/$FnGet_NameEscaped//g;" | sed s,/,\\\\\\\\\\/,g`"
		FnSubDirectory="`echo ${FnLine%.*} | sed "s/$FnSubDirectory//g;" | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	fi

	if [ ! -z "$FnSubDirectory" ] && [ $CreateSubDir -eq 1 ]; then
		FnDstDir="$DstDir/$FnCategoryDir/$FnSubDirectory"
	else
		FnDstDir="$DstDir/$FnCategoryDir"
	fi
	FnDstDir="`echo $FnDstDir | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	FnDstDir="`echo $FnDstDir | sed 's/\[//g;' | sed 's/\]//g;' | sed 's/(//g' | sed 's/)//g' | sed 's/\ /./g;' | sed -e 's/\/\//\//g;'`"

	# Log
	echo "#### START ####"
	echo "Script:		$0"
	echo "From:		$FnLine"
	echo "To:			$FnDstDir"
	echo "Category:	$FnCategoryDir ($CategoryList)"
	echo "Server:		$DstUser@$DstSrv"
	echo "Date:		$FnStartDate"
	echo "Hour:		$FnStartHour"
	echo "--------------------"
	echo

	sqlite3 -cmd '.timeout 150000' $DataBase "UPDATE list SET comments = 'Start: $FnStartDate - $FnStartHour', pid = '$GetPid' WHERE list_id = '$FnGet_List_ID';"

	case "$ModeSync" in
		'rsync')
			# Start synchronization with RSYNC
			# Creating sub-directory on destination
			sshpass -p $DstPass ssh -p $DstPort -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $DstUser@$DstSrv "if [ ! -d \"$FnDstDir\" ]; then mkdir -p \"$FnDstDir\"; fi" &> /dev/null

			# Start synchronization with RSYNC
			for ((i = 2; i >= 1; i -= 1)); do
				rsync -rtvy --numeric-ids --partial --append --stats --timeout=10 -e "/usr/bin/sshpass -p$DstPass ssh -p $DstPort -c $RsyncCipher -o Compression=no -x -T -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" "$FnLine" $DstUser@$DstSrv:"$FnDstDir/"
				if [ $? -ne 0 ]; then
					Error=$?
				fi
			done
		;;
		'ftp')
			LftpOptions="set ftp:ssl-protect-data true; set ssl:verify-certificate no; set net:max-retries 3; set net:reconnect-interval-base 5;"
			for ((i = 2; i >= 1; i -= 1)); do
				case "$Type" in
					'directory')
						lftp -e "$LftpOptions mkdir -p \"$FnDstDir/$FnGet_NameEscaped\"; mirror -R \"$FnLine\" \"$FnDstDir/$FnGet_NameEscaped\"; bye" -u "$DstUser","$DstPass" "$DstSrv" -p "$DstPort"
					;;
					*)
						lftp -e "$LftpOptions mkdir -p $FnDstDir; put -O \"$FnDstDir\" \"$FnLine\"; bye" -u "$DstUser","$DstPass" "$DstSrv" -p "$DstPort"
					;;
				esac
				if [ $? -ne 0 ]; then
					Error=$?
				fi
			done
		;;
		'no_such_file_or_directory')
			echo $FnCheck
		;;
		*)
			return 1
		;;
	esac

	# Deleting the file from the list
	FnEndDate="`/bin/date +%Y/%m/%d`"
	FnEndHour="`/bin/date +%H:%M:%S`"
	if [ $Error -eq 0 ]; then
		sqlite3 -cmd '.timeout 150000' $DataBase "UPDATE list SET is_active = '0', to_del = '1', pid = '', comments = 'End: $FnEndDate - $FnEndHour' WHERE list_id = '$FnGet_List_ID';"
	else
		sqlite3 -cmd '.timeout 150000' $DataBase "UPDATE list SET is_active = '0', pid = '', comments = 'Error: $FnEndDate - $FnEndHour' WHERE list_id = '$FnGet_List_ID';"
		FnMail_Object="$MailObjectKO"
	fi

	echo
	echo "--------------------"
	echo "Date:		$FnEndDate"
	echo "Hour:		$FnEndHour"
	echo "##### END #####"

	# E-mail notification
	content="$FileLogTemp"
	curl --data "username=$UserName&get_custom1=$FnLine&get_name=$FnGet_Name&subject=$FnMail_Object&content=$content" http://localhost:8888/rTorrent.php

	# Unset
	unset FnGet_Base_Bath FnGet_Custom1 FnGet_Name FnGet_LoadedFile FnCategoryDir FnGet_NameEscaped FnLine FnSubDirectory FnGet_LoadedFileEscaped
}
############ FUNCTIONs - BoF ############

#### EXECUTING: We read the list line by line.
case "$MaxToSync" in
	0)
		MaxToSync=""
	;;
	*)
		MaxToSync="LIMIT $MaxToSync"
	;;
esac

MyList="`sqlite3 -cmd '.timeout 150000' $DataBase "SELECT list_id,get_base_path,get_custom1,get_name,get_loaded_file,CategoryDir FROM list WHERE list_category = '$CategoryList' AND is_active = '1' AND to_del = '0' $MaxToSync;"`"
IFS=$'\n'
for ROW in $MyList; do
	FileLogTemp="/tmp/$UserName-$ScriptName.log.$PID"
	list_id="`echo "$ROW" | awk '{split($0,a,"|"); print a[1]}'`"
	get_base_path="`echo "$ROW" | awk '{split($0,a,"|"); print a[2]}'`"
	get_custom1="`echo "$ROW" | awk '{split($0,a,"|"); print a[3]}'`"
	get_name="`echo "$ROW" | awk '{split($0,a,"|"); print a[4]}'`"
	get_loaded_file="`echo "$ROW" | awk '{split($0,a,"|"); print a[5]}'`"
	CategoryDir="`echo "$ROW" | awk '{split($0,a,"|"); print a[6]}'`"

	if [ ! -z "$DstDir" ] \
		&& [ ! -z "$DstSrv" ] \
		&& [ ! -z "$DstPort" ] \
		&& [ ! -z "$DstUser" ] \
		&& [ ! -z "$DstPass" ] \
		&& [ ! -z "$MailObjectOK" ] \
		&& [ ! -z "$MailObjectKO" ]; then

		# Real process of synchronization
		Listing "$list_id" "$get_base_path" "$get_custom1" "$get_name" "$get_loaded_file" "$CategoryDir" > $FileLogTemp
	else
		sqlite3 -cmd '.timeout 150000' $DataBase "UPDATE list SET comments = 'Error: Missing login information', pid = '' WHERE list_id = '$list_id';"
	fi

	# Move log file content
	if [ -f $FileLogTemp ]; then
		cat $FileLogTemp >> $FileLog
		rm -f $FileLogTemp
	fi
done
unset IFS

#### Cleaning the list
sqlite3 -cmd '.timeout 150000' $DataBase "DELETE FROM list WHERE to_del = '1'"

#### Removing the lock file
if [ -e $FileLock ]; then
	rm -f $FileLock
fi
