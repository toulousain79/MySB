#!/bin/bash
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

### BEGIN INIT INFO
# Provides:          dnscrypt
# Required-Start:    $remote_fs $network $mysql
# Required-Stop:     $remote_fs $network $mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start DNScrypt-proxy
# Description:       Encrypt DNS queries.
### END INIT INFO

#### Includes
source /etc/MySB/config
source $MySB_InstallDir/inc/vars

#### VARs
NAME="dnscrypt-proxy"
DESC="OpenDNS DNScrypt-proxy"
DIR_PID="/var/run/dnscrypt-proxy"
DIR_LOG="/var/log/dnscrypt-proxy"
LOG_FILE="$DIR_LOG/dnscrypt-proxy.log"
DAEMON_USER="dnscrypt"
DAEMON="/usr/local/sbin/dnscrypt-proxy"
CSV_FILE="/usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv"

#### Command line arguments - Begin
# Cherck arguments, we can start with as much DNScrypt resolver as desired (no IPv6).
# The default resolvers are those accepting DNSsec and NoLogs.
# --dnssec
# --nologs
# --all (with or without DNSsec and NoLogs)
# --resolver="rsolver1,resolver2,..."
GivenResolvers=""
ResolversSearched=""
DNSsec="yes"
NoLogs="yes"
All=""

if [ $# -gt 1 ]; then
	for Arg in "$@"; do
		case "$Arg" in
			--all)
				All="1"
			;;
			--dnssec)
				DNSsec="`echo $Arg | cut -d '=' -f 2 | sed -e 's/^ //g;' | sed 's/\s+$//'`"
				DNSsec="$DNSsec"
			;;
			--nologs)
				NoLogs="`echo $Arg | cut -d '=' -f 2 | sed -e 's/^ //g;' | sed 's/\s+$//'`"
				NoLogs="$NoLogs"
			;;
			--resolver*)
				GivenResolvers="`echo $Arg | cut -d '=' -f 2 | sed -e 's/,/ /g;' | sed -e 's/^ //g;' | sed 's/\s+$//'`"
				for Resolver in $GivenResolvers; do
					IfExist="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_dnscrypt_resolvers' 'dnscrypt_resolvers' "name = '$Resolver'"`"
					if [ ! -z "$IfExist" ]; then
						ResolversSearched="$ResolversSearched AND name = '$Resolver'"
					fi
				done
			;;
		esac
	done

	# Get resolvers list (by command line)
	if [ -z "$All" ]; then
		Search="dnssec = '$DNSsec' AND no_logs = '$NoLogs' $ResolversSearched"
	else
		Search="$All"
	fi
else
	# Get resolvers list (by database)
	Search="is_wished = '1'"
fi

# Get resolvers list (by command line)
AllResolvers="`Func_SQL_Command 'SELECT' 'MySB_db' 'name' 'dnscrypt_resolvers' \"$Search\"`"

# Cleaning the list (no IPv6)
for Resolver in $AllResolvers; do
	if [ -z "`echo $Resolver | grep 'ipv6'`" ]; then
		ResolversList="${ResolversList} ${Resolver}"
	fi
done
ResolversList="`echo $ResolversList | sed -e 's/^ //g;' | sed 's/\s+$//'`"

# If resolvers list is empty
if [ -z "$ResolversList" ]; then
	ResolversList="dnscrypt.eu-dk dnscrypt.eu-nl"
fi
#### Command line arguments - End

#### Check directories
if [ ! -d $DIR_PID ]; then mkdir $DIR_PID && chown $DAEMON_USER:$DAEMON_USER $DIR_PID; fi
if [ ! -d $DIR_LOG ]; then mkdir $DIR_LOG && chown $DAEMON_USER:$DAEMON_USER $DIR_LOG; fi

#### Functions - Begin
# Create daemon option
DeamonOption() {
	Name="$1"
	LocalAddress="$2"

	DEAMON_OPT="--user=$DAEMON_USER --max-active-requests=250 --resolver-name=$Name --logfile=$DIR_LOG/$Resolver.log --local-address=$LocalAddress --ephemeral-keys"
}

# Function that check BIND status
bind_check() {
	service bind9 stop &> /dev/null
	service bind9 start &> /dev/null
}

# Add monitor with cron
check_crontab() {
	case "$1" in
		add)
			if [ -z "`crontab -l | grep 'dnscrypt-proxy'`" ]; then
				crontab -l > /tmp/crontab.tmp
				sed -i '/dnscrypt-proxy/d' /tmp/crontab.tmp
				echo "*/5 * * * * if ( ! pidof dnscrypt-proxy > /dev/null ); then service dnscrypt-proxy restart > /dev/null 2>&1; fi" >> /tmp/crontab.tmp
				crontab /tmp/crontab.tmp
				rm -f /tmp/crontab.tmp > /dev/null 2>&1
				service cron reload > /dev/null 2>&1
			fi
		;;
		remove)
			if [ ! -z "`crontab -l | grep 'dnscrypt-proxy'`" ]; then
				crontab -l > /tmp/crontab.tmp
				sed -i '/dnscrypt-proxy/d' /tmp/crontab.tmp
				crontab /tmp/crontab.tmp
				rm -f /tmp/crontab.tmp > /dev/null 2>&1
				service cron reload > /dev/null 2>&1
			fi
		;;
	esac
}

# Delete all pid files
delete_pid_file() {
	FnPid=$1
	FnResolver="$2"

    if [ -e $FnPid ]; then
        rm -f $FnPid
		echo "--> PID: $FnPid file deleted : "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $LOG_FILE
    fi
}

# Function START
do_start() {
	# Preapre Bind9
	bind_check

	# Update DB
	Func_SQL_Command 'UPDATE' 'MySB_db' 'dnscrypt_resolvers' "is_activated = '0', is_wished = '0', forwarder = ''" 'ALL'

	i=0; Return=0; Running=0; NotRunning=0
	for Resolver in $ResolversList; do
		(( i++ ))

		# Delete ghost screen pid file
		if [ -e $DIR_PID/$Resolver.pid ]; then
			pidofproc -p $DIR_PID/$Resolver.pid &> /dev/null || rm -f $DIR_PID/$Resolver.pid
		fi

		# Get options
		DeamonOption "$Resolver" "127.0.0.$i:52"

		# Return
		#   0 if daemon has been started
		#   1 if daemon was already running
		#   2 if daemon could not be started
		start-stop-daemon --start --quiet --background --make-pidfile --test \
			--pidfile $DIR_PID/$Resolver.pid\
			--exec $DAEMON\
			-- $DEAMON_OPT\
			 >> $LOG_FILE

		if [ $? -gt 0 ]; then
			echo "--> $Resolver already running: "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $LOG_FILE
			(( Running++ ))
		fi

		start-stop-daemon --start --quiet --background --make-pidfile \
			--pidfile $DIR_PID/$Resolver.pid\
			--exec $DAEMON\
			-- $DEAMON_OPT\
			 >> $LOG_FILE

		if [ $? -gt 0 ]; then
			Func_SQL_Command 'UPDATE' 'MySB_db' 'dnscrypt_resolvers' "is_wished = '1', is_activated = '0', forwarder = ''" "name = '$Resolver'"
			delete_pid_file $DIR_PID/$Resolver.pid $Resolver
			echo "--> NOT STARTED: $Resolver : "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $LOG_FILE
			(( NotRunning++ ))
		else
			# Update DB
			ResolverPid="`cat $DIR_PID/$Resolver.pid`"
			if [ ! -z "$ResolverPid" ] && [ ! -z "`ps -p $ResolverPid | grep -v 'PID TTY'`" ]; then
				Func_SQL_Command 'UPDATE' 'MySB_db' 'dnscrypt_resolvers' "is_wished = '1', is_activated = '1', forwarder = '127.0.0.$i'" "name = '$Resolver'"
				echo "--> STARTED: $Resolver : "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $LOG_FILE
				(( Running++ ))
			else
				Func_SQL_Command 'UPDATE' 'MySB_db' 'dnscrypt_resolvers' "is_wished = '1', is_activated = '0', forwarder = ''" "name = '$Resolver'"
				delete_pid_file $DIR_PID/$Resolver.pid $Resolver
				echo "--> NOT STARTED: $Resolver : "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $LOG_FILE
				(( NotRunning++ ))
			fi
		fi
	done

	case "$Running" in
		0)
			case "$NotRunning" in
				0)
					Return=0
				;;
				*)
					Return=2
				;;
			esac
		;;
		*)
			Return=1
		;;
	esac

	return $Return
}

# Function STOP the daemon/service
do_stop() {
	PidList="`ls -1r $DIR_PID/`"

	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	for Pid in $PidList; do
		Resolver="`echo $Pid | cut -d '.' -f 1`"
		start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $DIR_PID/$Pid --exec "$DAEMON" 2>> $LOG_FILE

		case "$?" in
			0|1)
				echo "--> STOPPED: $Resolver : "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $LOG_FILE
				delete_pid_file $DIR_PID/$Pid $Resolver
				# Update DB
				Func_SQL_Command 'UPDATE' 'MySB_db' 'dnscrypt_resolvers' "is_activated = '0'" "name = '$Resolver'"
			;;
			2)
				echo "--> NOT STOPPED: $Resolver : "`/bin/date '+%Y-%m-%d - %H:%M:%S'` >> $LOG_FILE
			;;
		esac
	done

	# Ghost processes ?
	pkill -f $DAEMON >> $LOG_FILE

	# Update DB
	Func_SQL_Command 'UPDATE' 'MySB_db' 'dnscrypt_resolvers' "is_activated = '0', is_wished = '0', forwarder = ''" 'ALL'
}
#### Functions - End

#### CASE - Begin
case "$1" in
	start)
		log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1)
				check_crontab 'add'
				SwitchDNS 'dnscrypt' 'no_start'
				log_end_msg 0
			;;
			2)
				check_crontab 'remove'
				SwitchDNS 'bind'
				log_end_msg 1
			;;
		esac
	;;

	stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		check_crontab 'remove'
		SwitchDNS 'bind'
		do_stop
		log_end_msg 0
	;;

	restart)
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		do_start
		case "$?" in
			0|1)
				check_crontab 'add'
				SwitchDNS 'dnscrypt' 'no_start'
				log_end_msg 0
			;;
			2)
				check_crontab 'remove'
				SwitchDNS 'bind'
				log_end_msg 1
			;;
		esac
	;;

	status)
		for Resolver in $ResolversList; do
			status_of_proc -p "$DIR_PID/$Resolver.pid" "$DAEMON" "$Resolver" && log_end_msg
		done
		exit 0
	;;

	*)
		echo "Usage: service dnscrypt-proxy {stop|status} [{start|restart} [--all] [[--nologs=yes/no] [--dnssec=yes/no] [--resolver=resolver1,resolver2,...]]]"
		echo
		echo "Default, \"--nologs=yes\" and \"--dnssec=yes\""
		echo
		echo "Example 1: \"service dnscrypt-proxy start --all\", DNScrypt-proxy will start using all available providers."
		echo "Example 2: \"service dnscrypt-proxy start --nologs=no --dnssec=yes\", DNScrypt-proxy will start using all available providers that accept DNSsec and doesn't accept No Logs."
		echo "Example 3: \"service dnscrypt-proxy start --resolver=resolver1,resolver2 --dnssec=yes\", DNScrypt-proxy will start using selected providers only that accept DNSsec."
		echo
		exit 3
	;;
esac
#### CASE - End

exit 0

##################### LAST LINE ######################################
