#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################

if [ "$USAGE" == "ON" ]; then
	ListingUsers
	for seedUser in $UsersList; do
		LIST="$LIST|$seedUser"
	done
	LIST="`echo \($LIST\) | sed -e 's/(|/(/g;'`"

	if [ ! -z "$LIST" ]; then
		echo -e "${CBLUE}$CreateUser_Usage$CEND${CYELLOW}$LIST$CEND"
	fi

	UserToCreate=""
	while [ -z "$UserToCreate" ]; do
		QuestionGetString NO "$CreateUser_Username" UserToCreate
		if [ ! "`echo "$LIST" | grep $UserToCreate`" = "" ]; then
			UserToCreate=""
		fi
	done

	NewUserPassword="`GenPassword 8`"
	if [ -z "NewUserPassword" ]; then
		QuestionGetString YES "$CreateUser_Password [$UserToCreate]: " NewUserPassword
	fi

	QuestionGetString NO "$CreateUser_SFTP" UserSFTP $Global_YES
	UserSFTP="`echo $UserSFTP | tr '[:lower:]' '[:upper:]'`"

	#QuestionGetString NO "Add user to sudoers? " UserSUDO $Global_NO
	#UserSUDO="`echo $UserSUDO | tr '[:lower:]' '[:upper:]'`"
	UserSUDO="$Global_NO"

	while [ ! "`ValidateMail $UserEmail`" = "1" ]; do
		QuestionGetString NO "$CreateUser_Email" UserEmail
	done

	UserSFTP="$(echo $UserSFTP | sed "s/$Global_YES/1/g;" | sed "s/$Global_NO/0/g;")"
	UserSUDO="$(echo $UserSUDO | sed "s/$Global_YES/1/g;" | sed "s/$Global_NO/0/g;")"
	Switch="MANUAL"
else
	# user sftp sudo email Switch
	UserToCreate="$1"

	case "$2" in
		"INSTALL")	# INSTALL ($1 = user, $2 = Switch), user created by installation (main user)
			UserSFTP=1
			UserSUDO=0
			UserEmail="$MainUserEmail"
			NewUserPassword="$MainUserPassword"
			Switch="$2"
		;;	
		*)			# APPLYCONFIG (user sftp sudo email Switch), user created by Web
			UserSFTP=$2
			UserSUDO=$3
			UserEmail="$4"
			Switch="$5"
			NewUserPassword="`GenPassword 8`"
		;;
	esac
fi

#### Users vars
NewUserHomedir="/home/$UserToCreate"
UPPERNEWUSER=`echo $UserToCreate | tr '[:lower:]' '[:upper:]'`
NEWRPC="/"$UPPERNEWUSER

LastPort="`Func_SQL_Command 'SELECT' 'MySB_db' 'max(rtorrent_port)' 'users' '1'`"
if [ -z "$LastPort" ] || [ "$LastPort" == "" ]; then
	LastPort=51100
fi
(( LastPort++ ))
ScgiPort=$LastPort
(( LastPort++ ))
rTorrentPort=$LastPort

#### user infos
if [ "$UserToCreate" != "$MainUser" ]; then
	log_daemon_msg "$CreateUser_InsertInfoDB [$UserToCreate]"
	Func_SQL_Command 'INSERT' 'MySB_db' 'users' 'users_ident,users_email,users_passwd,rpc,sftp,sudo,scgi_port,rtorrent_port,home_dir,language' "\"$UserToCreate\",\"$UserEmail\",\"$NewUserPassword\",\"$NEWRPC\",\"$UserSFTP\",\"$UserSUDO\",\"$ScgiPort\",\"$rTorrentPort\",\"$NewUserHomedir\",\"$EnvLang\""
else
	log_daemon_msg "$CreateUser_UpdateInfoDB [$UserToCreate]"
	Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "users_passwd = '', rpc = '$NEWRPC', scgi_port = '$ScgiPort', rtorrent_port = '$rTorrentPort', home_dir = '$NewUserHomedir'" "users_ident = '$UserToCreate'"
fi
ListingUsers
CountingUsers
StatusLSB

#### create system user
log_daemon_msg "$CreateUser_SystemAccount [$UserToCreate]"
useradd -c "MySB user $UserToCreate" -d $NewUserHomedir -s /bin/bash $UserToCreate &> /dev/null
StatusLSB

#### create directories
log_daemon_msg "$CreateUser_ManageFilesDir [$UserToCreate]"
# Home
ManageUserHomeDir "$UserToCreate"
# ruTorrent
ruTorrentUsersConfigs "$UserToCreate"
# Seedbox-Manager
ManagerUsersConfigs "$UserToCreate"
# Cakebox-Light
CakeboxUsersConfigs "$UserToCreate"
StatusLSB

#### FTP
log_daemon_msg "$CreateUser_AllowUseFtp [$UserToCreate]"
echo "$UserToCreate" >> /etc/vsftpd.chroot_list
StatusLSB

#### Share
log_daemon_msg "$CreateUser_AllowShareDir [$UserToCreate]"
mount --bind /home/MySB_share $NewUserHomedir/rtorrent/share
StatusLSB

#### Torrents files location
log_daemon_msg "$CreateUser_TorrentDir [$UserToCreate]"
mount --bind $RutorrentDir/share/users/$UserToCreate/torrents $NewUserHomedir/rtorrent/torrents
StatusLSB

#### add to groups
log_daemon_msg "$CreateUser_AssignGroup [$UserToCreate]"
addgroup $UserToCreate MySB_users &> /dev/null

if [ "$UserSUDO" == "YES" ]; then
	addgroup $UserToCreate sudo &> /dev/null
fi
if [ "$UserSFTP" == "YES" ]; then
	addgroup $UserToCreate sshdusers &> /dev/null
fi
StatusLSB

#### custumize profile
if [ ! -f $NewUserHomedir/.profile ]; then
	log_daemon_msg "$CreateUser_CustomizeProfile [$UserToCreate]"
	cp /etc/skel/.bashrc $NewUserHomedir
	cp /etc/skel/.bash_logout $NewUserHomedir
	cp /etc/skel/.profile $NewUserHomedir
	chown $UserToCreate:$UserToCreate $NewUserHomedir/.bashrc
	chown $UserToCreate:$UserToCreate $NewUserHomedir/.bash_logout
	chown $UserToCreate:$UserToCreate $NewUserHomedir/.profile
	perl -pi -e "s/#force_color_prompt=yes/force_color_prompt=yes/g" $NewUserHomedir/.bashrc
	StatusLSB
fi

#### SSH Key
if [ ! -f $NewUserHomedir/.ssh/id_rsa ]; then
	ssh-keygen -q -t rsa -b 2048 -N "" -f $NewUserHomedir/.ssh/id_rsa -C "$UserToCreate@$HostNameFQDN"
fi
if [ ! -f $NewUserHomedir/.ssh/authorized_keys ]; then
	touch $NewUserHomedir/.ssh/authorized_keys
fi
chown root:$UserToCreate $NewUserHomedir/.ssh/*
chmod 0660 $NewUserHomedir/.ssh/*

# Logrotate
cp -f $MySB_InstallDir/templates/logrotate/etc.logrotate.d.users.tmpl /etc/logrotate.d/rtorrent_$UserToCreate
perl -pi -e "s/<username>/$UserToCreate/g" /etc/logrotate.d/rtorrent_$UserToCreate

#### rTorrent (.rtorrent.rc)
log_daemon_msg "$CreateUser_rTorrentfile [$UserToCreate]"
CreateRtorrentConfigFile "$UserToCreate" 'force'
StatusLSB

#### NginX
log_daemon_msg "$CreateUser_RpcFile [$UserToCreate]"
(
cat <<'EOF'
location /<USERNAME> {
	include scgi_params;
	scgi_pass 127.0.0.1:5995;
	auth_basic "Restricted area";
	auth_basic_user_file "/etc/nginx/passwd/MySB_<username>";
}

EOF
) > /etc/nginx/rpc/$UserToCreate.conf
perl -pi -e "s/5995/$ScgiPort/g" /etc/nginx/rpc/$UserToCreate.conf
perl -pi -e "s/<username>/$UserToCreate/g" /etc/nginx/rpc/$UserToCreate.conf
perl -pi -e "s/<USERNAME>/$UPPERNEWUSER/g" /etc/nginx/rpc/$UserToCreate.conf
StatusLSB

#### CakeBox
if [ "$IsInstalled_Cakebox" == "YES" ]; then
	log_daemon_msg "Create Cakebox configuration for [$UserToCreate]"

	(
	cat <<'EOF'
location /<username>/ {
		alias /home/<username>/;
		add_header Content-Disposition "attachment";
		satisfy any;
		allow all;
}

EOF
	) > /etc/nginx/rpc/$UserToCreate.cakebox
	perl -pi -e "s/<username>/$UserToCreate/g" /etc/nginx/rpc/$UserToCreate.cakebox

	StatusLSB
fi

#### NFS
if [ "$IsInstalled_NFS" == "YES" ]; then
	log_daemon_msg "$CreateUser_NfsFile [$UserToCreate]"
	sed -i '/'$UserToCreate'/d' /etc/exports
	uid=`grep $UserToCreate /etc/passwd | awk -F: '{ print $3 }'`
	guid=`grep MySB_users /etc/group | awk -F: '{ print $3 }'`
	echo "/home/$UserToCreate/rtorrent 10.0.0.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,fsid=0,crossmnt) 10.0.1.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,nohide,fsid=0,crossmnt) 10.0.2.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,nohide,fsid=0,crossmnt)" >> /etc/exports
	StatusLSB
fi

#### OpenVPN
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	log_daemon_msg "$CreateUser_OpenVPN [$UserToCreate]"
	ScriptInvoke 'ScreenSTD' "$MySB_InstallDir/install/OpenVPN" 'client' "$UserToCreate" 'INSTALL'
	StatusLSB
fi

#### ownCloud
if [ "$IsInstalled_ownCloud" == "YES" ]; then
	UserExist="`Func_SQL_Command 'SELECT' 'ownCloud_db' 'uid' 'oc_users' "uid='$UserToCreate'"`"
	if [ -z "$UserExist" ]; then
		log_daemon_msg "$CreateUser_ownCloud [$UserToCreate]"
		ownCloudAccountManage 'create' "$UserToCreate" "$NewUserPassword"
		StatusLSB
	else
		ownCloudAccountManage 'edit' "$UserToCreate" "$NewUserPassword"
	fi
fi

#### script init
log_daemon_msg "$CreateUser_rTorrentInit [$UserToCreate]"
cp $MySB_InstallDir/templates/init/etc.init.rtorrent.tmpl /etc/init.d/rtorrent-$UserToCreate
perl -pi -e "s/<username>/$UserToCreate/g" /etc/init.d/rtorrent-$UserToCreate
chmod +x /etc/init.d/rtorrent-$UserToCreate
StatusLSB

#### cron
log_daemon_msg "$CreateUser_InitCron [$UserToCreate]"
crontab -l > /tmp/crontab.tmp
sed -i '/'$UserToCreate'/d' /tmp/crontab.tmp
echo "*/5 * * * * if ! ( /bin/ps U $UserToCreate | grep 'rtorrent' > /dev/null ); then service rtorrent-$UserToCreate restart > /dev/null 2>&1; fi" >> /tmp/crontab.tmp
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusLSB

#### rtorrent max memory & rTorrent Blocklist
for seedUser in $UsersList; do
	log_daemon_msg "$CreateUser_PiecesMemory [$seedUser]"
	LIGN=$(sed -n '/pieces.memory.max.set/=' /home/$seedUser/.rtorrent.rc)
	sed -i ''$LIGN'd' /home/$seedUser/.rtorrent.rc
	sed -i ''$LIGN'i\pieces.memory.max.set = '$(((($MEMORY/$TotalUsers)*1024)*1024))'\n' /home/$seedUser/.rtorrent.rc
	StatusLSB

	if [ -f $MySB_InstallDir/files/blocklists/blocklist_rtorrent.txt ]; then
		log_daemon_msg "$CreateUser_Blocklists [$seedUser]"
		cp $MySB_InstallDir/files/blocklists/* $NewUserHomedir/blocklist/
		StatusLSB
	else
		log_daemon_msg "$CreateUser_NewBlocklists [$seedUser]"
		ScriptInvoke 'ScreenSTD' "$MySB_InstallDir/scripts/BlocklistsRTorrent.bsh" 'REFRESH'
		StatusLSB
	fi

	service rtorrent-$seedUser status &> /dev/null
	if [ $? -eq 0 ]; then
		service rtorrent-$seedUser restart
	fi
done

#### Assign password
ScriptInvoke 'source' "$MySB_InstallDir/bin/MySB_ChangeUserPassword" "$UserToCreate" "$NewUserPassword" 'INSTALL'

#### Create new security rules
log_daemon_msg "$CreateUser_SecurituRules"
ScriptInvoke 'ScreenSTD' "$MySB_InstallDir/bin/MySB_SecurityRules" 'refresh' '--users' "$Switch"
StatusLSB

#### START services
# For 'MySB_CreateUser' and 'MySB_ChangeUserPassword'
# 'NginX is restarted by 'MySB_SecurityRules'
ServicesToRestart="vsftpd nfs-kernel-server"
if [ "$Switch" != "UPGRADE" ]; then
	ServicesToRestart="${ServicesToRestart} cron"
fi
ManageServices start "${ServicesToRestart}"

#### renting
MonthlyPayment "$UserToCreate"

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################