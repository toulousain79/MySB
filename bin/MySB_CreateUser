#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################

if [ "$USAGE" == "ON" ]; then
	ListingUsers
	for seedUser in $UsersList; do
		LIST="$LIST|$seedUser"
	done
	LIST="`echo \($LIST\) | sed -e 's/(|/(/g;'`"

	if [ ! -z "$LIST" ]; then
		echo -e "${CBLUE}Available users: $CEND${CYELLOW}$LIST$CEND"
	fi
	
	QuestionGetString NO  "Username for your seedbox: " UserToCreate
	while [ ! "`echo \"$LIST\" | grep $UserToCreate`" = "" ]; do
		QuestionGetString NO  "Username for your seedbox: " UserToCreate
	done

	NewUserPassword="`GenPassword 8`"
	if [ -z "NewUserPassword" ]; then
		QuestionGetString YES "Password for user $UserToCreate: " NewUserPassword
	fi
	
	QuestionGetString NO  "User can login via SFTP? " UserSFTP YES
	
	#QuestionGetString NO  "Add user to sudoers? " UserSUDO NO
	UserSUDO="NO"
	
	while [ ! "`ValidateMail $UserEmail`" = "1" ]; do
		QuestionGetString NO  "Email for this user? " UserEmail
	done

	UserSFTP="$(echo $UserSFTP | sed 's/YES/1/g;' | sed 's/NO/0/g;')"
	UserSUDO="$(echo $UserSUDO | sed 's/YES/1/g;' | sed 's/NO/0/g;')"
	Type="MANUAL"
else
	# user sftp sudo email type
	UserToCreate="$1"

	case "$2" in
		"INSTALL")	# INSTALL ($1 = user, $2 = type), user created by installation (main user)
			UserSFTP=1
			UserSUDO=0
			UserEmail="$MainUserEmail"
			NewUserPassword="$MainUserPassword"
			Type="$2"
		;;	
		*)			# APPLYCONFIG (user sftp sudo email type), user created by Web
			UserSFTP=$2
			UserSUDO=$3
			UserEmail="$4"
			Type="$5"
			NewUserPassword="`GenPassword 8`"
		;;
	esac
fi

#### Users vars
NewUserHomedir="/home/$UserToCreate"
HOMEDIR_ESCAPED=`echo $NewUserHomedir | sed s,/,\\\\\\\\\\/,g`
UPPERNEWUSER=`echo $UserToCreate | tr '[:lower:]' '[:upper:]'`
NEWRPC="/"$UPPERNEWUSER

LastPort="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT max(rtorrent_port) FROM users WHERE 1\"`"
if [ -z "$LastPort" ] || [ "$LastPort" == "" ]; then
	LastPort=51100
fi
(( LastPort++ ))
ScgiPort=$LastPort
(( LastPort++ ))
rTorrentPort=$LastPort


#### user infos
if [ "$UserToCreate" != "$MainUser" ]; then
	log_daemon_msg "Insert user informations in database"
	sqlite3 -cmd '.timeout 150000' $MySB_DB "INSERT into users (users_ident,users_email,users_passwd,rpc,sftp,sudo,scgi_port,rtorrent_port,home_dir) VALUES (\"$UserToCreate\",\"$UserEmail\",\"$NewUserPassword\",\"$NEWRPC\",\"$UserSFTP\",\"$UserSUDO\",\"$ScgiPort\",\"$rTorrentPort\",\"$NewUserHomedir\");"
else
	log_daemon_msg "Update user informations in database"
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE users SET users_passwd = '', rpc = '$NEWRPC', scgi_port = '$ScgiPort', rtorrent_port = '$rTorrentPort', home_dir = '$NewUserHomedir' WHERE users_ident = '$UserToCreate';"
fi
StatusLSB

#### create system user
log_daemon_msg "Create the system account for $UserToCreate"
useradd -c "MySB user $UserToCreate" -d $NewUserHomedir -s /bin/bash $UserToCreate &> /dev/null
StatusLSB

#### create directories
log_daemon_msg "Manage files et directories for $UserToCreate"
# Home
ManageUserHomeDir "$UserToCreate"
# ruTorrent
ruTorrentUsersConfigs "$UserToCreate"
# Seedbox-Manager
ManagerUsersConfigs "$UserToCreate"
# Cakebox-Light
CakeboxUsersConfigs "$UserToCreate"
StatusLSB

#### FTP
log_daemon_msg "Allow use of FTP for $UserToCreate"
echo "$UserToCreate" >> /etc/vsftpd.chroot_list
StatusLSB

#### Share
log_daemon_msg "Allow use of share directory for $UserToCreate"
mount --bind /home/MySB_share $NewUserHomedir/rtorrent/share
StatusLSB

#### Torrents files location
log_daemon_msg "Mount storage directory for torrents files for $UserToCreate"
mount --bind $RutorrentDir/share/users/$UserToCreate/torrents $NewUserHomedir/rtorrent/torrents
StatusLSB

#### add to groups
log_daemon_msg "Assign user groups to $UserToCreate"
addgroup $UserToCreate MySB_users &> /dev/null

if [ "$UserSUDO" == "YES" ]; then
	addgroup $UserToCreate sudo &> /dev/null
fi
if [ "$UserSFTP" == "YES" ]; then
	addgroup $UserToCreate sshdusers &> /dev/null
fi
StatusLSB

#### custumize profile
if [ ! -f $NewUserHomedir/.profile ]; then
	log_daemon_msg "Customize profile for $UserToCreate"
	cp /etc/skel/.bashrc $NewUserHomedir
	cp /etc/skel/.bash_logout $NewUserHomedir
	cp /etc/skel/.profile $NewUserHomedir
	chown $UserToCreate:$UserToCreate $NewUserHomedir/.bashrc
	chown $UserToCreate:$UserToCreate $NewUserHomedir/.bash_logout
	chown $UserToCreate:$UserToCreate $NewUserHomedir/.profile
	perl -pi -e "s/#force_color_prompt=yes/force_color_prompt=yes/g" $NewUserHomedir/.bashrc
	StatusLSB
fi

#### rTorrent (.rtorrent.rc)
log_daemon_msg "Create the rTorrent configuration file for $UserToCreate"
cp $MySB_InstallDir/templates/rtorrent.rc.template $NewUserHomedir/.rtorrent.rc
perl -pi -e "s/<InstallDir>/$MySB_InstallDirEscaped/g" $NewUserHomedir/.rtorrent.rc
perl -pi -e "s/<server_ip>/$SrvIpAddress/g" $NewUserHomedir/.rtorrent.rc
perl -pi -e "s/<username>/$UserToCreate/g" $NewUserHomedir/.rtorrent.rc
perl -pi -e "s/<homedir>/$HOMEDIR_ESCAPED/g" $NewUserHomedir/.rtorrent.rc
perl -pi -e "s/<scgi_port>/$ScgiPort/g" $NewUserHomedir/.rtorrent.rc
perl -pi -e "s/<port_range>/$rTorrentPort-$rTorrentPort/g" $NewUserHomedir/.rtorrent.rc
if [ "$MySB_PeerBlock" == "rTorrent" ]; then
	perl -pi -e "s/#{1}ipv4_filter.load/ipv4_filter.load/g" $NewUserHomedir/.rtorrent.rc
	perl -pi -e "s/#{1}print/print/g" $NewUserHomedir/.rtorrent.rc
	perl -pi -e "s/#{1}schedule=load_filter/schedule=load_filter/g" $NewUserHomedir/.rtorrent.rc
fi

case "$FILESYSTEMTYPE" in
	"ext4"|"xfs"|"btrfs")
		perl -pi -e "s/system.file_allocate.set = no/system.file_allocate.set = yes/g" $NewUserHomedir/.rtorrent.rc
	;;	
	*)
		perl -pi -e "s/^system.file_allocate.set = yes/system.file_allocate.set = no/g" $NewUserHomedir/.rtorrent.rc
	;;
esac
StatusLSB

#### NginX
log_daemon_msg "Creating RPC file for $UserToCreate"
(
cat <<'EOF'
location /<USERNAME> {
	include scgi_params;
	scgi_pass 127.0.0.1:5995;
	auth_basic "Restricted area";
	auth_basic_user_file "/etc/nginx/passwd/MySB_<username>";
}

EOF
) > /etc/nginx/rpc/$UserToCreate.conf
perl -pi -e "s/5995/$ScgiPort/g" /etc/nginx/rpc/$UserToCreate.conf
perl -pi -e "s/<username>/$UserToCreate/g" /etc/nginx/rpc/$UserToCreate.conf
perl -pi -e "s/<USERNAME>/$UPPERNEWUSER/g" /etc/nginx/rpc/$UserToCreate.conf
StatusLSB

#### CakeBox
if [ "$IsInstalled_Cakebox" == "YES" ]; then
	log_daemon_msg "Create Cakebox configuration for $UserToCreate"

	(
	cat <<'EOF'
location /<username>/ {
		alias /home/<username>/;
		add_header Content-Disposition "attachment";
		satisfy any;
		allow all;
}

EOF
	) > /etc/nginx/rpc/$UserToCreate.cakebox
	perl -pi -e "s/<username>/$UserToCreate/g" /etc/nginx/rpc/$UserToCreate.cakebox
	
	StatusLSB
fi

#### NFS
if [ "$IsInstalled_NFS" == "YES" ]; then
	log_daemon_msg "Create NFS share for $UserToCreate"
	sed -i '/'$UserToCreate'/d' /etc/exports
	uid=`grep $UserToCreate /etc/passwd | awk -F: '{ print $3 }'`
	guid=`grep MySB_users /etc/group | awk -F: '{ print $3 }'`
	echo "/home/$UserToCreate/rtorrent 10.0.0.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,fsid=0,crossmnt) 10.0.1.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,nohide,fsid=0,crossmnt) 10.0.2.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,nohide,fsid=0,crossmnt)" >> /etc/exports
	StatusLSB
fi

#### OpenVPN
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	log_daemon_msg "Create OpenVPN account for user $UserToCreate"
	screen -dmS OpenVPN_Client /bin/bash $MySB_InstallDir/install/OpenVPN client "$UserToCreate" "INSTALL";
	WaitingSTD OpenVPN_Client	
	StatusLSB
fi

#### script init
log_daemon_msg "Create rTorrent init script for $UserToCreate"
cp $MySB_InstallDir/templates/etc.init.rtorrent.template /etc/init.d/rtorrent-$UserToCreate
RutorrentDirEscaped=`echo $RutorrentDir | sed s,/,\\\\\\\\\\/,g`
perl -pi -e "s/<InstallDir>/$MySB_InstallDirEscaped/g" /etc/init.d/rtorrent-$UserToCreate
perl -pi -e "s/<username>/$UserToCreate/g" /etc/init.d/rtorrent-$UserToCreate
perl -pi -e "s/<rutorrent_dir>/$RutorrentDirEscaped/g" /etc/init.d/rtorrent-$UserToCreate
chmod +x /etc/init.d/rtorrent-$UserToCreate
StatusLSB

#### cron
log_daemon_msg "Add init script to cron for $UserToCreate"
crontab -l > /tmp/crontab.tmp
sed -i '/'$UserToCreate'/d' /tmp/crontab.tmp
echo "*/5 * * * * if ! ( /bin/ps U $UserToCreate | grep 'rtorrent' > /dev/null ); then service rtorrent-$UserToCreate restart &> /dev/null; fi" >> /tmp/crontab.tmp
echo "0 12 1 * * /bin/bash $MySB_InstallDir/scripts/PaymentReminder.bsh $UserToCreate CRON > /dev/null" >> /tmp/crontab.tmp
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusLSB

#### rtorrent max memory & rTorrent Blocklist
ListingUsers
CountingUsers
for seedUser in $UsersList; do
	log_daemon_msg "Change parameter 'pieces.memory.max.set' for $seedUser"
	LIGN=$(sed -n '/pieces.memory.max.set/=' /home/$seedUser/.rtorrent.rc)
	sed -i ''$LIGN'd' /home/$seedUser/.rtorrent.rc
	sed -i ''$LIGN'i\pieces.memory.max.set = '$(((($MEMORY/$TotalUsers)*1024)*1024))'\n' /home/$seedUser/.rtorrent.rc
	StatusLSB

	if [ -f $MySB_InstallDir/files/blocklists/blocklist_rtorrent.txt ]; then
		log_daemon_msg "Copy the blocklist file for $seedUser"
		cp $MySB_InstallDir/files/blocklists/* $NewUserHomedir/blocklist/
		StatusLSB
	else
		log_daemon_msg "Creating a new blocklist file for $seedUser"
		ScriptInvoke 'screen' "$MySB_InstallDir/scripts/BlocklistsRTorrent.bsh" 'REFRESH'
		StatusLSB	
	fi

	service rtorrent-$seedUser status &> /dev/null
	if [ $? -eq 0 ]; then
		service rtorrent-$seedUser restart
	fi
done

#### Assign password
ScriptInvoke "source" "$MySB_InstallDir/bin/MySB_ChangeUserPassword" "$UserToCreate" "$NewUserPassword" "INSTALL"

#### START services
# For 'MySB_CreateUser' and 'MySB_ChangeUserPassword'
# 'NginX is restarted by 'MySB_SecurityRules'
ManageServices start "vsftpd nfs-kernel-server cron"

#### Create new security rules
log_daemon_msg "Create new security rules"
ScriptInvoke 'screen' "$MySB_InstallDir/bin/MySB_SecurityRules" 'refresh' '--users' "$Type"
StatusLSB

#### renting
MonthlyPayment "$UserToCreate"

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################