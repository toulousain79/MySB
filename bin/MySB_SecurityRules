#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
#
# Usage:	MySB_SecurityRules {clean|create|refresh}
#
##################### FIRST LINE #####################################

source $MySB_InstallDir/inc/funcs_iptables

#### VARs
LocSwitch="$1"
gfnListCountUsers 'normal' #($gsUsersList)
AllUsersIPs="${gsSeedboxUsersIPs} ${gsMainUserIPs}"
AllUsersIPs="`echo $AllUsersIPs | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq`"
ServicesToRestart=""
ServicesToStop=""
#### VARs

#### Check arguments options
LoadKernelModules=NO
LoadKernelParameter=NO
ApplyConfigNginx=NO
ApplyConfigPeerGuardian=NO
ApplyConfigFail2Ban=NO
ApplyConfigBind=NO
ApplyIptablesUsers=NO
ApplyIptablesLetsEncrypt=NO
LoadOnBoot=NO

# Check by arguments
for Arg in "$@"; do
	case "$Arg" in
		INSTALL|UPGRADE)
			LoadKernelModules=YES
			LoadKernelParameter=YES
			ServicesToRestart=''
		;;
		INIT)
			LoadKernelModules=YES
			LoadKernelParameter=YES
			LoadOnBoot=YES
			ServicesToRestart='cron'
		;;
		*)
			ApplyIptablesUsers=YES
			ServicesToRestart='cron'
		;;
	esac
done

case "$LocSwitch" in
	create)
		ApplyConfigNginx="`gfnCheckCommand 1 nginx`"
		ApplyConfigPeerGuardian=$gbIsInstalled_PeerGuardian
		ApplyConfigFail2Ban=$gbIsInstalled_Fail2Ban
		ApplyConfigBind="`gfnCheckCommand 1 named`"
	;;
	clean)
		ApplyConfigNginx="`gfnCheckCommand 1 nginx`"
		ApplyConfigBind="`gfnCheckCommand 1 named`"
	;;
	refresh)
		for Arg in "$@"; do
			case "$Arg" in
				--letsencrypt)
					unset LetsEncryptIPs Temp
					LetsEncryptOpenPort="`cmdMySQL 'MySB_db' "SELECT letsencrypt_openport FROM system WHERE id_system='1';"`"
					Temp="`cmdMySQL 'MySB_db' "SELECT ipv4 FROM lets_encrypt;"`"
					if [ "$gsIpRestriction" == "YES" ]; then
						for ip in $Temp; do
							LetsEncryptIPs="${LetsEncryptIPs} $ip/32"
						done
					else
						LetsEncryptIPs="0/0"
					fi
					LetsEncryptIPs="`echo $LetsEncryptIPs | sed -e 's/^ //g;' | sed 's/\s+$//' | sort | uniq`"
					ApplyIptablesUsers=NO
					ApplyIptablesLetsEncrypt=YES
					ApplyConfigPeerGuardian=$gbIsInstalled_PeerGuardian
				;;
				--users)
					ApplyIptablesUsers=YES
					ApplyConfigNginx="`gfnCheckCommand 1 nginx`"
					ApplyConfigFail2Ban=$gbIsInstalled_Fail2Ban
					ApplyConfigPeerGuardian=$gbIsInstalled_PeerGuardian
				;;
				--trackers)
					ApplyConfigBind="`gfnCheckCommand 1 named`"
					ApplyConfigPeerGuardian=$gbIsInstalled_PeerGuardian
				;;
				--blocklists)
					ApplyConfigBind="`gfnCheckCommand 1 named`"
					ApplyConfigPeerGuardian=$gbIsInstalled_PeerGuardian
				;;
				--pglcmd)
					ApplyIptablesUsers=YES
					ApplyConfigPeerGuardian=$gbIsInstalled_PeerGuardian
				;;
				--all)
					ApplyIptablesUsers=YES
					ApplyConfigNginx="`gfnCheckCommand 1 nginx`"
					ApplyConfigBind="`gfnCheckCommand 1 named`"
					ApplyConfigFail2Ban=$gbIsInstalled_Fail2Ban
					ApplyConfigPeerGuardian=$gbIsInstalled_PeerGuardian
				;;
			esac
		done
	;;
esac

if [ "$ApplyConfigBind" == "YES" ]; then
	ServicesToRestart="${ServicesToRestart} bind9"
fi
if [ "$ApplyConfigFail2Ban" == "YES" ]; then
	ServicesToRestart="${ServicesToRestart} fail2ban"
fi
if [ "$ApplyConfigPeerGuardian" == "YES" ]; then
	ServicesToRestart="${ServicesToRestart} pglcmd"
fi
if [ "$ApplyConfigNginx" == "YES" ]; then
	ServicesToRestart="${ServicesToRestart} nginx"
fi
if gfnCheckCommand 0 dnscrypt-proxy; then
	case "$gbDnsCryptSwitch" in
		'0')	ServicesToStop="dnscrypt-proxy";;
		'1')	ServicesToRestart="${ServicesToRestart} dnscrypt-proxy";;
	esac
fi
#### Check arguments options

#### Functions
# Create all rules for services (config files)
CreateServicesRules() {
	#### NginX
	if [ "$ApplyConfigNginx" == "YES" ] && [ "$gsIpRestriction" == "YES" ]; then
		log_daemon_msg "$SecurityRules_NginX_AllUsers"
		echo "	# Users allowed IP" > /etc/nginx/conf.d/ip_restriction
		for IPv4 in $AllUsersIPs; do
			echo "	allow $IPv4;" >> /etc/nginx/conf.d/ip_restriction
		done
		unset IPv4
		gfnStatusLSB
	fi
	#### NginX

	#### NginX
	if [ "$ApplyConfigNginx" == "YES" ]; then
		if [ "$gsIpRestriction" == "YES" ]; then
			if [ "$gbIsInstalled_OpenVPN" == "YES" ]; then
				# OpenVPN local IP addresses
				log_daemon_msg "$SecurityRules_NginX_OpenVPN"
				echo "	# Restricted IP for OpenVPN users" >> /etc/nginx/conf.d/ip_restriction
				for IPv4 in $gsVpnLocalIps; do
					echo "	allow $IPv4;" >> /etc/nginx/conf.d/ip_restriction
				done
				unset IPv4
				gfnStatusLSB
			fi

			# Loopback
			log_daemon_msg "$SecurityRules_NginX_Loopback"
			echo "	# Localhost" >> /etc/nginx/conf.d/ip_restriction
			echo "	allow 127.0.0.1;" >> /etc/nginx/conf.d/ip_restriction
			gfnStatusLSB

			# Deny all others
			echo "	# Deny all others" >> /etc/nginx/conf.d/ip_restriction
			echo "	deny all;" >> /etc/nginx/conf.d/ip_restriction
		else
			log_daemon_msg "$SecurityRules_NginX_SatisfyAll"
			echo "	# Allow any one" >> /etc/nginx/conf.d/ip_restriction
			echo "	satisfy all;" > /etc/nginx/conf.d/ip_restriction
			gfnStatusLSB
		fi
	fi
	#### NginX

	#### BIND
	if [ "$ApplyConfigBind" == "YES" ]; then
		log_daemon_msg "$SecurityRules_Bind_BlockOut"
		echo "#### MySB - Blacklisted domains (ex: inactive trackers)" > /etc/bind/MySB.zones.blakclists
		AllTrackersDomain="`cmdMySQL 'MySB_db' "SELECT tracker_domain FROM trackers_list WHERE is_active='0' AND to_check='0';"`"
		for TrackerDomain in $AllTrackersDomain; do
			echo "zone \"$TrackerDomain\" { type master; file \"/etc/bind/db.empty\"; };" >> /etc/bind/MySB.zones.blakclists
		done
		perl -pi -e "s/^#include \"\/etc\/bind\/MySB.zones.blakclists\";/include \"\/etc\/bind\/MySB.zones.blakclists\";/g" /etc/bind/named.conf.local
		gfnStatusLSB 0

		log_daemon_msg "$SecurityRules_Bind_TrackersHosts"
		gfnCreateHostsFile
		gfnStatusLSB 0
	fi
	#### BIND

	#### Fail2Ban
	if [ "$ApplyConfigFail2Ban" == "YES" ]; then
		source $MySB_InstallDir/inc/funcs_by_script/funcs_Fail2Ban
		gfnFail2BanWhitheList 1
	fi
	#### Fail2Ban

	#### PeerGuardian
	if [ "$ApplyConfigPeerGuardian" == "YES" ]; then
		if [ -z $funcs_PeerGuardian ]; then
			source $MySB_InstallDir/inc/funcs_by_script/funcs_PeerGuardian
		fi

		# Create '/etc/pgl/pglcmd.conf'
		gfnPeerGuardianPglcmdConf 0
		# Create '/etc/pgl/allow.p2p'
		gfnPeerGuardianAllowP2P 0
		# Create '/etc/pgl/blocklists.list'
		gfnPeerGuardianBlocklistsList 0 "CreateFile"
		# Create '/etc/pgl/*.insert.sh'
		gfnPeerGuardianIptablesInsert 0
	fi
	#### PeerGuardian
}

# Restart all rTorrent session if needed
RestartRtorrentSessions() {
	case "$1" in
		stop)
			for FnUser in $gsUsersList; do
				if [ -f /etc/init.d/rtorrent-$FnUser ]; then
					service rtorrent-$FnUser stop
				fi
			done
		;;
		start)
			service cron status > /dev/null
			if [ $? -eq 0 ]; then
				for FnUser in $gsUsersList; do
					if [ -f /etc/init.d/rtorrent-$FnUser ]; then
						service rtorrent-$FnUser status &> /dev/null
						if [ $? -ne 0 ]; then
							service rtorrent-$FnUser restart
						fi
					fi
				done
			fi
		;;
	esac
}
#### Functions

#### Begin
case "$LocSwitch" in
	clean)
		#### STOP services
		RestartRtorrentSessions "stop"
		gfnManageServices stop "pglcmd fail2ban cron"
		#### STOP services

		#### IPtables - Removal of existing rules
		log_daemon_msg "$SecurityRules_IPtables_RemoveAll"
		gfnFlushingIptables
		gfnStatusLSB
		#### IPtables - Removal of existing rules

		#### NginX - Satisfy all
		if [ "$ApplyConfigNginx" == "YES" ]; then
			log_daemon_msg "$SecurityRules_NginX_SatisfyAll"
			echo "	# Allow any one" >> /etc/nginx/conf.d/ip_restriction
			echo "	satisfy all;" > /etc/nginx/conf.d/ip_restriction
			gfnStatusLSB
		else
			log_daemon_msg "$SecurityRules_NginX_NotInstalled"
			gfnStatusLSB
		fi
		#### NginX - Satisfy all

		#### Bind - Unblock inactive tracker domains
		if [ "$ApplyConfigBind" == "YES" ]; then
			log_daemon_msg "$SecurityRules_Bind_UnblockTracker"
			perl -pi -e "s/^include \"\/etc\/bind\/MySB.zones.blakclists\";/#include \"\/etc\/bind\/MySB.zones.blakclists\";/g" /etc/bind/named.conf.local
			gfnStatusLSB
		else
			log_daemon_msg "$SecurityRules_Bind_NotInstalled"
			gfnStatusLSB
		fi
		#### Bind - Unblock inactive tracker domains

		#### START services
		gfnManageServices start "nginx bind9"
		#### START services

		#### STOP services
		gfnManageServices stop "$ServicesToStop"
		#### STOP services

		#### IPtables - SAVE Iptables Rules
		iptables-save > /etc/iptables.up.rules
		cp -f /etc/iptables.up.rules $MySB_InstallDir/files/current-iptables-rules
		if [ "$gbIsInstalled_Webmin" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
			cp -f /etc/iptables.up.rules /etc/webmin/firewall/iptables.save
		fi
		if [ ! -z "$gbDevMode" ] && [ $gbDevMode -eq 1 ]; then
			cat /etc/iptables.up.rules >> $MySB_InstallDir/logs/${gsScriptName}_IPTABLES.log
		fi
		#### IPtables - SAVE Iptables Rules
	;;

	create)
		#### STOP services
		RestartRtorrentSessions "stop"
		gfnManageServices stop "cron pglcmd fail2ban"
		#### STOP services

		#### Kernel - Loading modules
		if [ "$LoadKernelModules" == "YES" ]; then
			log_daemon_msg "$SecurityRules_Kernel_Loading"
			gfnLoadingKernelModules
			gfnStatusLSB
		fi
		#### Kernel - Loading modules

		#### Kernel - Parameter Configuration
		if [ "$LoadKernelParameter" == "YES" ]; then
			log_daemon_msg "$SecurityRules_Kernel_Parameter"
			gfnKernelParamConfig
			gfnStatusLSB
		fi
		#### Kernel - Parameter Configuration

		#### IPtables - Removal of existing rules
		log_daemon_msg "$SecurityRules_IPtables_RemoveAll"
		gfnFlushingIptables
		gfnStatusLSB
		#### IPtables - Removal of existing rules

		#### IPtables - Prohibit any incoming/outgoing connections
		log_daemon_msg "$SecurityRules_IPtables_ProhibitConn"
		iptables -P INPUT DROP
		iptables -P FORWARD DROP
		iptables -P OUTPUT DROP
		gfnStatusLSB
		#### IPtables - Prohibit any incoming/outgoing connections

		#### IPtables - Creating user chains
		log_daemon_msg "$SecurityRules_IPtables_UserChains"
		gfnCreatingUserChain
		gfnStatusLSB
		#### IPtables - Creating user chains

		#### IPtables - Populating user chains
		log_daemon_msg "$SecurityRules_IPtables_BadChains"
		gfnPopulatingBadChain
		gfnStatusLSB
		#### IPtables - Populating user chains

		#### IPtables - Populating ICMP chain
		Message="$SecurityRules_IPtables_ICMP_0"
		if [ ! -z "$gsServerProvider" ] && [ "$gsServerProvider" != "$Global_NO" ]; then
			Message="$SecurityRules_IPtables_ICMP_1"
		fi
		log_daemon_msg "$Message"
		gfnPopulatingIcmpChain 'create'
		gfnStatusLSB
		#### IPtables - Populating ICMP chain

		#### IPtables - Populating UDP inboud user chain
		log_daemon_msg "$SecurityRules_IPtables_UdpIn"
		gfnPopulatingUdpInboundChain 'create'
		gfnStatusLSB
		#### IPtables - Populating UDP inboud chain

		#### IPtables - Populating UDP outbound chain
		log_daemon_msg "$SecurityRules_IPtables_UdpOut"
		gfnPopulatingUdpOutboundChain
		gfnStatusLSB
		#### IPtables - Populating UDP outbound chain

		#### IPtables - Populating TCP inboud user chain
		log_daemon_msg "$SecurityRules_IPtables_TcpIn"
		gfnPopulatingTcpInboundChain 'create'
		gfnStatusLSB
		#### IPtables - Populating TCP inboud chain

		#### IPtables - Populating TCP outbound user chain
		log_daemon_msg "$SecurityRules_IPtables_TcpOut"
		gfnPopulatingTcpOutboundChain
		gfnStatusLSB
		#### IPtables - Populating TCP outbound chain

		#### IPtables - Process INPUT chain
		log_daemon_msg "$SecurityRules_IPtables_Input"
		gfnProcessInputChain
		gfnStatusLSB
		#### IPtables - Process INPUT chain

		#### IPtables - Process FORWARD chain
		log_daemon_msg "$SecurityRules_IPtables_Forward"
		gfnProcessForwardChain
		gfnStatusLSB
		#### IPtables - Process FORWARD chain

		#### IPtables - Process OUTPUT chain
		log_daemon_msg "$SecurityRules_IPtables_Output"
		gfnProcessOutputChain
		gfnStatusLSB
		#### IPtables - Process OUTPUT chain

		#### IPtables - Process POSTROUTING chain
		log_daemon_msg "$SecurityRules_IPtables_Postrouting"
		gfnProcessPostroutingChain
		gfnStatusLSB
		#### IPtables - Process POSTROUTING chain

		#### Services - Create all security rules for services
		CreateServicesRules
		#### Services - Create all security rules for services

		#### START services
		gfnManageServices start "$ServicesToRestart"
		RestartRtorrentSessions "start"
		#### START services

		#### STOP services
		gfnManageServices stop "$ServicesToStop"
		#### STOP services

		#### IPtables - SAVE Iptables Rules
		iptables-save > /etc/iptables.up.rules
		cp -f /etc/iptables.up.rules $MySB_InstallDir/files/current-iptables-rules
		if [ "$gbIsInstalled_Webmin" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
			cp /etc/iptables.up.rules /etc/webmin/firewall/iptables.save
		fi
		if [ ! -z "$gbDevMode" ] && [ $gbDevMode -eq 1 ]; then
			cat /etc/iptables.up.rules >> $MySB_InstallDir/logs/${gsScriptName}_IPTABLES.log
		fi
		#### IPtables - SAVE Iptables Rules

		#### Complete previous upgrade
		if [ "$LoadOnBoot" == "YES" ]; then
			ScriptOnBoot="`cmdMySQL 'MySB_db' "SELECT name,script FROM repositories WHERE on_boot='1' AND active='1';" | sed 's/\t/|/g;'`"
			if [ ! -z "$ScriptOnBoot" ]; then
				IFS=$'\n'
				for Script in $ScriptOnBoot; do
					Name="`echo $Script | awk '{split($0,a,"|"); print a[1]}'`"
					File="`echo $Script | awk '{split($0,a,"|"); print a[2]}'`"

					log_daemon_msg "$SecurityRules_UpgradeEnd $Name"
					gfnScriptInvoke 'ScreenSTD' "$File" 'INIT'
					gfnStatusLSB
				done
				unset IFS
			fi
		fi
	;;

	refresh)
		#### IPtables - SAVE Iptables Rules
		log_daemon_msg "$SecurityRules_IPtables_Save"
		iptables-save > $MySB_InstallDir/temp/current-iptables-rules
		if [ ! -z "$gbDevMode" ] && [ $gbDevMode -eq 1 ]; then
			cat $MySB_InstallDir/temp/current-iptables-rules >> $MySB_InstallDir/logs/${gsScriptName}_IPTABLES.log
		fi
		gfnStatusLSB
		#### IPtables - SAVE Iptables Rules

		#### IPtables - ALTER Iptables Rules
		if [ "$ApplyIptablesLetsEncrypt" == "YES" ]; then
			log_daemon_msg "$SecurityRules_IPtables_LetEncrypt"

			# tcp_inbound chain
			gfnPopulatingTcpInboundChain 'letsencrypt'
			# tcp_inbound chain

			gfnStatusLSB
		fi
		if [ "$ApplyIptablesUsers" == "YES" ]; then
			log_daemon_msg "$SecurityRules_IPtables_Refresh"

			# icmp_packets chain
			gfnPopulatingIcmpChain 'refresh'
			# icmp_packets chain

			# udp_inbound chain
			gfnPopulatingUdpInboundChain 'refresh'
			# udp_inbound chain

			# tcp_inbound chain
			gfnPopulatingTcpInboundChain 'refresh'
			# tcp_inbound chain

			gfnStatusLSB
		fi
		#### IPtables - ALTER Iptables Rules

		#### Services - Create all security rules for services
		CreateServicesRules
		#### Services - Create all security rules for services

		#### IPtables - RESTORE Iptables Rules
		log_daemon_msg "$SecurityRules_IPtables_Restore"
		#sed -i '/^$/d' $MySB_InstallDir/temp/current-iptables-rules
		if [ ! -z "$gbDevMode" ] && [ $gbDevMode -eq 1 ]; then
			cat $MySB_InstallDir/temp/current-iptables-rules >> $MySB_InstallDir/logs/${gsScriptName}_IPTABLES.log
		fi
		iptables-restore < $MySB_InstallDir/temp/current-iptables-rules
		gfnStatusLSB
		#### IPtables - RESTORE Iptables Rules

		#### START services
		gfnManageServices start "$ServicesToRestart"
		#### START services

		#### STOP services
		gfnManageServices stop "$ServicesToStop"
		#### STOP services

		#### IPtables - SAVE Iptables Rules
		iptables-save > /etc/iptables.up.rules
		cp -f /etc/iptables.up.rules $MySB_InstallDir/files/current-iptables-rules
		if [ "$gbIsInstalled_Webmin" == "YES" ] && [ -d /etc/webmin/firewall/ ]; then
			cp -f /etc/iptables.up.rules /etc/webmin/firewall/iptables.save
		fi
		if [ ! -z "$gbDevMode" ] && [ $gbDevMode -eq 1 ]; then
			cat /etc/iptables.up.rules >> $MySB_InstallDir/logs/${gsScriptName}_IPTABLES.log
		fi
		#### IPtables - SAVE Iptables Rules

		if gfnCheckCommand 0 postfix && gfnGetPid $Service; then postfix flush; fi

		RestartRtorrentSessions "start"
	;;

	*)
		echo -e "$SecurityRules_Usage"
		echo
		END=OFF
		gfnEndingScript 0
	;;
esac

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################