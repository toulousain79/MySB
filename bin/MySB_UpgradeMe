#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### VARs
Type="$1"
Continue=0
Error=""

#### Updating clock
echo -e -n "${CBLUE}$UpgradeMe_Clock$CEND..."
ping -c4 0.fr.pool.ntp.org > /dev/null 2>&1
if [ $? -gt 0 ]; then
	gfnSwitchDNS "bind"
fi
/usr/sbin/ntpdate -u 0.fr.pool.ntp.org > /dev/null 2>&1
if [ $? -eq 0 ]; then
	echo -e "$Global_Done"
else
	echo -e "$Global_Failed"
	Continue=1
	Error="$UpgradeMe_Error_Clock"
fi

#### Check GitHub accessibility
if [ $Continue -eq 0 ]; then
	echo -e -n "${CBLUE}$UpgradeMe_GitHubAccess$CEND..."
	ping -c4 github.com > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo -e "$Global_Done"
	else
		echo -e "$Global_Failed"
		Continue=2
		Error="$UpgradeMe_Error_GitHubAccess"
	fi
fi

#### Update actual repo
if [ $Continue -eq 0 ]; then
	echo -e -n "${CBLUE}$UpgradeMe_UpdateGithub$CEND..."
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/bin/MySB_GitHubRepoUpdate" 'REFRESH'
	gfnStatusSTD
fi

if [ $Continue -eq 0 ]; then
	if [ -f $MySB_InstallDir/dev ]; then
		#### DEV - To force an upgrade
		MySB_NewVersion="`cat $MySB_InstallDir/dev`"
	else
		#### Check if new version
		gfnCheckCommand 0 dnscrypt-proxy && service dnscrypt-proxy stop && service dnscrypt-proxy start
		MySB_NewVersion="`curl -skLS --retry 3 --silent https://raw.githubusercontent.com/toulousain79/MySB/rev/version 2> /dev/null`"
	fi

	MySB_CurrVersionDiff="`echo $gsCurrentVersion | sed "s/v//g;" | sed "s/\.//g;"`"	# v3.5 --> 35
	MySB_NewVersionDiff="`echo $MySB_NewVersion | sed "s/v//g;" | sed "s/\.//g;"`"	# v4.0 --> 40

	# New version is greater than current version, so we can do an upgrade of MySB
	if [ ! -z "$MySB_CurrVersionDiff" ] && [ ! -z "$MySB_NewVersionDiff" ] && [ "$MySB_NewVersionDiff" -gt "$MySB_CurrVersionDiff" ]; then
		case "$Type" in
			"CRON")
				curl -skLS --retry 3 https://raw.githubusercontent.com/toulousain79/MySB/$MySB_NewVersion/Changelog.md -o $MySB_InstallDir/temp/changelog
				gfnSendMail "MySB - $UpgradeMe_NewVersion ($MySB_NewVersion)" "$gsMainUserName" "new_version" "$UpgradeMe_NewVersion"
				[ -f $MySB_InstallDir/temp/changelog ] && rm -f $MySB_InstallDir/temp/changelog
				gfnEndingScript 0
			;;
			*)
				UpgradeMe_Msg_VersionAvailable="`echo $UpgradeMe_Msg_VersionAvailable | sed "s/#version#/$MySB_NewVersion/g;"`"
				echo
				echo -e "$UpgradeMe_Msg_VersionAvailable"
				echo
				gfnQuestionGetString NO "$Global_WantToContinue" WantToContinue $Global_NO
				WantToContinue="`echo $WantToContinue | tr '[:lower:]' '[:upper:]'`"
				if [ "$WantToContinue" == "$Global_NO" ]; then
					gfnEndingScript 0
				fi
			;;
		esac
	else
		UpgradeMe_UpToDate="`echo $UpgradeMe_UpToDate | sed "s/#version#/$MySB_NewVersion/g;"`"
		echo
		echo -e "$UpgradeMe_UpToDate"
		echo
		gfnEndingScript 0
	fi

	#### Backup
	echo -e "${CBLUE}$UpgradeMe_CreateBackup$CEND"
	echo -e -n "${CRED}$Global_PleaseWait $CEND"
	gfnCountDown 3

	# Cleaning MySB before compress
	gfnCleanBeforeUpgrade

	# MySQL databases DUMP
	DateTime="`/bin/date +%Y%m%d-%H%M%S`"
	DbList="`ls -1r /var/lib/mysql/`"
	for Database in $DbList; do
		if [ -d /var/lib/mysql/$Database/ ]; then
			case "$Database" in
				'mysql'|'performance_schema')	continue;;
				*)
					mysqldump --defaults-extra-file=/root/.config.cnf $Database > $MySB_InstallDir/db/MySQL_$Database-$DateTime-$gsCurrentVersion.dump.sql
					if [ $? -ne 0 ]; then
						Continue=3
						Error="`echo $UpgradeMe_Error_BackupDatabase | sed "s/#database#/$Database/g;"`"
					fi
				;;
			esac
		fi
	done

	# Creating backup with Backup-Manager
	[ ! -d ${MySB_InstallDir}_backup/temp ] && mkdir -p ${MySB_InstallDir}_backup/temp
	[ $gbDevMode -eq 1 ] && backup-manager-tools remove "$MySB_InstallDir"
	backup-manager -v -c /etc/MySB/BM_MySB.conf

	if [ $? -gt 0 ]; then
		Continue=4
		Error="UpgradeMe_Error_BackupFailed"
	fi

	[ $gbDevMode -eq 1 ] && backup-manager-tools add "$MySB_InstallDir"
	[ -d ${MySB_InstallDir}_backup/temp ] && mv ${MySB_InstallDir}_backup/temp ${MySB_InstallDir}_backup/$gsCurrentVersion
fi

#### MySB Script GitHub
if [ $Continue -eq 0 ]; then
	echo
	UpgradeMe_Merge="`echo $UpgradeMe_Merge | sed "s/#current_version#/$gsCurrentVersion/g;" | sed "s/#new_version#/$MySB_NewVersion/g;"`"
	echo -e "${CBLUE}$UpgradeMe_Merge$CEND"
	echo -e -n "${CRED}$Global_PleaseWait $CEND"
	gfnCountDown 3
	echo

	#### Upgrade in progress page + Stop Cron service
	gfnUpgradeInProgress "on"

	cd $MySB_InstallDir/

	git fetch --all
	if [ $? -gt 0 ]; then
		Continue=5
		Error="$UpgradeMe_Error_GitFetch"
	fi

	if [ $Continue -eq 0 ]; then
		git stash
		if [ $? -gt 0 ]; then
			Continue=6
			Error="$UpgradeMe_Error_GitPull"
		fi
	fi

	if [ $Continue -eq 0 ]; then
		git checkout -b $MySB_NewVersion origin/$MySB_NewVersion
		if [ $? -gt 0 ]; then
			Continue=7
			UpgradeMe_Error_GitCheckout="`echo $UpgradeMe_Error_GitCheckout | sed "s/#new_version#/$MySB_NewVersion/g;"`"
			Error="$UpgradeMe_Error_GitCheckout"
		fi
	fi

	if [ $Continue -eq 0 ]; then
		git pull
		if [ $? -gt 0 ]; then
			Continue=8
			Error="$UpgradeMe_Error_GitPull"
		else
			git stash clear
			# Cleaning old branch
			gfnCleanBeforeUpgrade
		fi
	fi
fi

#### Completing the upgrade
MySB_NewVersion="`cat $MySB_InstallDir/version`"
MySB_RepoVersion="`cd $MySB_InstallDir/ && git branch | grep '*' | awk '{ print $2 }'`"

if [ $Continue -eq 0 ]; then
	if [ "$MySB_NewVersion" == "$MySB_RepoVersion" ]; then
		if [ -f $MySB_InstallDir/upgrade/From_$gsCurrentVersion-to-$MySB_NewVersion.bsh ]; then
			echo
			echo -e "${CBLUE}$UpgradeMe_StartScreen$CEND"
			screen -wipe &> /dev/null
			screen -dmS MySB_Upgrade /bin/bash $MySB_InstallDir/upgrade/From_$gsCurrentVersion-to-$MySB_NewVersion.bsh;
			echo -e -n "${CRED}$Global_PleaseWait $CEND"
			gfnCountDown 10

			screen -r MySB_Upgrade
		else
			Continue=9
			Error="$UpgradeMe_Error_UpgradeSciptMissing ($MySB_InstallDir/upgrade/From_$gsCurrentVersion-to-$MySB_NewVersion.bsh)"
		fi
	fi
fi

#### Upgrade in progress page + Start Cron service
gfnUpgradeInProgress "off"

#### Finished
clear
if [ -f $MySB_InstallDir/dev ]; then
	rm -f $MySB_InstallDir/dev
fi
if [ $Continue -eq 0 ]; then
	echo -e "${CGREEN}$UpgradeMe_UpgradeFinished$CEND"
	echo
else
	echo -e "${CRED}$UpgradeMe_ErrorOccured$CEND"
	echo -e "${CRED}$Error$CEND"
	echo -e "${CRED}Code: $Continue$CEND"
	echo
	gfnEndingScript 0
fi

# -----------------------------------------
funcs=0; funcs_sql=0; funcs_tools=0;
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
