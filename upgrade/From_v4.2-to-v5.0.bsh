#!/bin/bash
# -----------------------------------------
source $(dirname $0)/../inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Count steps
echo
CurrentSTEP=0
TotalSTEP=$(cat $0 | grep 'CurrentSTEP++' | grep -v 'TotalSTEP' | wc -l)

#### Banner
if [ "$BANNER" == "ON" ]; then
	gfnBannerGenerator
fi
echo
echo -e "$Upgrade_Banner"
echo

#### Questions
gfnScriptInvoke 'source' "$MySB_InstallDir/install/Questions" "$$" 'UPGRADE' "$MySB_InstallDir"
echo

#### Vars
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ReadingDatabaseInfos$CEND..."
source $MySB_InstallDir/inc/vars
gfnStatusSTD

#### Bulk changes
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_BulkChanges$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/upgrade/BulkChanges.bsh" 'BEFORE' 'UPGRADE'
gfnStatusSTD

#### MySQL
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_MySQL$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/MySQL" 'UPGRADE'
gfnStatusSTD

#### SourcesList
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_UpdateDebianSources$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/SourcesList" 'UPGRADE'
gfnStatusSTD

#### Packages
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_AllNeededPackages$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Packages" 'UPGRADE'
gfnStatusSTD

#### SSH
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_SSH$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/SSH" 'UPGRADE'
gfnStatusSTD

#### Getting information about OVH monitoring engine
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ProviderInfos$CEND..."
case "$gsServerProvider" in
	'OVH')
		gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Monitoring" 'UPGRADE'
		gfnStatusSTD
	;;
	*)	echo -e "$Global_NothingToDo";;
esac

#### Tweaks
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Optimiszation$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Tweaks" 'UPGRADE'
gfnStatusSTD

#### Quota
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Quota$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Quota" 'UPGRADE'
gfnStatusSTD

#### DownloadAll
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DownloadAll$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/DownloadAll" 'UPGRADE'
gfnStatusSTD

#### Certificate
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Certificate$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Certificates" 'CreateCACertificate' 'mysb' 'UPGRADE'
gfnStatusSTD

#### PHP
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_PHP$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/PHP" 'UPGRADE'
gfnStatusSTD

#### Tools
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Tools$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Tools" 'UPGRADE'
gfnStatusSTD

#### NginX
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_NginX$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Nginx" 'UPGRADE'
gfnStatusSTD

#### Let's Encrypt
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_LetsEncrypt$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/LetsEncrypt" 'UPGRADE'
gfnStatusSTD

#### VSFTP
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_VSFTPd VSFTPd$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/VSFTP" 'UPGRADE'
gfnStatusSTD

#### Postfix
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Postfix Postfix$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Postfix" 'UPGRADE'
gfnStatusSTD

#### Backup Manager
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_BackupManager$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/BackupManager" 'UPGRADE'
gfnStatusSTD

#### Shell In A Box
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ShellInABox$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/ShellInABox" 'UPGRADE'
gfnStatusSTD

#### Bind
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Bind$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Bind" 'UPGRADE'
gfnStatusSTD

#
########## SECURITY - BoF ##########
#

#### Fail2Ban
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Fail2Ban$CEND..."
if [ "$gbToInstall_Fail2Ban" == "YES" ] || [ "$gbIsInstalled_Fail2Ban" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Fail2Ban';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Fail2Ban" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### PeerGuardian
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_PeerGuardian$CEND..."
if [ "$gsMySB_PeerBlock" == "PeerGuardian" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='PeerGuardian';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/PeerGuardian" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

### DNScrypt-proxy
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DNScrypt$CEND..."
if [ "$gbToInstall_DNScrypt" == "YES" ] || [ "$gbIsInstalled_DNScrypt" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='DNScrypt-proxy';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/DNScrypt" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### RKHunter
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_RKhunter$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/RKHunter" 'UPGRADE'
gfnStatusSTD

#
########## SECURITY - EoF ##########
#

#
########## SERVICES - BoF ##########
#

#### rTorrent
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_rTorrent$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/rTorrent" 'UPGRADE'
gfnStatusSTD

#### ruTorrent
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ruTorrent$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/ruTorrent" 'UPGRADE'
gfnStatusSTD

#### Seedbox-Manager
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Manager$CEND..."
if [ "$gbToInstall_Manager" == "YES" ] || [ "$gbIsInstalled_Manager" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Seedbox-Manager';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/SeedboxManager" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### Cakebox Light
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Cakebox$CEND..."
if [ "$gbToInstall_Cakebox" == "YES" ] || [ "$gbIsInstalled_Cakebox" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='CakeBox-Light';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/CakeboxLight" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### LoadAvg
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_LoadAvg$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/LoadAvg" 'UPGRADE'
gfnStatusSTD

#### OpenVPN
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_OpenVPN$CEND..."
if [ "$gbToInstall_OpenVPN" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='OpenVPN';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/OpenVPN" 'server' 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### Samba
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Samba$CEND..."
if [ "$gbToInstall_OpenVPN" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Samba';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Samba" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### NFS
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_NFS$CEND..."
if [ "$gbToInstall_OpenVPN" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='NFS';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/NFS" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### LogWatch
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_LogWatch$CEND..."
if [ "$gbToInstall_LogWatch" == "YES" ] || [ "$gbIsInstalled_LogWatch" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='LogWatch';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Logwatch" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

### PlexMedia
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_PlexMedia$CEND..."
if [ "$gbToInstall_PlexMedia" == "YES" ] || [ "$gbIsInstalled_PlexMedia" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Plex Media Server';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/PlexMedia" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### NextCloud
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_NextCloud$CEND..."
if [ "$gbToInstall_NextCloud" == "YES" ] || [ "$gbIsInstalled_NextCloud" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='NextCloud';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/NextCloud" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### 27 - Webmin
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Webmin$CEND..."
if [ "$gbToInstall_Webmin" == "YES" ] || [ "$gbIsInstalled_Webmin" == "YES" ]; then
	cmdMySQL 'MySB_db' "UPDATE services SET to_install = '1' WHERE serv_name='Webmin';"
	gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Webmin" 'UPGRADE'
	gfnStatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#
########## SERVICES - EoF ##########
#

######################################################################

#### Security rules
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_FinalSecurityRules$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/bin/MySB_SecurityRules" 'create' 'UPGRADE'
gfnStatusSTD

#### Cron
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Cron$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Cron" 'UPGRADE'
gfnStatusSTD

#### Bulk changes
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_BulkChanges$CEND..."
gfnScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/upgrade/BulkChanges.bsh" 'AFTER' 'UPGRADE'
gfnStatusSTD

clear
echo -e "$Upgrade_UpgradeFinished"
echo
REBOOT=$Global_YES
REBOOT="`echo $REBOOT | tr '[:lower:]' '[:upper:]'`"

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################