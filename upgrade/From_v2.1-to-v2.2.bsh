#!/bin/bash
# -----------------------------------------
source $(dirname $0)/../inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Count steps
echo
CurrentSTEP=0
TotalSTEP=20

BannerUpgrade

if [ "$BANNER" == "ON" ]; then
	BannerGenerator
fi
BannerUpgrade

#### Questions
ScriptInvoke "source" "$MySB_InstallDir/install/Questions" "$$" "UPGRADE"
#### Questions

echo

#### Vars
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ReadingDatabaseInfos$CEND..."
if [ -f $MySB_InstallDir/inc/vars ]; then source $MySB_InstallDir/inc/vars; fi
if [ -f $MySB_InstallDir/inc/funcs ]; then source $MySB_InstallDir/inc/funcs; fi
ListingUsers
StatusSTD

#### Upgrade in progress page
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ActivatingProgressPage$CEND..."
UpgradeInProgress "on"
StatusSTD

#### Stopping CRON and rTorrent sessions
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_StoppingCronAndRtorrent$CEND..."
service cron stop &> /dev/null
RtorrentSeesions="`ls -1r /etc/init.d/rtorrent-* | cut -d '/' -f 4`"
for Session in $RtorrentSeesions; do
	service $Session stop &> /dev/null
done
StatusSTD

#### Forcing NTP update
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_UpdatingClock$CEND..."
ping -c4 0.fr.pool.ntp.org > /dev/null 2>&1
if [ $? -gt 0 ]; then
	SwitchDNS "standard"
fi
/usr/sbin/ntpdate -u 0.fr.pool.ntp.org > /dev/null 2>&1
if [ $? -eq 0 ]; then
	SwitchDNS "dnscrypt"
fi
StatusSTD

######################################################################

#### Move some files & directories
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_MoveAndDelete$CEND..."
# NginX
if [ -f /etc/nginx/nginx.conf.dpkg-dist ]; then rm -f /etc/nginx/nginx.conf.dpkg-dist &> /dev/null; fi
if [ -f /etc/nginx/sites-available/default.dpkg-dist ]; then rm -f /etc/nginx/sites-available/default.dpkg-dist &> /dev/null; fi
# Seedbox-Manager
if [ "$IsInstalled_Manager" == "YES" ]; then
	if [ -f $ManagerDir/conf ]; then
		mv $ManagerDir/conf $MySB_InstallDir/temp/sm_conf &> /dev/null
		rm -rf $ManagerDir/* &> /dev/null
		mv $MySB_InstallDir/temp/sm_conf $ManagerDir/conf &> /dev/null
	fi
fi
StatusSTD

#### SQLite
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_UpdateDatabase$CEND..."
screen -dmS SQLite /bin/bash $MySB_InstallDir/install/SQLite 'UPGRADE';
WaitingScreen SQLite
StatusSTD

#### Packages
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_AllNeededPackages$CEND..."
screen -dmS Packages /bin/bash $MySB_InstallDir/install/Packages 'UPGRADE';
WaitingScreen Packages
StatusSTD

#### DownloadAll
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DownloadAll$CEND..."
screen -dmS DownloadAll /bin/bash $MySB_InstallDir/install/DownloadAll 'UPGRADE';
WaitingScreen DownloadAll
StatusSTD

#### SourcesList
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_UpdateDebianSources$CEND..."
screen -dmS SourcesList /bin/bash $MySB_InstallDir/install/SourcesList 'UPGRADE';
WaitingScreen SourcesList
StatusSTD

#### NginX
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_NginX$CEND..."
screen -dmS Nginx /bin/bash $MySB_InstallDir/install/Nginx 'UPGRADE';
WaitingScreen Nginx
StatusSTD

#### NFS
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_NFS$CEND..."
if [ "$ToInstall_OpenVPN" == "YES" ] || [ "$IsInstalled_OpenVPN" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'NFS';"
	screen -dmS NFS /bin/bash $MySB_InstallDir/install/NFS 'UPGRADE';
	WaitingScreen NFS
	StatusSTD
else
	echo -e "$Upgrade_NothingToDo"
fi

#### Samba
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Samba$CEND..."
if [ "$ToInstall_OpenVPN" == "YES" ] || [ "$IsInstalled_OpenVPN" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'Samba';"
	screen -dmS Samba /bin/bash $MySB_InstallDir/install/Samba 'UPGRADE';
	WaitingScreen Samba
	StatusSTD
else
	echo -e "$Upgrade_NothingToDo"
fi

#### Refresh tools
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_RefreshMe$CEND..."
screen -dmS MySB_RefreshMe /bin/bash $MySB_InstallDir/bin/MySB_RefreshMe 'all' 'UPGRADE';
WaitingScreen MySB_RefreshMe
StatusSTD

### DNScrypt-proxy
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DNScrypt$CEND..."
if [ "$ToInstall_DNScrypt" == "YES" ] || [ "$IsInstalled_DNScrypt" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'DNScrypt-proxy';"
	screen -dmS DNScrypt /bin/bash $MySB_InstallDir/install/DNScrypt 'UPGRADE';
	WaitingScreen DNScrypt
	StatusSTD
else
	echo -e "$Upgrade_NothingToDo"
fi

#### VSFTPd
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_VSFTPd$CEND..."
screen -dmS VSFTP /bin/bash $MySB_InstallDir/install/VSFTP 'UPGRADE';
WaitingScreen VSFTP
StatusSTD

#### Webmin
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Webmin$CEND..."
if [ "$ToInstall_Webmin" == "YES" ]; then
	screen -dmS Webmin /bin/bash $MySB_InstallDir/install/Webmin 'UPGRADE';
	WaitingScreen Webmin
	StatusSTD
else
	echo -e "$Upgrade_NothingToDo"		
fi

######################################################################

#### Cleaning
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Cleaning$CEND..."
rm -rf $MySB_InstallDir/temp/* &> /dev/null
StatusSTD

#### STOP & START services
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_RestartServices$CEND..."
ManageServices stop "stunnel4 postfix" &> /dev/null
ManageServices start "cron nginx openvpn stunnel4 postfix" &> /dev/null
StatusSTD

#### Create missing directories and change rights
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_OwnerAndRights$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### Security rules
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_FinalSecurityRules$CEND..."
screen -dmS MySB_SecurityRules /bin/bash $MySB_InstallDir/bin/MySB_SecurityRules 'create' 'UPGRADE';
WaitingScreen MySB_SecurityRules
StatusSTD

#### Upgrade in progress page
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DisablingProgressPage$CEND..."
UpgradeInProgress "off"
StatusSTD

clear
echo -e "$Upgrade_UpgradeFinished"
echo
QuestionGetString NO "$Upgrade_RebootNow" REBOOT $Global_YES
REBOOT="`echo $REBOOT | tr '[:lower:]' '[:upper:]'`"

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################