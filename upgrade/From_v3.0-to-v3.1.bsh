#!/bin/bash
# -----------------------------------------
source $(dirname $0)/../inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Count steps
echo
CurrentSTEP=0
TotalSTEP=$(cat $0 | grep 'CurrentSTEP++' | grep -v 'TotalSTEP' | wc -l)

if [ "$BANNER" == "ON" ]; then
	BannerGenerator
fi
echo
echo -e "$Upgrade_Banner"
echo

#### Questions
ScriptInvoke 'source' "$MySB_InstallDir/install/Questions" "$$" 'UPGRADE' "$MySB_InstallDir"
#### Questions

echo

#### Vars
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ReadingDatabaseInfos$CEND..."
if [ -f $MySB_InstallDir/inc/vars ]; then source $MySB_InstallDir/inc/vars; fi
ListingUsers
StatusSTD

#### Upgrade in progress page
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ActivatingProgressPage$CEND..."
UpgradeInProgress "on"
StatusSTD

#### Switching DNS
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_SwitchingDNS$CEND..."
SwitchDNS "bind"
StatusSTD

#### Forcing NTP update
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_UpdatingClock$CEND..."
ping -c4 0.fr.pool.ntp.org > /dev/null 2>&1
/usr/sbin/ntpdate -u 0.fr.pool.ntp.org > /dev/null 2>&1
StatusSTD

#### Move some files & directories
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_MoveAndDelete$CEND..."
# Old SQLite DB
if [ -f $MySB_DB ]; then rm -f $MySB_DB &> /dev/null; fi
# Temp Directory
if [ -d $MySB_InstallDir/temp ]; then rm -rf $MySB_InstallDir/temp/* &> /dev/null; fi
# Sources Directory
if [ -d $MySB_InstallDir/sources ]; then rm -rf $MySB_InstallDir/sources/* &> /dev/null; fi
# Templates Directory
if [ -d $MySB_InstallDir/templates ]; then rm -f $MySB_InstallDir/templates/*.template &> /dev/null; fi
StatusSTD

#### SourcesList
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_UpdateDebianSources$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/SourcesList" 'UPGRADE'
StatusSTD

#### Packages
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_AllNeededPackages$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Packages" 'UPGRADE'
StatusSTD

#### MySQL
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_MySQL$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/MySQL" 'UPGRADE'
StatusSTD

#### DownloadAll
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DownloadAll$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/DownloadAll" 'UPGRADE'
StatusSTD

#### RKHunter
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_RKhunter$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/RKHunter" 'UPGRADE'
StatusSTD

#### NginX
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_NginX$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Nginx" 'UPGRADE'
StatusSTD

#### PHP
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_PHP$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/PHP" 'UPGRADE'
StatusSTD

######################################################################

#### Something to do...
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_IptablesLogging$CEND..."
if [ -f /etc/rsyslog.d/iptables.conf ]; then rm -f /etc/rsyslog.d/iptables.conf; fi
echo ":msg,contains,\"[MySB] \" /var/log/iptables.log" > /etc/rsyslog.d/iptables.conf
echo "*.* ~" >> /etc/rsyslog.d/iptables.conf
perl -pi -e "s/^#cron.*/cron.*/g" /etc/rsyslog.conf
if [ ! -f /var/log/iptables.log ]; then touch /var/log/iptables.log; fi
cp $MySB_InstallDir/templates/logrotate/etc.logrotate.d.iptables.tmpl /etc/logrotate.d/iptables
chmod 0644 /etc/logrotate.d/iptables
service rsyslog restart &> /dev/null
logrotate -f /etc/logrotate.d/iptables &> /dev/null
#### Create init script for MySB_SecurityRules_Init
cp -f $MySB_InstallDir/templates/init/etc.init.MySB_SecurityRules_Init.tmpl /etc/init.d/MySB_SecurityRules_Init
chmod +x /etc/init.d/MySB_SecurityRules_Init
update-rc.d MySB_SecurityRules_Init defaults &> /dev/null
#### NTP (disable IPv6)
perl -pi -e "s/^restrict ::1/#restrict ::1/g" /etc/ntp.conf
perl -pi -e "s/^restrict -6/#restrict -6/g" /etc/ntp.conf
StatusSTD

#### Getting information about OVH monitoring engine
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ProviderInfos$CEND..."
if [ "$ServerProvider" == "OVH" ] || [ "$ServerProvider" == "ONLINE" ] || [ "$ServerProvider" == "DIGICUBE" ]; then
	ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Monitoring" 'UPGRADE'
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### Fail2Ban
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Fail2Ban$CEND..."
if [ "$ToInstall_Fail2Ban" == "YES" ] || [ "$IsInstalled_Fail2Ban" == "YES" ]; then
	Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'Fail2Ban'"
	ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Fail2Ban" 'UPGRADE'
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

### PeerGuardian
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_PeerGuardian$CEND..."
if [ "$IsInstalled_PeerGuardian" == "YES" ]; then
	cp -f $MySB_InstallDir/templates/etc.pgl.pglcmd.conf.tmpl /etc/pgl/pglcmd.conf
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### LogWatch
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_LogWatch$CEND..."
if [ "$ToInstall_LogWatch" == "YES" ] || [ "$IsInstalled_LogWatch" == "YES" ]; then
	Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'LogWatch'"
	ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Logwatch" 'UPGRADE'
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

#### ownCloud
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_ownCloud$CEND..."
if [ "$IsInstalled_ownCloud" == "YES" ]; then
	Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'ownCloud'"
	ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/ownCloud" 'UPGRADE'
	StatusSTD
	if [ -f $MySB_InstallDir/templates/owncloud/ownCloudUpgrade.tmpl ]; then
		cp $MySB_InstallDir/templates/owncloud/ownCloudUpgrade.tmpl $MySB_InstallDir/upgrade/ownCloud.upg
	fi
else
	echo -e "$Global_NothingToDo"
fi

### DNScrypt-proxy
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DNScrypt$CEND..."
if [ "$ToInstall_DNScrypt" == "YES" ] || [ "$IsInstalled_DNScrypt" == "YES" ]; then
	Func_SQL_Command 'UPDATE' 'MySB_db' 'services' "to_install = '1'" "serv_name = 'DNScrypt-proxy'"
	ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/DNScrypt" 'UPGRADE'
	StatusSTD
else
	echo -e "$Global_NothingToDo"
fi

### Logrotate
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Logrotate$CEND..."
LogRotate 'nginx' > /dev/null 2>&1
LogRotate 'iptables' > /dev/null 2>&1
LogRotate 'mysb' > /dev/null 2>&1
LogRotate 'mysql-server' > /dev/null 2>&1
if [ "$IsInstalled_OpenVPN" == "YES" ]; then
	LogRotate 'samba' > /dev/null 2>&1
fi
StatusSTD

######################################################################

#### Refresh tools
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_RefreshMe$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/bin/MySB_RefreshMe" "$Global_ALL" 'UPGRADE'
StatusSTD

#### Cleaning
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Cleaning$CEND..."
rm -rf $MySB_InstallDir/temp/* &> /dev/null
StatusSTD

#### Create missing directories and change rights
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_OwnerAndRights$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### STOP & START services
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_RestartServices$CEND..."
ManageServices stop "ntp stunnel4 postfix" &> /dev/null
ManageServices start "ntp stunnel4 postfix samba nginx dnscrypt-proxy" &> /dev/null
StatusSTD

#### Security rules
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_FinalSecurityRules$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/bin/MySB_SecurityRules" 'create' 'UPGRADE'
StatusSTD

#### Send mail for each user with new version
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_SendMail$CEND..."
if [ -f $MySB_InstallDir/inc/vars ]; then source $MySB_InstallDir/inc/vars; fi
MainUserId="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_users' 'users' "admin = '1'"`"
RutorrentDirEscaped="`echo $RutorrentDir | sed s,/,\\\\\\\\\\/,g`"
# Add last time check for users addresses
ListingUsers
for seedUser in $UsersList; do
	UserId="`Func_SQL_Command 'SELECT' 'MySB_db' 'id_users' 'users' "users_ident = '$seedUser'"`"
	UserPassword="`Func_SQL_Command 'SELECT' 'MySB_db' 'users_passwd' 'users' "users_ident = '$seedUser'"`"

	# Script Init
	cp $MySB_InstallDir/templates/init/etc.init.rtorrent.tmpl /etc/init.d/rtorrent-$seedUser
	RutorrentDirEscaped=`echo $RutorrentDir | sed s,/,\\\\\\\\\\/,g`
	perl -pi -e "s/<username>/$seedUser/g" /etc/init.d/rtorrent-$seedUser
	perl -pi -e "s/<rutorrent_dir>/$RutorrentDirEscaped/g" /etc/init.d/rtorrent-$seedUser
	chmod +x /etc/init.d/rtorrent-$seedUser

	# New rTorrent Cron
	crontab -l > /tmp/crontab.tmp
	sed -i "/rtorrent-$seedUser/d" /tmp/crontab.tmp
	echo "*/5 * * * * if ! ( /bin/ps U $seedUser | grep 'rtorrent' > /dev/null ); then service rtorrent-$seedUser restart > /dev/null 2>&1; fi" >> /tmp/crontab.tmp
	crontab /tmp/crontab.tmp
	rm -f /tmp/crontab.tmp

	if [ "$UserId" == "$MainUserId" ] && [ ! -z "$UserPassword" ]; then
		# Remove main user password from database
		Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "users_passwd = ''" "admin = '1'"
		ScriptInvoke 'ScreenSTD' "$MySB_InstallDir/bin/MySB_ChangeUserPassword" "$seedUser" "$UserPassword" 'UPGRADE'
	else
		# Init password required
		Func_SQL_Command 'UPDATE' 'MySB_db' 'users' "init_password = '1'" "users_ident = '$seedUser'"
		Subject="$Upgrade_SubjectUpgraded $MySB_CurrentVersion"
		Case="upgrade"
		SendMail "$Subject" "$seedUser" "$Case"
	fi
done
StatusSTD

#### Cron
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_Cron$CEND..."
ScriptInvoke 'ScreenWAIT' "$MySB_InstallDir/install/Cron" 'UPGRADE'
StatusSTD

#### Upgrade in progress page
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Upgrade_DisablingProgressPage$CEND..."
UpgradeInProgress "off" &> /dev/null
StatusSTD

#### Update version info
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- $Global_UpdatingVersion$CEND..."
Func_SQL_Command 'UPDATE' 'MySB_db' 'system' "mysb_version = '$MySB_CurrentVersion'" "id_system = '1'"
if [ -f $MySB_InstallDir/files/current_version ]; then
	rm -f $MySB_InstallDir/files/current_version
fi
echo -e "$Global_Done"

clear
echo -e "$Upgrade_UpgradeFinished"
echo
REBOOT=$Global_YES
REBOOT="`echo $REBOOT | tr '[:lower:]' '[:upper:]'`"

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################