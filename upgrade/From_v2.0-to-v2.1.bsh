#!/bin/bash
# -----------------------------------------
source $(dirname $0)/../inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#    _\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#     _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#      _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#       _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#        _\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#         _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#          _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Local functions
BannerUpgrade() {
	echo
	echo -e "${CRED}If you lose connection during installation, restart the SSH session and run the following command:$CEND"
	echo -e "${CGREEN}	screen -r MySB_Upgrade$CEND"
	echo
	echo -e "${CYELLOW}All users password will be changed by temporary password (except main user).$CEND"
	echo -e "${CYELLOW}All users IP addresses will be removed (except main user).$CEND"
	echo -e "${CYELLOW}They will receive an email with information to change it.$CEND"
	echo -e "${CYELLOW}Their IP address will be automatically added into the database.$CEND"
	echo
	echo -e "${CYELLOW}The upgrade may take 30 to 60 minutes around.$CEND"
	echo -e "${CYELLOW}This will depend on your server configuration and installed services.$CEND"
	echo
}

SwitchDNS() {
	case "$1" in
		"dnscrypt")
			sed -i '/nameserver/d' /etc/resolv.conf
			echo "nameserver 127.0.0.1" > /etc/resolv.conf
			service service bind9 restart &> /dev/null
			service dnscrypt-proxy restart &> /dev/null
		;;
		"standard")
			sed -i '/nameserver/d' /etc/resolv.conf
			echo "nameserver 208.67.220.220" >> /etc/resolv.conf
			echo "nameserver 8.8.8.8" >> /etc/resolv.conf
			echo "nameserver 4.2.2.1" >> /etc/resolv.conf
			echo "nameserver 208.67.222.222" >> /etc/resolv.conf
			echo "nameserver 8.8.4.4" >> /etc/resolv.conf
			echo "nameserver 4.2.2.2" >> /etc/resolv.conf
			echo "nameserver 4.2.2.3" >> /etc/resolv.conf
			echo "nameserver 4.2.2.4" >> /etc/resolv.conf
			echo "nameserver 4.2.2.5" >> /etc/resolv.conf
			echo "nameserver 4.2.2.6" >> /etc/resolv.conf
			sed -i '/forwarders/d' /etc/bind/named.conf.options
			sed -i '/forward only;/d' /etc/bind/named.conf.options
			sed -i '/version/d' /etc/bind/named.conf.options
			sed -i '/DNScrypt-proxy/d' /etc/bind/named.conf.options
			service dnscrypt-proxy stop &> /dev/null
			service service bind9 restart &> /dev/null
		;;
	esac
}

#### Count steps
echo
CurrentSTEP=0
TotalSTEP=27

BannerUpgrade
#CountDown 20

if [ "$BANNER" == "ON" ]; then
	BannerGenerator
fi
BannerUpgrade

#### Questions
ScriptInvoke "source" "$MySB_InstallDir/install/Questions" "$$" "UPGRADE"
#### Questions

echo

#### Vars
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Reading database informations$CEND..."
if [ -f $MySB_InstallDir/inc/vars ]; then source $MySB_InstallDir/inc/vars; fi
if [ -f $MySB_InstallDir/inc/funcs ]; then source $MySB_InstallDir/inc/funcs; fi
ListingUsers
StatusSTD

#### Bind
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Bind$CEND..."
screen -dmS Bind /bin/bash $MySB_InstallDir/install/Bind 'UPGRADE';
WaitingScreen Bind
StatusSTD

#### DNScrypt-proxy 1/2
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Some fixes for DNScrypt-proxy$CEND..."
cp $MySB_InstallDir/templates/etc.init.dnscrypt-proxy.template /etc/init.d/dnscrypt-proxy
perl -pi -e "s/<MySB_DB>/`echo $MySB_DB | sed s,/,\\\\\\\\\\/,g`/g" /etc/init.d/dnscrypt-proxy
perl -pi -e "s/<InstallDir>/$MySB_InstallDirEscaped/g" /etc/init.d/dnscrypt-proxy
chmod +x /etc/init.d/dnscrypt-proxy
StatusSTD

#### PeerGuardian
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Some fixes for PeerGuardian$CEND..."
if [ "$IsInstalled_PeerGuardian" == "YES" ] || [ "$MySB_PeerBlock" == "PeerGuardian" ]; then
	cp $MySB_InstallDir/templates/etc.pgl.pglcmd.conf.template /etc/pgl/pglcmd.conf
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### Security rules
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Creating new security rules$CEND..."
ScriptInvoke 'screen' "$MySB_InstallDir/bin/MySB_SecurityRules" 'create' 'UPGRADE'
StatusSTD

#### Stopping CRON and rTorrent sessions
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Stopping CRON and rTorrent sessions$CEND..."
service cron stop &> /dev/null
RtorrentSeesions="`ls -1r /etc/init.d/rtorrent-* | cut -d '/' -f 4`"
for Session in $RtorrentSeesions; do
	service $Session stop &> /dev/null
done
StatusSTD

#### Forcing NTP update
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Forcing NTP updateCEND..."
SwitchDNS "standard"
/usr/sbin/ntpdate 0.fr.pool.ntp.org > /dev/null 2>&1
SwitchDNS "dnscrypt"
StatusSTD

######################################################################

#### Move some files & directories
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Moving and deleting some files & directories$CEND..."
# Ghost files
if [ -f /root/1 ]; then rm -f /root/1 &> /dev/null; fi
# Cleaning old certificates
rm -f $MySB_InstallDir/ssl/*.cert &> /dev/null
rm -f $MySB_InstallDir/ssl/*.pem &> /dev/null
rm -f $MySB_InstallDir/ssl/*.key &> /dev/null
# Cleaning sources directory
rm -rf $MySB_InstallDir/sources/* &> /dev/null
# ruTorrent
if [ -d $RutorrentDir ]; then
	mv $RutorrentDir/conf/users $MySB_InstallDir/temp/conf_users &> /dev/null && rm -rf $MySB_InstallDir/temp/conf_users/.svn &> /dev/null
	mv $RutorrentDir/share/users $MySB_InstallDir/temp/share_users &> /dev/null && rm -rf $MySB_InstallDir/temp/share_users/.svn &> /dev/null
	rm -rf $RutorrentDir/ &> /dev/null
fi
# Seedbox-Manager
rm -rf $ManagerDir/ &> /dev/null
StatusSTD

#### SQLite
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Updating MySB database$CEND..."
screen -dmS SQLite /bin/bash $MySB_InstallDir/install/SQLite 'UPGRADE';
WaitingScreen SQLite
StatusSTD

#### DownloadAll
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Downloading all files at once (GIT, SVN, TAR.GZ, WBM)$CEND..."
screen -dmS DownloadAll /bin/bash $MySB_InstallDir/install/DownloadAll 'UPGRADE';
WaitingScreen DownloadAll
StatusSTD

#### Restore users data
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Restoring user data$CEND..."
rsync -av $MySB_InstallDir/temp/conf_users/ $RutorrentDir/conf/users/ &> /dev/null
rsync -av $MySB_InstallDir/temp/share_users/ $RutorrentDir/share/users/ &> /dev/null
rm -rf $MySB_InstallDir/temp/conf_users &> /dev/null
rm -rf $MySB_InstallDir/temp/share_users &> /dev/null
StatusSTD

#### Certificates
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Generating new certificates$CEND..."
screen -dmS Certificates /bin/bash $MySB_InstallDir/install/Certificates 'CreateCACertificate' 'NoServiceNameToGive' 'UPGRADE';
WaitingScreen Certificates
StatusSTD

#### DNScrypt-proxy
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring DNScrypt-proxy$CEND..."
if [ "$IsInstalled_DNScrypt" == "YES" ] || [ "$ToInstall_DNScrypt" == "YES" ]; then
	sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE services SET to_install = '1' WHERE serv_name = 'DNScrypt-proxy';"
	screen -dmS DNScrypt /bin/bash $MySB_InstallDir/install/DNScrypt 'UPGRADE';
	WaitingScreen DNScrypt
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### Monitoring
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Getting information about monitoring servers$CEND..."
if [ "$ServerProvider" == "OVH" ] || [ "$ServerProvider" == "ONLINE" ]; then
	screen -dmS Monitoring /bin/bash $MySB_InstallDir/install/Monitoring 'UPGRADE';
	WaitingScreen Monitoring
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"
fi

#### Tweaks
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- System optimizations$CEND..."
screen -dmS Tweaks /bin/bash $MySB_InstallDir/install/Tweaks 'UPGRADE';
WaitingScreen Tweaks
StatusSTD

#### NginX
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring NginX$CEND..."
screen -dmS Nginx /bin/bash $MySB_InstallDir/install/Nginx 'UPGRADE';
WaitingScreen Nginx
StatusSTD

#### Postfix
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Postfix$CEND..."
screen -dmS Postfix /bin/bash $MySB_InstallDir/install/Postfix 'UPGRADE';
WaitingScreen Postfix
StatusSTD

#### Refresh tools
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Refreshing rTorrent, ruTorrent, Manager, Cakebox, LoadAvg (this may take a while, please be patient)$CEND..."
screen -dmS MySB_RefreshMe /bin/bash $MySB_InstallDir/bin/MySB_RefreshMe 'all' 'UPGRADE';
WaitingScreen MySB_RefreshMe
StatusSTD

#### VSFTPd
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring VSFTPd$CEND..."
screen -dmS VSFTP /bin/bash $MySB_InstallDir/install/VSFTP 'UPGRADE';
WaitingScreen VSFTP
StatusSTD

#### Webmin
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Installing and configuring Webmin$CEND..."
if [ "$ToInstall_Webmin" == "YES" ]; then
	screen -dmS Webmin /bin/bash $MySB_InstallDir/install/Webmin 'UPGRADE';
	WaitingScreen Webmin
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"		
fi

#### NFS
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Some fixes for NFS$CEND..."
if [ "$IsInstalled_NFS" == "YES" ]; then
	for seedUser in $UsersList; do
		sed -i '/'$seedUser'/d' /etc/exports
		uid=`grep $seedUser /etc/passwd | awk -F: '{ print $3 }'`
		guid=`grep MySB_users /etc/group | awk -F: '{ print $3 }'`
		echo "/home/$seedUser/rtorrent 10.0.0.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,fsid=0,crossmnt) 10.0.1.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,nohide,fsid=0,crossmnt) 10.0.2.0/255.255.255.0(ro,anonuid=$uid,async,anongid=$guid,insecure,no_subtree_check,nohide,fsid=0,crossmnt)" >> /etc/exports		
	done
	StatusSTD
else
	echo -e "${CGREEN}Nothing to do !$CEND"	
fi

#### Crontab
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Some fixes for Crontab$CEND..."
crontab -l > /tmp/crontab.tmp
for seedUser in $UsersList; do
	sed -i '/'$seedUser'/d' /tmp/crontab.tmp
	echo "*/5 * * * * if ! ( /bin/ps U $seedUser | grep 'rtorrent' > /dev/null ); then service rtorrent-$seedUser restart &> /dev/null; fi" >> /tmp/crontab.tmp
	echo "0 12 1 * * /bin/bash $MySB_InstallDir/scripts/PaymentReminder.bsh $seedUser CRON &> /dev/null" >> /tmp/crontab.tmp
done
crontab /tmp/crontab.tmp
rm -f /tmp/crontab.tmp
StatusSTD

######################################################################

#### Cleaning
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Cleaning$CEND..."
rm -rf $MySB_InstallDir/temp/* &> /dev/null
if [ -f /root/1 ]; then rm -f /root/1 &> /dev/null; fi
StatusSTD

#### STOP & START services
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Restarting all services$CEND..."
ManageServices stop "stunnel4 postfix" &> /dev/null
ManageServices start "cron nginx openvpn stunnel4 postfix" &> /dev/null
StatusSTD

#### Send mail for each user with new version
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Clearing the password for all users$CEND..."
MainUserId="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT id_users FROM users WHERE admin = '1'\"`"
for seedUser in $UsersList; do
	UserId=$(sqlite3 -cmd '.timeout 150000' $MySB_DB "SELECT id_users FROM users WHERE users_ident = '$seedUser'")
	UserPassword="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT users_passwd FROM users WHERE users_ident = '$seedUser'\"`"
	
	#### Erase all users passwords and addresses (except main user)
	if [ "$UserId" != "$MainUserId" ]; then
		sqlite3 -cmd '.timeout 150000' $MySB_DB "DELETE FROM users_addresses WHERE id_users = '$UserId' AND id_users != '$MainUserId'"
		if [ -z "$UserPassword" ]; then
			UserPassword="`GenPassword 8`"
		fi
		sqlite3 -cmd '.timeout 150000' $MySB_DB "UPDATE users SET users_passwd = '$UserPassword' WHERE users_ident = '$seedUser';"
		
		ScriptInvoke "screen" "$MySB_InstallDir/bin/MySB_ChangeUserPassword" "$seedUser" "$UserPassword" "UPGRADE"
	else
		CurentUserIP="`echo $SSH_CLIENT | awk '{ print $1 }'`"
		if [ -z "$CurentUserIP" ]; then
			CurentUserIP="`who --ips | awk '{print $6}' | grep ^[0123456789]`"
			if [ -z "$CurentUserIP" ]; then
				CurentUserIP="`who --ips | awk '{print $5}' | grep ^[0123456789]`"
			fi
		fi
		
		MainUserIPs="`sqlite3 -cmd '.timeout 150000' $MySB_DB \"SELECT ipv4 FROM users_addresses WHERE is_active = '1' AND id_users = '$MainUserId'\" | sed -e 's/^ //g;' | sed 's/\s+$//' | sed -e 's/\/32//g;'`"
		if [ -z "`echo $MainUserIPs | grep $CurentUserIP`" ]; then
			HostName="$(nslookup $CurentUserIP | grep 'name =' | awk '{ print $4 }' | sed 's/.\{1\}$//g')"
			sqlite3 -cmd '.timeout 150000' $MySB_DB "INSERT into users_addresses (id_users,ipv4,hostname,check_by,is_active) VALUES (\"$UserId\",\"$CurentUserIP\",\"$HostName\",\"ipv4\",\"1\");"
		fi
		ScriptInvoke "screen" "$MySB_InstallDir/bin/MySB_ChangeUserPassword" "$seedUser" "$UserPassword" "UPGRADE"
		#SendMail "MySB - Upgraded to $MySB_CurrentVersion" "$seedUser" "upgrade"
	fi
done
StatusSTD

#### Create missing directories and change rights
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Force owners and rights for some directories$CEND..."
ManageDirectoriesAndFiles
StatusSTD

#### Security rules
(( CurrentSTEP++ ))
echo -e -n "${CBLUE}$CurrentSTEP/$TotalSTEP	- Creating final security rules$CEND..."
ScriptInvoke 'screen' "$MySB_InstallDir/bin/MySB_SecurityRules" 'create' 'UPGRADE'
StatusSTD

clear
echo -e "${CGREEN}Upgrade finished succesfully !$CEND"
echo
QuestionGetString NO  "Do you want to reboot your seedbox now (recommended) ?" REBOOT YES

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################